%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Coronavirus research, pandemic, epidemiology concept.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Виталий Викторович
%%CreationDate: 6/1/2020
%%BoundingBox: 0 0 3000 2000
%%HiResBoundingBox: 0 0 2999.9996 2000
%%CropBox: 0 0 2999.9996 2000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2020-06-01T19:23:09+03:00</xmp:CreateDate>
         <xmp:MetadataDate>2020-06-01T19:23:10+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>172</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgArAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq1JJHGjSSMERRVnY0AA7knFUin866GhK2zSXzDatshdPolbjEfobFUKfPI6jSrr&#xA;j7tbg/cJD+vFWrD8x/L13GkjrcWiO5jDTxbB1JBVvSMnEih+1TACC2TxSiaIZHaXlpeQLPaTx3ED&#xA;fZliYOpp7rUYWtWxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVTubmG2haeduESU5NQmlTQbCp&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:ModifyDate>2020-06-01T19:23:10+03:00</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>3000.000000</stDim:w>
            <stDim:h>2000.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Coronavirus research, pandemic, epidemiology concept</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Coronavirus research, pandemic, epidemiology concept. Microbiologists analyzing Covid infection in lab with glass tubes, test samples, microscope. Scientists discussing corona virus spread geography.</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>epidemiology</rdf:li>
               <rdf:li>pandemic</rdf:li>
               <rdf:li>virus</rdf:li>
               <rdf:li>health</rdf:li>
               <rdf:li>danger</rdf:li>
               <rdf:li>risk</rdf:li>
               <rdf:li>spread</rdf:li>
               <rdf:li>laboratory</rdf:li>
               <rdf:li>tiny</rdf:li>
               <rdf:li>bacteria outbreak</rdf:li>
               <rdf:li>research</rdf:li>
               <rdf:li>microscopic</rdf:li>
               <rdf:li>infection</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>flat</rdf:li>
               <rdf:li>cartoon</rdf:li>
               <rdf:li>concept</rdf:li>
               <rdf:li>people</rdf:li>
               <rdf:li>character</rdf:li>
               <rdf:li>group</rdf:li>
               <rdf:li>scientist</rdf:li>
               <rdf:li>doctor</rdf:li>
               <rdf:li>chemist</rdf:li>
               <rdf:li>studying</rdf:li>
               <rdf:li>corona</rdf:li>
               <rdf:li>lab</rdf:li>
               <rdf:li>coronavirus</rdf:li>
               <rdf:li>medical</rdf:li>
               <rdf:li>covid</rdf:li>
               <rdf:li>2019</rdf:li>
               <rdf:li>experiment</rdf:li>
               <rdf:li>professional</rdf:li>
               <rdf:li>discovery</rdf:li>
               <rdf:li>science</rdf:li>
               <rdf:li>technology</rdf:li>
               <rdf:li>analysis</rdf:li>
               <rdf:li>presentation</rdf:li>
               <rdf:li>analyzing</rdf:li>
               <rdf:li>discussion</rdf:li>
               <rdf:li>world</rdf:li>
               <rdf:li>map</rdf:li>
               <rdf:li>microscope</rdf:li>
               <rdf:li>tube</rdf:li>
               <rdf:li>test</rdf:li>
               <rdf:li>sample</rdf:li>
               <rdf:li>geography</rdf:li>
               <rdf:li>face</rdf:li>
               <rdf:li>mask</rdf:li>
            </rdf:Bag>
         </dc:subject>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmpMM:InstanceID>xmp.iid:D4FCB82224A4EA118B95BC66D25DC48D</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:D4FCB82224A4EA118B95BC66D25DC48D</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>xmp.did:1af78086-f1fb-a14e-82ca-855f44a85776</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1af78086-f1fb-a14e-82ca-855f44a85776</stEvt:instanceID>
                  <stEvt:when>2020-05-04T14:36:25+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:D4FCB82224A4EA118B95BC66D25DC48D</stEvt:instanceID>
                  <stEvt:when>2020-06-01T19:23:10+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:1af78086-f1fb-a14e-82ca-855f44a85776</stRef:instanceID>
            <stRef:documentID>xmp.did:1af78086-f1fb-a14e-82ca-855f44a85776</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:1af78086-f1fb-a14e-82ca-855f44a85776</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -2000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 2000 li
3000 2000 li
3000 0 li
cp
clp
3000 2000 mo
0 2000 li
0 0 li
3000 0 li
3000 2000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
ef
165.324 1834.68 mo
2834.68 1834.68 li
2834.68 165.319 li
165.324 165.319 li
165.324 1834.68 li
165.324 1834.68 li
cp
.839216 .768627 .705882 rgb
ef
1350.94 411.407 mo
1356.54 426.99 1386.09 399.648 1406.68 409.367 cv
1396.23 412.605 1393.78 411.107 1383.51 416.599 cv
1369.01 424.358 1360.67 425.582 1347.65 435.895 cv
1339.12 442.643 1341.84 437.558 1332.23 436.737 cv
1332.04 437.151 1331.99 437.819 1331.97 438.071 cv
1331.66 441.516 li
1331.58 448.636 1333.21 438.943 1332.02 443.896 cv
1311.17 452.594 1319.13 446.973 1317.51 433.509 cv
1306.43 432.34 1309.91 435.301 1300.21 438.568 cv
1304.37 451.839 1312.09 439.24 1306.19 451.354 cv
1317.46 453.605 li
1305.76 464.825 1310.42 453.573 1307.32 472.116 cv
1303.75 493.529 1294.6 475.913 1295.4 499.561 cv
1295.73 509.512 1291.9 514.707 1277.32 521.72 cv
1274.93 507.549 1279.82 516.631 1279.95 506.742 cv
1270.32 513.167 1274.18 512.886 1271.19 523.018 cv
1269.48 528.814 1263.77 533.935 1259.83 539.488 cv
1254.36 532.288 li
1252 538.907 1252.79 540.509 1246.16 543.779 cv
1241.73 533.393 1242.01 532.63 1244.82 523.58 cv
1240.08 517.384 1238.91 523.034 1240.28 518.695 cv
1241.68 514.278 1253.46 511.762 1263.85 504.766 cv
1277.31 495.699 1282.97 495.867 1286.8 477.808 cv
1281.58 476.371 li
1279.27 474.963 1280.55 477.718 1279.13 473.792 cv
1277.06 468.073 1285.99 463.34 1290.17 459.756 cv
1295.31 455.352 1293.43 459.181 1294.4 454.17 cv
1289.85 457.605 1276.1 465.581 1272.74 469.093 cv
1257.22 485.367 1291.57 468.661 1267.95 485.883 cv
1256.83 493.988 1261.35 496.086 1245.21 501.252 cv
1234.77 504.598 1232.93 512.263 1230.71 520.064 cv
1218.65 520.723 li
1218.8 516.757 1221.41 518.385 1223.9 511.068 cv
1210.77 514.911 1198.65 525.863 1188.9 533.438 cv
1176.81 542.84 1177.6 543.783 1169.14 553.308 cv
1162.05 561.302 1162.05 567.618 1158.87 577.569 cv
1154.87 590.062 1161.44 585.661 1153.96 596.002 cv
1147.34 605.137 1138.3 615.179 1138.59 628.197 cv
1145.18 625.73 1141.65 628.178 1146.1 621.701 cv
1147.3 619.938 1148.85 617.338 1150.17 615.075 cv
1162.89 593.326 1173.7 594.359 1184.63 579.788 cv
1188.37 574.795 1189.19 570.02 1192.64 564.86 cv
1196.09 559.682 1200.75 558.513 1204.81 554.005 cv
1207.92 550.56 1223.06 522.744 1229.51 537.428 cv
1232.09 543.305 1232.2 548.8 1228.64 553.34 cv
1221.04 563.062 1220.39 559.045 1220.06 573.588 cv
1232.39 570.32 1229.34 566.146 1240.26 560.631 cv
1238.52 580.401 1227.47 594.11 1227.22 595.796 cv
1225.39 608.372 1232.53 608.185 1232.53 616.99 cv
1232.53 618.285 1231.45 616.083 1232.63 620.726 cv
1233.49 624.081 1234.53 623.796 1236.91 627.571 cv
1228.53 642.411 li
1228.33 642.759 1228.1 643.256 1227.94 643.618 cv
1220.57 660.247 li
1219.33 663.43 1219.38 661.825 1219.04 666.342 cv
1228.1 669.355 li
1227.73 673.511 1227.75 674.098 1227.46 678.341 cv
1226.77 687.898 1229.14 683.02 1223.48 696.987 cv
1211.24 695.922 1219.4 693.349 1207.86 696.183 cv
1208.15 688.977 1207.61 695.192 1209.42 691.779 cv
1210.32 690.1 1211.01 693.607 1211.08 689.345 cv
1211.09 688.615 1211.76 688.528 1212.05 688.079 cv
1205.11 688.615 1198.64 688.35 1192.89 685.17 cv
1195.79 679.846 1197.84 679.361 1200.44 675.377 cv
1202.75 671.844 1202.51 670.224 1205.32 666.133 cv
1207.32 663.23 1210.48 660.595 1213.27 657.428 cv
1214.43 656.117 1215.61 654.757 1216.61 653.233 cv
1216.85 652.869 1217.16 652.342 1217.38 651.994 cv
1217.6 651.632 1217.92 650.957 1218.1 650.65 cv
1218.29 650.334 1218.78 649.979 1218.8 649.23 cv
1218.8 648.461 1219.27 648.264 1219.47 647.764 cv
1203.27 652.956 1204.09 659.575 1184.1 655.904 cv
1177.72 654.735 1174.89 653.046 1169.43 656.126 cv
1168.76 656.507 1157.52 664.373 1156.58 665.303 cv
1158.19 666.017 1157.19 665.697 1160.96 666.133 cv
1171.21 667.55 li
1170.21 677.808 1170.89 669.461 1166.51 675.49 cv
1161.21 691.237 li
1161.24 714.246 1180.73 692.574 1182.12 691.602 cv
1182.86 698.96 1181.52 701.017 1177.52 704.43 cv
1165.55 714.629 1162.23 712.499 1153.04 717.106 cv
1146.23 720.522 1151.15 721.946 1142.9 722.676 cv
1138.28 706.922 1159.6 715.989 1158.35 701.75 cv
1148.22 707.436 1136.97 709.619 1126.98 715.527 cv
1113.26 723.635 1116.05 729.605 1113.72 739.378 cv
1096.16 744.958 1098.1 738.752 1084.21 759.636 cv
1081.53 763.656 1082.77 764.854 1078.44 769.891 cv
1067.24 782.88 1074.58 777.107 1070.66 792.59 cv
1066.56 808.77 1038.38 806.596 1033.93 849.543 cv
1032.99 858.571 1032.6 867.353 1031.43 875.438 cv
1029.99 885.46 1032.64 893.016 1026.31 898.621 cv
1019.13 874.457 1032.24 857.253 1029.36 840.67 cv
1028.98 838.5 1025.59 823.144 1024.61 820.613 cv
1021.69 824.022 1022.59 821.09 1021.61 826.786 cv
1017.08 816.002 1020.21 822.963 1016.69 820.006 cv
1010.14 849.117 li
1009.93 848.858 1009.75 850.06 1009.5 850.486 cv
1009.61 852.048 li
1011.98 869.006 1003.01 894.875 1006.68 909.754 cv
1010.69 925.989 1003.32 947.764 1005.34 965.574 cv
1006.77 978.271 1012.92 981.46 1013.46 997.966 cv
1014.42 1027.76 1015.37 1060.37 1036.75 1081.05 cv
1040.84 1075.56 1040.38 1075.74 1039.35 1067.4 cv
1047.38 1065.02 1045.89 1066.87 1052.85 1063.03 cv
1057.34 1072.85 1050.92 1065.72 1055.62 1077.98 cv
1067.38 1075.59 1056.41 1073.88 1062.72 1075.04 cv
1068.71 1086.49 1068.42 1090.68 1078.54 1097.72 cv
1094.71 1108.97 1082.86 1103.77 1101.98 1107.15 cv
1112.91 1127.25 1109.46 1115.12 1115.62 1126.58 cv
1119.77 1134.29 1117.11 1131.75 1122.7 1137.62 cv
1125.29 1140.33 1127.71 1142.53 1130.08 1145.56 cv
1136.81 1154.16 1135.36 1158.17 1143.58 1166.02 cv
1149.31 1171.5 1152.7 1174.09 1160.86 1177.29 cv
1182.83 1185.93 1181.41 1185.42 1196.86 1200.89 cv
1222.85 1239.92 li
1219.89 1247.05 1219.07 1242.48 1218.23 1250.46 cv
1230.95 1259.64 1235.43 1247.31 1243.1 1267.08 cv
1256.12 1259.42 1257.15 1266.06 1267.95 1271.63 cv
1277.45 1276.55 1283.32 1277.18 1286.22 1291.71 cv
1309.48 1286.43 1294.6 1288.38 1313.16 1292.67 cv
1337 1298.19 1332.03 1291.07 1356.38 1306.98 cv
1391.85 1330.16 1385.66 1310.68 1396.12 1326.85 cv
1413.93 1354.39 1404.78 1355.5 1393.2 1369.81 cv
1389.09 1374.87 1391.85 1374.74 1387.52 1380.04 cv
1382.12 1386.61 1384.95 1380.87 1380.51 1384.57 cv
1387.55 1411.41 1398.56 1408.75 1391.09 1442.77 cv
1376.21 1445.96 1361.53 1439.93 1346.66 1448.21 cv
1349.29 1453.79 1354 1454.24 1357.99 1459.83 cv
1353.15 1466.58 1356.39 1467.37 1349.78 1469.89 cv
1383.8 1486.68 1441.35 1503.3 1486.43 1509.86 cv
1538.4 1517.42 1591.27 1520.6 1648.63 1512.9 cv
1774.94 1495.94 1868.26 1448.32 1952.24 1379.32 cv
1944.16 1376.54 1952.69 1379.55 1947.39 1376.64 cv
1949.94 1371.46 1951.62 1373.07 1952.26 1368.61 cv
1952.94 1363.95 1950.88 1363.53 1949.59 1361.16 cv
1942.07 1347.31 1954.31 1338.1 1946.58 1326.6 cv
1943.36 1321.8 1938.8 1316.48 1937.5 1310.84 cv
1935.65 1302.79 1942.46 1284.43 1944.9 1276.74 cv
1948.34 1265.91 1959.18 1257.92 1958.02 1246.75 cv
1957.07 1237.61 1954.19 1240.3 1953.67 1226.93 cv
1953.32 1218.12 1950.32 1215.8 1946.73 1208.08 cv
1939.26 1192 1936.88 1190.69 1922.27 1185.37 cv
1896.82 1176.08 1920.34 1157.97 1909.09 1117.02 cv
1882.21 1110.81 1880.69 1130.99 1866.13 1127.71 cv
1859.34 1124.73 1861.26 1114.6 1849.87 1114.29 cv
1832.59 1113.83 1817.74 1127.31 1805.71 1135.29 cv
1797.07 1141.04 1795.9 1143.53 1788.25 1149 cv
1771.35 1161.06 1757.94 1154.16 1739.08 1164.47 cv
1721.3 1174.17 1717.06 1181.52 1695.64 1177.64 cv
1684.42 1175.62 1685.23 1172.52 1676.17 1169.52 cv
1668.83 1167.1 1663.28 1166.69 1655.2 1163.76 cv
1645.39 1160.21 1643.59 1163.24 1636.79 1153.92 cv
1621.25 1132.59 1627.59 1137.02 1604.54 1126.68 cv
1592.25 1121.15 1602.59 1117.88 1588.4 1113.42 cv
1578.97 1110.45 1577.6 1108.91 1575.81 1098 cv
1574.55 1090.37 1568.28 1085.85 1563.8 1082.51 cv
1571.8 1066.62 1572.49 1063.01 1571.1 1040.13 cv
1570.69 1033.51 1569.76 1021.94 1567.61 1015.48 cv
1565.02 1007.68 1560.01 1003.95 1553.57 1001.68 cv
1555.85 990.165 1558.24 981.589 1560.8 971.076 cv
1565.11 953.382 1569.03 954.48 1571.26 943.747 cv
1573.74 931.775 1577.95 924.8 1581.09 914.675 cv
1587.58 893.778 1586.59 905.466 1600.09 892.641 cv
1603.34 889.555 1615.12 872.119 1615.26 866.966 cv
1615.52 857.796 1611.47 862.6 1611.85 851.183 cv
1612.54 831.022 1616.72 825.856 1631.11 812.334 cv
1637.99 805.847 1633.82 795.916 1638.65 783.988 cv
1645.01 782.929 1664.72 790.358 1683.21 778.673 cv
1698.78 768.826 1695.09 761.238 1713.06 752.92 cv
1721.09 749.207 1725.95 744.661 1735 743.124 cv
1741.34 742.049 1740.6 743.918 1744.96 741.597 cv
1749.21 739.333 1746.63 738.536 1752.48 735.872 cv
1763.78 730.732 1761.7 736.686 1773.03 726.902 cv
1777.15 723.354 1769.21 725.892 1777.78 724.003 cv
1781.77 723.125 1781.28 724.019 1782.33 724.119 cv
1787.09 724.578 1782.9 728.72 1790.38 724.061 cv
1793.97 743.127 1791.44 729.327 1800.88 741.371 cv
1801.9 752.333 1796.29 751.441 1800.08 759.666 cv
1811.05 767.776 1821.25 762.678 1835.23 760.301 cv
1854.14 757.082 1852.93 761.374 1862.62 769.701 cv
1878.39 766.552 1886.31 771.15 1896.15 768.68 cv
1899.19 747.609 1888.24 754.373 1891.06 740.851 cv
1893.06 731.255 1901.21 726.786 1912.25 729.631 cv
1924.2 732.708 1929.92 730.59 1943.25 727.583 cv
1958.58 724.123 1960.77 721.843 1963.31 710.432 cv
1973.24 707.471 1982.1 710.674 1981.23 698.699 cv
1981.06 696.425 1980.87 696.061 1980.27 693.858 cv
1979.59 691.35 1977.78 686.962 1976.91 684.592 cv
1971.74 670.488 1965.8 658.148 1955.41 647.79 cv
1951.44 643.844 1955.36 644.645 1950.15 644.141 cv
1946.62 648.306 1947.06 651.535 1946.19 656.763 cv
1935.63 659.895 1939.21 656.056 1928.2 658.203 cv
1925.3 667.279 li
1895.24 667.986 1902.66 657.354 1887.91 660.149 cv
1888.42 655.558 1888.66 656.843 1889.59 652.504 cv
1879.12 648.562 1881.21 643.531 1873.96 635.666 cv
1859.8 636.747 1857.74 637.467 1863.64 648.313 cv
1855.11 651.119 li
1865.74 661.318 1867.55 658.926 1879.45 663.882 cv
1880.97 676.242 1874.86 667.905 1877.67 677.25 cv
1879.94 684.798 1882.11 680.22 1880.73 688.234 cv
1867.69 687.395 1864.05 676.943 1853.42 671.451 cv
1843.4 666.278 1862.06 675.209 1851.07 670.243 cv
1834.24 660.24 li
1830.58 656.74 1827.38 649.026 1823.34 645.533 cv
1810.81 634.687 1785.59 643.256 1759.68 627.28 cv
1754.58 624.145 1754.57 624.291 1749.78 628.2 cv
1755.67 638.11 1755.85 639.117 1766.15 644.063 cv
1772.71 647.228 1779.2 652.498 1785.87 654.228 cv
1791.33 655.648 1792.85 654.373 1798.61 655.568 cv
1806.79 657.263 1826.55 659.817 1827.8 667.776 cv
1821.49 668.819 1822.18 665.409 1815.22 668.945 cv
1816.56 677.882 1815.74 672.587 1823.69 677.392 cv
1824.23 680.075 1826.11 689.054 1825.85 691.127 cv
1824.85 699.16 1825.9 692.651 1823.72 695.744 cv
1822.8 697.045 1822.09 698.23 1821.77 697.85 cv
1821.5 697.542 1820.99 698.505 1820.4 699.009 cv
1824.69 712.027 li
1817.83 713.099 1815.54 712.056 1808.69 711.453 cv
1806.39 711.249 1804.18 711.437 1801.61 710.487 cv
1795.74 708.324 1799.2 710.184 1796.44 706.474 cv
1801.49 700.465 1844.32 692.699 1800.04 673.365 cv
1787.8 668.021 1785.42 670.753 1774.57 667.557 cv
1772.81 667.04 1751.46 659.594 1750.7 659.132 cv
1741.72 653.627 1744.19 647.509 1727.12 650.108 cv
1726.08 654.402 1719.56 664.958 1715.99 667.427 cv
1706.26 674.16 1686.73 661.803 1692.95 682.319 cv
1698.57 700.852 1680.1 700.071 1677.72 717.261 cv
1676.2 728.207 1677.95 727.077 1683.98 732.811 cv
1682.53 737.735 1681.87 737.383 1680.78 741.939 cv
1678.52 751.409 1674.85 755.045 1671.74 763.775 cv
1665.45 765.865 1653.49 767.515 1649.16 769.839 cv
1643.74 772.745 1643.45 777.262 1637.97 781.098 cv
1627.37 777.42 1629.88 769.923 1617.23 773.075 cv
1600.36 777.282 1604 779.555 1599.58 762.039 cv
1577.24 749.805 1609.72 749.278 1581.66 705.708 cv
1582.05 705.308 1582.62 704.898 1582.92 704.63 cv
1588.27 699.586 li
1593.95 694.411 1599.42 696.242 1609.83 693.436 cv
1622.39 690.052 1635.64 688.896 1647.68 684.624 cv
1646.74 668.264 1648.2 661.771 1634.09 651.913 cv
1625.91 646.188 1631.14 644.135 1621.48 642.556 cv
1615.25 641.539 1606.51 645.126 1604.51 639.831 cv
1601.23 631.151 1621.6 629.973 1626.63 628.811 cv
1619.01 619.021 li
1625.32 619.792 1625.85 620.813 1634.04 618.979 cv
1634.21 618.617 1635.41 615.688 1635.41 615.679 cv
1635.57 615.392 1635.83 614.875 1636 614.578 cv
1642.63 603.151 1640.19 600.562 1645.13 595.748 cv
1651.69 589.357 1652.16 586.436 1651.75 577.292 cv
1651.65 574.967 1651.65 574.657 1651.67 572.526 cv
1651.71 567.686 1657.48 565.345 1661.68 562.755 cv
1666.89 559.533 1667.08 560.818 1671.01 558.054 cv
1665.34 551.303 1654.38 542.795 1651.7 531.881 cv
1654.93 527.845 1654.6 527.583 1660.07 523.777 cv
1670.07 538.587 li
1679.5 535.659 1669.99 536.957 1679.66 533.186 cv
1685.65 539.495 li
1682.42 549.63 li
1690.5 547.703 1687.36 546.728 1693.85 542.862 cv
1703.99 546.107 li
1708.02 542.578 1709.36 538.862 1713.52 535.359 cv
1720.02 529.873 1720.6 533.299 1728.79 530.884 cv
1732.8 509.893 1722.02 523.215 1717.5 501.404 cv
1727.14 501.446 1722.4 504.294 1731.4 502.16 cv
1726.19 492.334 1721.98 496.002 1712.7 496.054 cv
1705.34 480.721 1716.47 488.26 1723.51 477.663 cv
1713.58 470.637 1712.48 479.804 1704.92 485.502 cv
1697.3 485.07 1680.99 477.556 1676.3 472.952 cv
1667.28 464.111 1675.56 440.603 1653.7 450.792 cv
1655.99 464.127 1660.04 450.328 1661.27 463.12 cv
1662.02 470.814 1655.82 469.981 1662.31 479.768 cv
1667.33 487.327 1678.9 488.88 1687.22 492.038 cv
1688.08 498.237 1685.87 503.028 1689.81 509.554 cv
1693.4 515.505 1695.12 512.686 1698.26 521.407 cv
1689.91 534.48 li
1675.84 533.441 1681.86 529.931 1671.3 522.957 cv
1662.62 517.229 1661.82 517.203 1654.4 511.281 cv
1645.15 512.941 li
1641.47 519.347 1644.26 522.459 1636.54 524.636 cv
1623.66 528.258 1603.72 509.738 1605.27 496.409 cv
1606.22 488.205 1614.89 481.893 1616.78 473.917 cv
1618.11 468.348 1613.65 453.156 1609.39 447.351 cv
1607.35 444.587 1606.51 446.169 1605.49 443.909 cv
1605.24 443.35 1604.73 443.437 1604.39 443.144 cv
1605.16 441.797 1606.97 438.145 1607.5 437.383 cv
1613.7 429.169 li
1613.88 428.84 1614.05 428.31 1614.24 427.978 cv
1618.33 422.605 li
1624.32 418.114 1626.11 420.661 1631.25 421.707 cv
1676.35 418.346 li
1685.3 417.613 1695.69 419.76 1698.83 428.643 cv
1684.27 432.178 li
1692.27 439.007 1701.02 438.671 1713.04 439.395 cv
1713.5 437.806 1714.09 434.371 1714.66 432.446 cv
1708.64 430.157 1706.5 428.446 1704.11 422.753 cv
1701.14 415.708 1691.9 417.255 1684.52 413.351 cv
1693.56 411.407 1694.64 414.52 1703.48 414.713 cv
1699.96 408.682 1700.16 403.749 1699.25 400.016 cv
1698.32 396.167 1698.88 398.143 1696.02 394.104 cv
1695.77 393.762 1693.81 391.021 1693.41 390.572 cv
1693.12 390.255 1692.79 389.819 1692.49 389.535 cv
1689.85 387.081 1672.67 383.675 1666.76 381.844 cv
1654.32 377.992 1658.61 374.13 1643.54 372.242 cv
1635.19 371.195 1623.53 372.494 1618.1 366.101 cv
1573.26 364.15 1535.72 364.518 1487.62 371.796 cv
1451.01 377.333 1382.86 394.546 1350.94 411.407 cv
1350.94 411.407 li
cp
.72549 .890196 .976471 rgb
ef
1952.24 1379.32 mo
1976.8 1357.31 2006.94 1330.11 2025.18 1306.63 cv
2053.65 1266.09 li
2059.82 1257.92 2078.15 1230.69 2079.38 1222.37 cv
2080.84 1189.16 2125.3 1158.96 2122.23 1091 cv
2118.86 1016.34 2159.08 961.519 2132.32 832.042 cv
2124.85 843.228 2128.74 865.416 2120.34 870.104 cv
2110.11 862.355 2116.1 856.737 2101.2 847.567 cv
2091.81 841.781 2095.11 848.626 2088.75 840.567 cv
2085.67 836.653 2082.79 829.795 2079.89 825.404 cv
2070.75 811.598 2075.82 828.827 2059.99 802.776 cv
2044.87 777.908 2050.4 787.43 2038.33 782.222 cv
2031.34 763.521 2024.74 761.803 2012.47 750.983 cv
2006.77 745.959 1986.75 728.375 1983.98 722.792 cv
1989.89 724.197 1989.35 725.491 1993.26 730.047 cv
1999.22 736.993 1996.2 733.351 2002.41 737.322 cv
2002.77 737.115 2003.03 736.079 2003.23 736.369 cv
2004.28 737.913 2003.06 732.834 2007.61 732.701 cv
2010.28 732.624 2013.85 735.704 2016.19 737.509 cv
2039.9 758.813 li
2054.18 767.563 2049.92 764.644 2061.4 782.987 cv
2070.02 796.749 2083.22 789.083 2102.84 833.089 cv
2104.63 837.105 2105.99 839.895 2108.22 843.847 cv
2112.41 851.248 2110.4 850.396 2115.8 850.718 cv
2116.51 842.607 2115.51 837.868 2116.75 830.054 cv
2117.76 823.712 2119.1 815.782 2119.65 808.989 cv
2122.15 778.128 2112.23 740.661 2102.24 712.337 cv
2095.12 692.157 2095 692.018 2077.77 678.751 cv
2077.44 678.496 2076.9 678.047 2076.42 677.76 cv
2078.71 685.822 2082.82 693.181 2080.58 700.342 cv
2073.2 696.422 2075.72 693.426 2070.36 689.345 cv
2067.99 687.533 2037.36 674.05 2042.44 658.639 cv
2051.74 659.62 2051.06 671.802 2068.05 671.063 cv
2068.15 669.998 2068.05 667.15 2068.06 667.037 cv
2069.5 661.099 li
2074.31 666.456 2070.7 664.664 2076.7 667.311 cv
2079.36 657.689 li
2074.6 641.975 2050.15 605.356 2040.25 592.803 cv
1984.13 521.646 1957.69 498.734 1886.41 452.697 cv
1839.56 422.431 1746.73 383.949 1693.54 375.764 cv
1670.99 372.293 1643.02 366.943 1618.1 366.101 cv
1623.53 372.494 1635.19 371.195 1643.54 372.242 cv
1658.61 374.13 1654.32 377.992 1666.76 381.844 cv
1672.67 383.675 1689.85 387.081 1692.49 389.535 cv
1692.79 389.819 1693.12 390.255 1693.41 390.572 cv
1693.81 391.021 1695.77 393.762 1696.02 394.104 cv
1698.88 398.143 1698.32 396.167 1699.25 400.016 cv
1700.16 403.749 1699.96 408.682 1703.48 414.713 cv
1694.64 414.52 1693.56 411.407 1684.52 413.351 cv
1691.9 417.255 1701.14 415.708 1704.11 422.753 cv
1706.5 428.446 1708.64 430.157 1714.66 432.446 cv
1714.09 434.371 1713.5 437.806 1713.04 439.395 cv
1701.02 438.671 1692.27 439.007 1684.27 432.178 cv
1698.83 428.643 li
1695.69 419.76 1685.3 417.613 1676.35 418.346 cv
1631.25 421.707 li
1626.11 420.661 1624.32 418.114 1618.33 422.605 cv
1614.24 427.978 li
1614.05 428.31 1613.88 428.84 1613.7 429.169 cv
1607.5 437.383 li
1606.97 438.145 1605.16 441.797 1604.39 443.144 cv
1604.73 443.437 1605.24 443.35 1605.49 443.909 cv
1606.51 446.169 1607.35 444.587 1609.39 447.351 cv
1613.65 453.156 1618.11 468.348 1616.78 473.917 cv
1614.89 481.893 1606.22 488.205 1605.27 496.409 cv
1603.72 509.738 1623.66 528.258 1636.54 524.636 cv
1644.26 522.459 1641.47 519.347 1645.15 512.941 cv
1654.4 511.281 li
1661.82 517.203 1662.62 517.229 1671.3 522.957 cv
1681.86 529.931 1675.84 533.441 1689.91 534.48 cv
1698.26 521.407 li
1695.12 512.686 1693.4 515.505 1689.81 509.554 cv
1685.87 503.028 1688.08 498.237 1687.22 492.038 cv
1678.9 488.88 1667.33 487.327 1662.31 479.768 cv
1655.82 469.981 1662.02 470.814 1661.27 463.12 cv
1660.04 450.328 1655.99 464.127 1653.7 450.792 cv
1675.56 440.603 1667.28 464.111 1676.3 472.952 cv
1680.99 477.556 1697.3 485.07 1704.92 485.502 cv
1712.48 479.804 1713.58 470.637 1723.51 477.663 cv
1716.47 488.26 1705.34 480.721 1712.7 496.054 cv
1721.98 496.002 1726.19 492.334 1731.4 502.16 cv
1722.4 504.294 1727.14 501.446 1717.5 501.404 cv
1722.02 523.215 1732.8 509.893 1728.79 530.884 cv
1720.6 533.299 1720.02 529.873 1713.52 535.359 cv
1709.36 538.862 1708.02 542.578 1703.99 546.107 cv
1693.85 542.862 li
1687.36 546.728 1690.5 547.703 1682.42 549.63 cv
1685.65 539.495 li
1679.66 533.186 li
1669.99 536.957 1679.5 535.659 1670.07 538.587 cv
1660.07 523.777 li
1654.6 527.583 1654.93 527.845 1651.7 531.881 cv
1654.38 542.795 1665.34 551.303 1671.01 558.054 cv
1667.08 560.818 1666.89 559.533 1661.68 562.755 cv
1657.48 565.345 1651.71 567.686 1651.67 572.526 cv
1651.65 574.657 1651.65 574.967 1651.75 577.292 cv
1652.16 586.436 1651.69 589.357 1645.13 595.748 cv
1640.19 600.562 1642.63 603.151 1636 614.578 cv
1635.83 614.875 1635.57 615.392 1635.41 615.679 cv
1635.41 615.688 1634.21 618.617 1634.04 618.979 cv
1625.85 620.813 1625.32 619.792 1619.01 619.021 cv
1626.63 628.811 li
1621.6 629.973 1601.23 631.151 1604.51 639.831 cv
1606.51 645.126 1615.25 641.539 1621.48 642.556 cv
1631.14 644.135 1625.91 646.188 1634.09 651.913 cv
1648.2 661.771 1646.74 668.264 1647.68 684.624 cv
1635.64 688.896 1622.39 690.052 1609.83 693.436 cv
1599.42 696.242 1593.95 694.411 1588.27 699.586 cv
1582.92 704.63 li
1582.62 704.898 1582.05 705.308 1581.66 705.708 cv
1609.72 749.278 1577.24 749.805 1599.58 762.039 cv
1604 779.555 1600.36 777.282 1617.23 773.075 cv
1629.88 769.923 1627.37 777.42 1637.97 781.098 cv
1643.45 777.262 1643.74 772.745 1649.16 769.839 cv
1653.49 767.515 1665.45 765.865 1671.74 763.775 cv
1674.85 755.045 1678.52 751.409 1680.78 741.939 cv
1681.87 737.383 1682.53 737.735 1683.98 732.811 cv
1677.95 727.077 1676.2 728.207 1677.72 717.261 cv
1680.1 700.071 1698.57 700.852 1692.95 682.319 cv
1686.73 661.803 1706.26 674.16 1715.99 667.427 cv
1719.56 664.958 1726.08 654.402 1727.12 650.108 cv
1744.19 647.509 1741.72 653.627 1750.7 659.132 cv
1751.46 659.594 1772.81 667.04 1774.57 667.557 cv
1785.42 670.753 1787.8 668.021 1800.04 673.365 cv
1844.32 692.699 1801.49 700.465 1796.44 706.474 cv
1799.2 710.184 1795.74 708.324 1801.61 710.487 cv
1804.18 711.437 1806.39 711.249 1808.69 711.453 cv
1815.54 712.056 1817.83 713.099 1824.69 712.027 cv
1820.4 699.009 li
1820.99 698.505 1821.5 697.542 1821.77 697.85 cv
1822.09 698.23 1822.8 697.045 1823.72 695.744 cv
1825.9 692.651 1824.85 699.16 1825.85 691.127 cv
1826.11 689.054 1824.23 680.075 1823.69 677.392 cv
1815.74 672.587 1816.56 677.882 1815.22 668.945 cv
1822.18 665.409 1821.49 668.819 1827.8 667.776 cv
1826.55 659.817 1806.79 657.263 1798.61 655.568 cv
1792.85 654.373 1791.33 655.648 1785.87 654.228 cv
1779.2 652.498 1772.71 647.228 1766.15 644.063 cv
1755.85 639.117 1755.67 638.11 1749.78 628.2 cv
1754.57 624.291 1754.58 624.145 1759.68 627.28 cv
1785.59 643.256 1810.81 634.687 1823.34 645.533 cv
1827.38 649.026 1830.58 656.74 1834.24 660.24 cv
1851.07 670.243 li
1862.06 675.209 1843.4 666.278 1853.42 671.451 cv
1864.05 676.943 1867.69 687.395 1880.73 688.234 cv
1882.11 680.22 1879.94 684.798 1877.67 677.25 cv
1874.86 667.905 1880.97 676.242 1879.45 663.882 cv
1867.55 658.926 1865.74 661.318 1855.11 651.119 cv
1863.64 648.313 li
1857.74 637.467 1859.8 636.747 1873.96 635.666 cv
1881.21 643.531 1879.12 648.562 1889.59 652.504 cv
1888.66 656.843 1888.42 655.558 1887.91 660.149 cv
1902.66 657.354 1895.24 667.986 1925.3 667.279 cv
1928.2 658.203 li
1939.21 656.056 1935.63 659.895 1946.19 656.763 cv
1947.06 651.535 1946.62 648.306 1950.15 644.141 cv
1955.36 644.645 1951.44 643.844 1955.41 647.79 cv
1965.8 658.148 1971.74 670.488 1976.91 684.592 cv
1977.78 686.962 1979.59 691.35 1980.27 693.858 cv
1980.87 696.061 1981.06 696.425 1981.23 698.699 cv
1982.1 710.674 1973.24 707.471 1963.31 710.432 cv
1960.77 721.843 1958.58 724.123 1943.25 727.583 cv
1929.92 730.59 1924.2 732.708 1912.25 729.631 cv
1901.21 726.786 1893.06 731.255 1891.06 740.851 cv
1888.24 754.373 1899.19 747.609 1896.15 768.68 cv
1886.31 771.15 1878.39 766.552 1862.62 769.701 cv
1852.93 761.374 1854.14 757.082 1835.23 760.301 cv
1821.25 762.678 1811.05 767.776 1800.08 759.666 cv
1796.29 751.441 1801.9 752.333 1800.88 741.371 cv
1791.44 729.327 1793.97 743.127 1790.38 724.061 cv
1782.9 728.72 1787.09 724.578 1782.33 724.119 cv
1781.28 724.019 1781.77 723.125 1777.78 724.003 cv
1769.21 725.892 1777.15 723.354 1773.03 726.902 cv
1761.7 736.686 1763.78 730.732 1752.48 735.872 cv
1746.63 738.536 1749.21 739.333 1744.96 741.597 cv
1740.6 743.918 1741.34 742.049 1735 743.124 cv
1725.95 744.661 1721.09 749.207 1713.06 752.92 cv
1695.09 761.238 1698.78 768.826 1683.21 778.673 cv
1664.72 790.358 1645.01 782.929 1638.65 783.988 cv
1633.82 795.916 1637.99 805.847 1631.11 812.334 cv
1616.72 825.856 1612.54 831.022 1611.85 851.183 cv
1611.47 862.6 1615.52 857.796 1615.26 866.966 cv
1615.12 872.119 1603.34 889.555 1600.09 892.641 cv
1586.59 905.466 1587.58 893.778 1581.09 914.675 cv
1577.95 924.8 1573.74 931.775 1571.26 943.747 cv
1569.03 954.48 1565.11 953.382 1560.8 971.076 cv
1558.24 981.589 1555.85 990.165 1553.57 1001.68 cv
1560.01 1003.95 1565.02 1007.68 1567.61 1015.48 cv
1569.76 1021.94 1570.69 1033.51 1571.1 1040.13 cv
1572.49 1063.01 1571.8 1066.62 1563.8 1082.51 cv
1568.28 1085.85 1574.55 1090.37 1575.81 1098 cv
1577.6 1108.91 1578.97 1110.45 1588.4 1113.42 cv
1602.59 1117.88 1592.25 1121.15 1604.54 1126.68 cv
1627.59 1137.02 1621.25 1132.59 1636.79 1153.92 cv
1643.59 1163.24 1645.39 1160.21 1655.2 1163.76 cv
1663.28 1166.69 1668.83 1167.1 1676.17 1169.52 cv
1685.23 1172.52 1684.42 1175.62 1695.64 1177.64 cv
1717.06 1181.52 1721.3 1174.17 1739.08 1164.47 cv
1757.94 1154.16 1771.35 1161.06 1788.25 1149 cv
1795.9 1143.53 1797.07 1141.04 1805.71 1135.29 cv
1817.74 1127.31 1832.59 1113.83 1849.87 1114.29 cv
1861.26 1114.6 1859.34 1124.73 1866.13 1127.71 cv
1880.69 1130.99 1882.21 1110.81 1909.09 1117.02 cv
1920.34 1157.97 1896.82 1176.08 1922.27 1185.37 cv
1936.88 1190.69 1939.26 1192 1946.73 1208.08 cv
1950.32 1215.8 1953.32 1218.12 1953.67 1226.93 cv
1954.19 1240.3 1957.07 1237.61 1958.02 1246.75 cv
1959.18 1257.92 1948.34 1265.91 1944.9 1276.74 cv
1942.46 1284.43 1935.65 1302.79 1937.5 1310.84 cv
1938.8 1316.48 1943.36 1321.8 1946.58 1326.6 cv
1954.31 1338.1 1942.07 1347.31 1949.59 1361.16 cv
1950.88 1363.53 1952.94 1363.95 1952.26 1368.61 cv
1951.62 1373.07 1949.94 1371.46 1947.39 1376.64 cv
1952.69 1379.55 1944.16 1376.54 1952.24 1379.32 cv
1952.24 1379.32 li
cp
.498039 .835294 .54902 rgb
ef
1349.78 1469.89 mo
1356.39 1467.37 1353.15 1466.58 1357.99 1459.83 cv
1354 1454.24 1349.29 1453.79 1346.66 1448.21 cv
1361.53 1439.93 1376.21 1445.96 1391.09 1442.77 cv
1398.56 1408.75 1387.55 1411.41 1380.51 1384.57 cv
1384.95 1380.87 1382.12 1386.61 1387.52 1380.04 cv
1391.85 1374.74 1389.09 1374.87 1393.2 1369.81 cv
1404.78 1355.5 1413.93 1354.39 1396.12 1326.85 cv
1385.66 1310.68 1391.85 1330.16 1356.38 1306.98 cv
1332.03 1291.07 1337 1298.19 1313.16 1292.67 cv
1294.6 1288.38 1309.48 1286.43 1286.22 1291.71 cv
1283.32 1277.18 1277.45 1276.55 1267.95 1271.63 cv
1257.15 1266.06 1256.12 1259.42 1243.1 1267.08 cv
1235.43 1247.31 1230.95 1259.64 1218.23 1250.46 cv
1219.07 1242.48 1219.89 1247.05 1222.85 1239.92 cv
1196.86 1200.89 li
1181.41 1185.42 1182.83 1185.93 1160.86 1177.29 cv
1152.7 1174.09 1149.31 1171.5 1143.58 1166.02 cv
1135.36 1158.17 1136.81 1154.16 1130.08 1145.56 cv
1127.71 1142.53 1125.29 1140.33 1122.7 1137.62 cv
1117.11 1131.75 1119.77 1134.29 1115.62 1126.58 cv
1109.46 1115.12 1112.91 1127.25 1101.98 1107.15 cv
1082.86 1103.77 1094.71 1108.97 1078.54 1097.72 cv
1068.42 1090.68 1068.71 1086.49 1062.72 1075.04 cv
1056.41 1073.88 1067.38 1075.59 1055.62 1077.98 cv
1050.92 1065.72 1057.34 1072.85 1052.85 1063.03 cv
1045.89 1066.87 1047.38 1065.02 1039.35 1067.4 cv
1040.38 1075.74 1040.84 1075.56 1036.75 1081.05 cv
1015.37 1060.37 1014.42 1027.76 1013.46 997.966 cv
1012.92 981.46 1006.77 978.271 1005.34 965.574 cv
1003.32 947.764 1010.69 925.989 1006.68 909.754 cv
1003.01 894.875 1011.98 869.006 1009.61 852.048 cv
1003.23 897.859 li
999.268 948.9 1002.05 1001.28 1012.6 1052.73 cv
1034.11 1157.61 1077.68 1241.91 1143.18 1319.54 cv
1162.85 1342.86 1183.83 1361 1204.7 1380.94 cv
1228.41 1403.58 1321.27 1463.1 1349.78 1469.89 cv
1349.78 1469.89 li
cp
ef
1009.5 850.486 mo
1009.75 850.06 1009.93 848.858 1010.14 849.117 cv
1016.69 820.006 li
1020.21 822.963 1017.08 816.002 1021.61 826.786 cv
1022.59 821.09 1021.69 824.022 1024.61 820.613 cv
1025.59 823.144 1028.98 838.5 1029.36 840.67 cv
1032.24 857.253 1019.13 874.457 1026.31 898.621 cv
1032.64 893.016 1029.99 885.46 1031.43 875.438 cv
1032.6 867.353 1032.99 858.571 1033.93 849.543 cv
1038.38 806.596 1066.56 808.77 1070.66 792.59 cv
1074.58 777.107 1067.24 782.88 1078.44 769.891 cv
1082.77 764.854 1081.53 763.656 1084.21 759.636 cv
1098.1 738.752 1096.16 744.958 1113.72 739.378 cv
1116.05 729.605 1113.26 723.635 1126.98 715.527 cv
1136.97 709.619 1148.22 707.436 1158.35 701.75 cv
1159.6 715.989 1138.28 706.922 1142.9 722.676 cv
1151.15 721.946 1146.23 720.522 1153.04 717.106 cv
1162.23 712.499 1165.55 714.629 1177.52 704.43 cv
1181.52 701.017 1182.86 698.96 1182.12 691.602 cv
1180.73 692.574 1161.24 714.246 1161.21 691.237 cv
1166.51 675.49 li
1170.89 669.461 1170.21 677.808 1171.21 667.55 cv
1160.96 666.133 li
1157.19 665.697 1158.19 666.017 1156.58 665.303 cv
1157.52 664.373 1168.76 656.507 1169.43 656.126 cv
1174.89 653.046 1177.72 654.735 1184.1 655.904 cv
1204.09 659.575 1203.27 652.956 1219.47 647.764 cv
1219.27 648.264 1218.8 648.461 1218.8 649.23 cv
1218.78 649.979 1218.29 650.334 1218.1 650.65 cv
1217.92 650.957 1217.6 651.632 1217.38 651.994 cv
1217.16 652.342 1216.85 652.869 1216.61 653.233 cv
1215.61 654.757 1214.43 656.117 1213.27 657.428 cv
1210.48 660.595 1207.32 663.23 1205.32 666.133 cv
1202.51 670.224 1202.75 671.844 1200.44 675.377 cv
1197.84 679.361 1195.79 679.846 1192.89 685.17 cv
1198.64 688.35 1205.11 688.615 1212.05 688.079 cv
1211.76 688.528 1211.09 688.615 1211.08 689.345 cv
1211.01 693.607 1210.32 690.1 1209.42 691.779 cv
1207.61 695.192 1208.15 688.977 1207.86 696.183 cv
1219.4 693.349 1211.24 695.922 1223.48 696.987 cv
1229.14 683.02 1226.77 687.898 1227.46 678.341 cv
1227.75 674.098 1227.73 673.511 1228.1 669.355 cv
1219.04 666.342 li
1219.38 661.825 1219.33 663.43 1220.57 660.247 cv
1227.94 643.618 li
1228.1 643.256 1228.33 642.759 1228.53 642.411 cv
1236.91 627.571 li
1234.53 623.796 1233.49 624.081 1232.63 620.726 cv
1231.45 616.083 1232.53 618.285 1232.53 616.99 cv
1232.53 608.185 1225.39 608.372 1227.22 595.796 cv
1227.47 594.11 1238.52 580.401 1240.26 560.631 cv
1229.34 566.146 1232.39 570.32 1220.06 573.588 cv
1220.39 559.045 1221.04 563.062 1228.64 553.34 cv
1232.2 548.8 1232.09 543.305 1229.51 537.428 cv
1223.06 522.744 1207.92 550.56 1204.81 554.005 cv
1200.75 558.513 1196.09 559.682 1192.64 564.86 cv
1189.19 570.02 1188.37 574.795 1184.63 579.788 cv
1173.7 594.359 1162.89 593.326 1150.17 615.075 cv
1148.85 617.338 1147.3 619.938 1146.1 621.701 cv
1141.65 628.178 1145.18 625.73 1138.59 628.197 cv
1138.3 615.179 1147.34 605.137 1153.96 596.002 cv
1161.44 585.661 1154.87 590.062 1158.87 577.569 cv
1162.05 567.618 1162.05 561.302 1169.14 553.308 cv
1177.6 543.783 1176.81 542.84 1188.9 533.438 cv
1198.65 525.863 1210.77 514.911 1223.9 511.068 cv
1221.41 518.385 1218.8 516.757 1218.65 520.723 cv
1230.71 520.064 li
1232.93 512.263 1234.77 504.598 1245.21 501.252 cv
1261.35 496.086 1256.83 493.988 1267.95 485.883 cv
1291.57 468.661 1257.22 485.367 1272.74 469.093 cv
1276.1 465.581 1289.85 457.605 1294.4 454.17 cv
1293.43 459.181 1295.31 455.352 1290.17 459.756 cv
1285.99 463.34 1277.06 468.073 1279.13 473.792 cv
1280.55 477.718 1279.27 474.963 1281.58 476.371 cv
1286.8 477.808 li
1282.97 495.867 1277.31 495.699 1263.85 504.766 cv
1253.46 511.762 1241.68 514.278 1240.28 518.695 cv
1238.91 523.034 1240.08 517.384 1244.82 523.58 cv
1242.01 532.63 1241.73 533.393 1246.16 543.779 cv
1252.79 540.509 1252 538.907 1254.36 532.288 cv
1259.83 539.488 li
1263.77 533.935 1269.48 528.814 1271.19 523.018 cv
1274.18 512.886 1270.32 513.167 1279.95 506.742 cv
1279.82 516.631 1274.93 507.549 1277.32 521.72 cv
1291.9 514.707 1295.73 509.512 1295.4 499.561 cv
1294.6 475.913 1303.75 493.529 1307.32 472.116 cv
1310.42 453.573 1305.76 464.825 1317.46 453.605 cv
1306.19 451.354 li
1312.09 439.24 1304.37 451.839 1300.21 438.568 cv
1309.91 435.301 1306.43 432.34 1317.51 433.509 cv
1319.13 446.973 1311.17 452.594 1332.02 443.896 cv
1333.21 438.943 1331.58 448.636 1331.66 441.516 cv
1331.97 438.071 li
1331.99 437.819 1332.04 437.151 1332.23 436.737 cv
1341.84 437.558 1339.12 442.643 1347.65 435.895 cv
1360.67 425.582 1369.01 424.358 1383.51 416.599 cv
1393.78 411.107 1396.23 412.605 1406.68 409.367 cv
1386.09 399.648 1356.54 426.99 1350.94 411.407 cv
1263.45 443.146 1170.22 522.473 1118.97 592.683 cv
1112.81 601.14 1104.02 611.595 1098.9 620.077 cv
1073.23 662.594 1072.81 660.369 1049.21 711.817 cv
1034.81 743.23 1011.25 812.463 1009.5 850.486 cv
1009.5 850.486 li
cp
ef
1356.11 438.155 mo
1359.37 443.176 1362.05 441.871 1365.04 446.898 cv
1358.8 454.39 1355.21 461.59 1346.19 470.075 cv
1349.47 475.861 1352.73 472.768 1347.95 477.03 cv
1343.46 481.034 1341.67 478.199 1336.45 483.626 cv
1338.14 489.852 1341.4 484.269 1340.98 490.239 cv
1326.89 499.054 1333.84 488.773 1320.45 507.729 cv
1319.99 508.369 1318.44 510.594 1318.26 510.978 cv
1316.4 517.416 li
1313.81 527.022 1306.55 536.977 1311.18 552.694 cv
1325.22 558.945 1314.34 551.661 1324.11 563.614 cv
1333.57 562.746 1330.04 564.563 1335.8 555.542 cv
1337.68 552.598 1336.95 553.908 1338.84 551.325 cv
1363.1 518.227 1351.86 546.611 1363 521.769 cv
1368.65 509.17 1374.09 521 1400.13 500.455 cv
1410.85 491.989 1405.69 494.437 1420.15 489.739 cv
1433.58 485.38 1448.06 476.539 1456.53 468.151 cv
1452.5 458.019 1449.31 460.046 1446.82 451.639 cv
1462.37 449.911 li
1463.01 442.817 1463.16 443.744 1468.89 438.962 cv
1462.11 430.06 1463.87 433.664 1466.61 429.821 cv
1468.67 427.645 li
1466.26 425.537 1468.11 426.741 1465.25 425.11 cv
1465.15 425.059 1462.22 423.741 1461.84 423.57 cv
1468.5 414.713 1463.65 416.819 1468.71 411.391 cv
1472.98 407.72 li
1467.57 407.442 1464.1 408.944 1458.78 408.592 cv
1452.69 408.185 1451.68 406.241 1444.54 406.332 cv
1435.25 406.444 1393.86 418.73 1383.1 423.883 cv
1356.11 438.155 li
1356.11 438.155 li
cp
.227451 .709804 .290196 rgb
ef
2079.38 1222.37 mo
2089.4 1209.44 2101.02 1181.78 2108.56 1165.32 cv
2133.41 1111.12 2151.04 1029.8 2153.64 967.925 cv
2157.73 870.711 2131.93 738.4 2079.36 657.689 cv
2076.7 667.311 li
2070.7 664.664 2074.31 666.456 2069.5 661.099 cv
2068.06 667.037 li
2068.05 667.15 2068.15 669.998 2068.05 671.063 cv
2051.06 671.802 2051.74 659.62 2042.44 658.639 cv
2037.36 674.05 2067.99 687.533 2070.36 689.345 cv
2075.72 693.426 2073.2 696.422 2080.58 700.342 cv
2082.82 693.181 2078.71 685.822 2076.42 677.76 cv
2076.9 678.047 2077.44 678.496 2077.77 678.751 cv
2095 692.018 2095.12 692.157 2102.24 712.337 cv
2112.23 740.661 2122.15 778.128 2119.65 808.989 cv
2119.1 815.782 2117.76 823.712 2116.75 830.054 cv
2115.51 837.868 2116.51 842.607 2115.8 850.718 cv
2110.4 850.396 2112.41 851.248 2108.22 843.847 cv
2105.99 839.895 2104.63 837.105 2102.84 833.089 cv
2083.22 789.083 2070.02 796.749 2061.4 782.987 cv
2049.92 764.644 2054.18 767.563 2039.9 758.813 cv
2016.19 737.509 li
2013.85 735.704 2010.28 732.624 2007.61 732.701 cv
2003.06 732.834 2004.28 737.913 2003.23 736.369 cv
2003.03 736.079 2002.77 737.115 2002.41 737.322 cv
1996.2 733.351 1999.22 736.993 1993.26 730.047 cv
1989.35 725.491 1989.89 724.197 1983.98 722.792 cv
1986.75 728.375 2006.77 745.959 2012.47 750.983 cv
2024.74 761.803 2031.34 763.521 2038.33 782.222 cv
2050.4 787.43 2044.87 777.908 2059.99 802.776 cv
2075.82 828.827 2070.75 811.598 2079.89 825.404 cv
2082.79 829.795 2085.67 836.653 2088.75 840.567 cv
2095.11 848.626 2091.81 841.781 2101.2 847.567 cv
2116.1 856.737 2110.11 862.355 2120.34 870.104 cv
2128.74 865.416 2124.85 843.228 2132.32 832.042 cv
2159.08 961.519 2118.86 1016.34 2122.23 1091 cv
2125.3 1158.96 2080.84 1189.16 2079.38 1222.37 cv
2079.38 1222.37 li
cp
.72549 .890196 .976471 rgb
ef
1554.19 553.259 mo
1558.36 559.985 1564.57 560.669 1568.74 569.245 cv
1567.81 561.267 1576.32 563.627 1575.06 574.237 cv
1585.66 571.015 li
1584.68 580.049 1589.31 571.835 1594.84 583.458 cv
1591.82 586.671 1589.05 586.823 1582.74 588.063 cv
1585.94 593.9 1585.97 592.809 1590.05 595.932 cv
1584.47 604.097 li
1590.26 605.585 1602.76 604.239 1602.89 604.271 cv
1599.93 609.722 1588.67 612.56 1589.92 623.593 cv
1602.5 609.195 1620.75 610.142 1634.69 600.126 cv
1633.8 596.671 1631.1 597.378 1629.08 594.999 cv
1633.42 589.932 1632.53 592.031 1631.74 583.917 cv
1616.87 581.085 1616.4 580.63 1600.04 568.687 cv
1591.3 562.31 1598.81 565.474 1583.92 559.536 cv
1583.03 550.77 1585.42 555.013 1584.95 546.056 cv
1579.78 544.971 1579.86 545.701 1573.75 547.276 cv
1571.5 544.564 1573.61 542.911 1570.11 539.834 cv
1557.83 542.901 1566.78 541.438 1558.55 549.769 cv
1557.44 550.896 1555.98 551.661 1554.19 553.259 cv
1554.19 553.259 li
cp
.227451 .709804 .290196 rgb
ef
1552.46 577.54 mo
1552.25 578.034 1552.06 578.337 1552.09 579.1 cv
1552.13 579.978 1551.41 581.531 1551.2 581.963 cv
1548.18 588.069 1553.17 580.521 1549.05 585.202 cv
1546.83 587.714 1541.4 588.708 1544.05 594.963 cv
1552.1 602.928 li
1551.88 603.284 1551.33 603.354 1551.31 603.897 cv
1548.85 606.868 li
1544.4 612.967 1545.27 617.426 1554.77 613.926 cv
1558.27 612.628 1566.47 604.962 1574.41 601.088 cv
1573.05 591.915 1573.5 591.037 1567.88 585.813 cv
1573.22 579.171 1573.14 585.086 1571.19 575.758 cv
1562.85 572.016 1564.06 575.771 1552.46 577.54 cv
1552.46 577.54 li
cp
ef
1444.63 502.115 mo
1447.74 505.921 1448.05 504.491 1452.6 504.792 cv
1447.27 510.933 li
1455.46 513.054 1451.34 520.509 1467.09 518.22 cv
1471.55 517.571 1487.07 509.593 1490.04 506.942 cv
1498.13 499.732 1492.18 490.213 1481.84 492.496 cv
1481.7 492.525 1470.24 496.816 1469.6 497.117 cv
1469.13 497.346 1468.7 497.572 1468.25 497.814 cv
1467.81 498.046 1467.41 498.324 1466.99 498.566 cv
1457.63 503.726 li
1452.68 500.097 1456.37 500.984 1450.68 498.324 cv
1444.63 502.115 li
1444.63 502.115 li
cp
ef
2550.64 1339.25 mo
2756.94 1339.25 li
2756.94 1684.01 li
2550.64 1684.01 li
2550.64 1339.25 li
2550.64 1339.25 li
cp
.2 .4 .6 rgb
ef
2563.54 1353.24 mo
2744.04 1353.24 li
2744.04 1654.86 li
2563.54 1654.86 li
2563.54 1353.24 li
2563.54 1353.24 li
cp
.454902 .713726 .8 rgb
ef
2560.23 1684.01 mo
2578 1684.01 li
2578 1719.56 li
2560.23 1719.56 li
2560.23 1684.01 li
2560.23 1684.01 li
cp
.2 .4 .6 rgb
ef
2728.43 1684.01 mo
2746.21 1684.01 li
2746.21 1719.56 li
2728.43 1719.56 li
2728.43 1684.01 li
2728.43 1684.01 li
cp
ef
2719.35 1494.73 mo
2725.51 1494.73 2730.51 1489.73 2730.51 1483.57 cv
2730.51 1477.41 2725.51 1472.41 2719.35 1472.41 cv
2713.18 1472.41 2708.19 1477.41 2708.19 1483.57 cv
2708.19 1489.73 2713.18 1494.73 2719.35 1494.73 cv
2719.35 1494.73 li
cp
ef
564.191 1368.3 mo
611.299 1368.3 li
611.299 1717.12 li
564.191 1717.12 li
564.191 1368.3 li
564.191 1368.3 li
cp
ef
1096.91 1368.3 mo
1144.02 1368.3 li
1144.02 1717.12 li
1096.91 1717.12 li
1096.91 1368.3 li
1096.91 1368.3 li
cp
ef
479.046 1616.27 mo
1200.66 1616.27 li
1200.66 1583.21 li
479.046 1583.21 li
479.046 1616.27 li
479.046 1616.27 li
cp
ef
511.29 1368.3 mo
579.069 1368.3 li
579.069 1717.12 li
511.29 1717.12 li
511.29 1368.3 li
511.29 1368.3 li
cp
.454902 .713726 .8 rgb
ef
1108.9 1368.3 mo
1176.68 1368.3 li
1176.68 1717.12 li
1108.9 1717.12 li
1108.9 1368.3 li
1108.9 1368.3 li
cp
ef
479.046 1401.36 mo
1200.66 1401.36 li
1200.66 1368.3 li
479.046 1368.3 li
479.046 1401.36 li
479.046 1401.36 li
cp
.2 .4 .6 rgb
ef
165.624 1834.44 mo
2834.68 1834.44 li
2834.68 1715.37 li
165.624 1715.37 li
165.624 1834.44 li
165.624 1834.44 li
cp
.545098 .729412 .768627 rgb
ef
793.34 1367.99 mo
811.932 1367.99 830.542 1367.99 849.134 1367.99 cv
867.726 1367.99 886.331 1367.99 904.935 1367.99 cv
912.575 1367.99 917.056 1363.53 914.88 1358.08 cv
905.212 1333.91 895.545 1309.73 885.898 1285.55 cv
868.636 1242.36 li
868.636 1185.32 li
873.292 1185.32 li
873.292 1170.99 li
822.232 1170.99 li
822.232 1185.32 li
828.619 1185.32 li
828.619 1244.97 li
812.397 1285.55 li
802.75 1309.73 793.088 1333.91 783.415 1358.08 cv
781.232 1363.53 785.708 1367.99 793.34 1367.99 cv
793.34 1367.99 li
cp
.905882 .984314 1 rgb
ef
869.541 1181.56 mo
869.541 1174.75 li
825.984 1174.75 li
825.984 1181.56 li
832.371 1181.56 li
832.371 1245.69 li
815.877 1286.95 li
806.21 1311.12 796.576 1335.3 786.902 1359.48 cv
785.372 1363.29 790.706 1364.24 793.34 1364.24 cv
811.938 1364.24 830.537 1364.24 849.134 1364.24 cv
867.733 1364.24 886.337 1364.24 904.935 1364.24 cv
907.57 1364.24 912.917 1363.29 911.393 1359.48 cv
901.732 1335.3 892.078 1311.12 882.417 1286.95 cv
864.885 1243.08 li
864.885 1181.56 li
869.541 1181.56 li
869.541 1181.56 li
cp
.745098 .937255 .992157 rgb
ef
907.447 1360.03 mo
897.903 1336.15 888.365 1312.27 878.821 1288.39 cv
875.385 1279.8 li
822.91 1279.8 li
819.474 1288.39 li
809.937 1312.25 800.424 1336.11 790.848 1360.05 cv
791.667 1360.29 792.798 1360.37 793.34 1360.37 cv
811.938 1360.37 830.537 1360.37 849.134 1360.37 cv
867.733 1360.37 886.337 1360.37 904.935 1360.37 cv
905.484 1360.37 906.621 1360.28 907.447 1360.03 cv
907.447 1360.03 li
cp
.380392 .682353 .282353 rgb
ef
854.92 1318.32 mo
858.969 1318.32 862.25 1315.04 862.25 1310.99 cv
862.25 1306.95 858.969 1303.67 854.92 1303.67 cv
850.878 1303.67 847.591 1306.95 847.591 1310.99 cv
847.591 1315.04 850.878 1318.32 854.92 1318.32 cv
854.92 1318.32 li
cp
.498039 .835294 .54902 rgb
ef
848.798 1348.77 mo
854.798 1348.77 859.667 1343.9 859.667 1337.91 cv
859.667 1331.9 854.798 1327.03 848.798 1327.03 cv
842.799 1327.03 837.93 1331.9 837.93 1337.91 cv
837.93 1343.9 842.799 1348.77 848.798 1348.77 cv
848.798 1348.77 li
cp
ef
831.389 1324.79 mo
833.856 1324.79 835.864 1322.77 835.864 1320.31 cv
835.864 1317.84 833.856 1315.84 831.389 1315.84 cv
828.916 1315.84 826.914 1317.84 826.914 1320.31 cv
826.914 1322.77 828.916 1324.79 831.389 1324.79 cv
831.389 1324.79 li
cp
ef
424.667 1339.68 mo
468.378 1339.68 li
468.378 1281.39 li
424.667 1281.39 li
424.667 1339.68 li
424.667 1339.68 li
cp
.545098 .796078 .878431 rgb
ef
419.888 1272.74 mo
472.699 1272.74 li
472.699 1282.53 li
419.888 1282.53 li
419.888 1272.74 li
419.888 1272.74 li
cp
.67451 .207843 .129412 rgb
ef
463.897 1288.15 mo
464.575 1289.02 464.95 1289.96 464.95 1290.94 cv
464.95 1326.78 li
464.95 1331.32 457.019 1335.04 447.327 1335.04 cv
446.145 1335.04 li
436.445 1335.04 428.522 1331.32 428.522 1326.78 cv
428.522 1290.94 li
428.522 1289.96 428.89 1289.02 429.568 1288.15 cv
463.897 1288.15 li
463.897 1288.15 li
cp
ef
428.522 1324.16 mo
428.522 1290.94 li
428.522 1289.96 428.896 1289.02 429.568 1288.15 cv
461.618 1288.15 li
461.695 1289.06 461.734 1289.99 461.734 1290.94 cv
461.734 1309.29 446.868 1324.16 428.522 1324.16 cv
428.522 1324.16 li
cp
.8 .337255 .231373 rgb
ef
454.3 1329.31 mo
456.593 1329.31 458.453 1327.45 458.453 1325.15 cv
458.453 1322.86 456.593 1321 454.3 1321 cv
452.008 1321 450.148 1322.86 450.148 1325.15 cv
450.148 1327.45 452.008 1329.31 454.3 1329.31 cv
454.3 1329.31 li
cp
.588235 .243137 .329412 rgb
ef
452.137 1318.15 mo
454.184 1318.15 455.837 1316.5 455.837 1314.46 cv
455.837 1312.42 454.184 1310.76 452.137 1310.76 cv
450.097 1310.76 448.444 1312.42 448.444 1314.46 cv
448.444 1316.5 450.097 1318.15 452.137 1318.15 cv
452.137 1318.15 li
cp
ef
441.837 1329.19 mo
444.73 1329.19 447.075 1326.85 447.075 1323.96 cv
447.075 1321.07 444.73 1318.72 441.837 1318.72 cv
438.945 1318.72 436.6 1321.07 436.6 1323.96 cv
436.6 1326.85 438.945 1329.19 441.837 1329.19 cv
441.837 1329.19 li
cp
ef
313.614 1328.97 mo
313.614 1328.97 li
318.544 1328.97 322.578 1324.93 322.578 1320.01 cv
322.578 1194.55 li
304.654 1194.55 li
304.654 1320.01 li
304.654 1324.93 308.687 1328.97 313.614 1328.97 cv
313.614 1328.97 li
cp
.545098 .796078 .878431 rgb
ef
345.973 1328.97 mo
345.973 1328.97 li
350.901 1328.97 354.933 1324.93 354.933 1320.01 cv
354.933 1194.55 li
337.013 1194.55 li
337.013 1320.01 li
337.013 1324.93 341.046 1328.97 345.973 1328.97 cv
345.973 1328.97 li
cp
ef
377.835 1328.97 mo
377.835 1328.97 li
382.763 1328.97 386.795 1324.93 386.795 1320.01 cv
386.795 1194.55 li
368.873 1194.55 li
368.873 1320.01 li
368.873 1324.93 372.905 1328.97 377.835 1328.97 cv
377.835 1328.97 li
cp
ef
307.515 1209.85 mo
307.515 1320.01 li
307.515 1323.35 310.263 1326.1 313.614 1326.1 cv
316.966 1326.1 319.716 1323.35 319.716 1320.01 cv
319.716 1209.85 li
307.515 1209.85 li
307.515 1209.85 li
cp
.67451 .207843 .129412 rgb
ef
339.871 1227.54 mo
339.871 1320.01 li
339.871 1323.35 342.622 1326.1 345.973 1326.1 cv
349.325 1326.1 352.076 1323.35 352.076 1320.01 cv
352.076 1227.54 li
339.871 1227.54 li
339.871 1227.54 li
cp
ef
371.733 1257.15 mo
371.733 1320.01 li
371.733 1323.35 374.484 1326.1 377.835 1326.1 cv
381.184 1326.1 383.935 1323.35 383.935 1320.01 cv
383.935 1257.15 li
371.733 1257.15 li
371.733 1257.15 li
cp
ef
300.547 1194.68 mo
325.813 1194.68 li
325.813 1190.82 li
300.547 1190.82 li
300.547 1194.68 li
300.547 1194.68 li
cp
.2 .4 .6 rgb
ef
332.907 1194.68 mo
358.172 1194.68 li
358.172 1190.82 li
332.907 1190.82 li
332.907 1194.68 li
332.907 1194.68 li
cp
ef
364.765 1194.68 mo
390.031 1194.68 li
390.031 1190.82 li
364.765 1190.82 li
364.765 1194.68 li
364.765 1194.68 li
cp
ef
299.427 1190.82 mo
327.056 1190.82 li
327.056 1176.88 li
299.427 1176.88 li
299.427 1190.82 li
299.427 1190.82 li
cp
.27451 .482353 .690196 rgb
ef
331.786 1190.82 mo
359.416 1190.82 li
359.416 1176.88 li
331.786 1176.88 li
331.786 1190.82 li
331.786 1190.82 li
cp
ef
363.648 1190.82 mo
391.274 1190.82 li
391.274 1176.88 li
363.648 1176.88 li
363.648 1190.82 li
363.648 1190.82 li
cp
ef
277.393 1321.36 mo
416.04 1321.36 li
416.04 1313.4 li
277.393 1313.4 li
277.393 1321.36 li
277.393 1321.36 li
cp
.380392 .384314 .54902 rgb
ef
277.393 1282.04 mo
416.04 1282.04 li
416.04 1274.08 li
277.393 1274.08 li
277.393 1282.04 li
277.393 1282.04 li
cp
ef
277.393 1256.4 mo
416.04 1256.4 li
416.04 1248.45 li
277.393 1248.45 li
277.393 1256.4 li
277.393 1256.4 li
cp
ef
287.103 1339.05 mo
297.554 1339.05 li
297.554 1235 li
287.103 1235 li
287.103 1339.05 li
287.103 1339.05 li
cp
ef
397.616 1339.05 mo
408.071 1339.05 li
408.071 1235 li
397.616 1235 li
397.616 1339.05 li
397.616 1339.05 li
cp
ef
309.017 1194.39 mo
318.348 1194.39 li
318.348 1199.61 li
309.017 1199.61 li
309.017 1194.39 li
309.017 1194.39 li
cp
.454902 .713726 .8 rgb
ef
341.079 1194.39 mo
350.41 1194.39 li
350.41 1199.61 li
341.079 1199.61 li
341.079 1194.39 li
341.079 1194.39 li
cp
ef
373.141 1194.39 mo
382.475 1194.39 li
382.475 1199.61 li
373.141 1199.61 li
373.141 1194.39 li
373.141 1194.39 li
cp
ef
1036.22 1267.22 mo
1054.84 1267.22 li
1054.84 1264.37 li
1036.22 1264.37 li
1036.22 1267.22 li
1036.22 1267.22 li
cp
.2 .4 .6 rgb
ef
1035.39 1264.37 mo
1055.76 1264.37 li
1055.76 1254.1 li
1035.39 1254.1 li
1035.39 1264.37 li
1035.39 1264.37 li
cp
.27451 .482353 .690196 rgb
ef
1039.36 1267.22 mo
1052.02 1267.22 li
1052.02 1338.61 li
1052.02 1348.95 1050.26 1356.4 1045.6 1359.34 cv
1038.99 1355.09 1039.36 1348.34 1039.36 1336.95 cv
1039.36 1267.22 li
1039.36 1267.22 li
cp
.72549 .890196 .976471 rgb
ef
1041.65 1308.24 mo
1041.65 1336.95 li
1041.65 1343.17 1040.58 1351.9 1045.56 1356.43 cv
1049.42 1352.49 1049.73 1343.29 1049.73 1338.61 cv
1049.73 1308.24 li
1041.65 1308.24 li
1041.65 1308.24 li
cp
.560784 .760784 .4 rgb
ef
1042.4 1267 mo
1049.28 1267 li
1049.28 1270.87 li
1042.4 1270.87 li
1042.4 1267 li
1042.4 1267 li
cp
.454902 .713726 .8 rgb
ef
1062.17 1267.22 mo
1080.79 1267.22 li
1080.79 1264.37 li
1062.17 1264.37 li
1062.17 1267.22 li
1062.17 1267.22 li
cp
.2 .4 .6 rgb
ef
1061.34 1264.37 mo
1081.71 1264.37 li
1081.71 1254.1 li
1061.34 1254.1 li
1061.34 1264.37 li
1061.34 1264.37 li
cp
.27451 .482353 .690196 rgb
ef
1065.3 1267.22 mo
1077.97 1267.22 li
1077.97 1338.61 li
1077.97 1348.95 1076.2 1356.4 1071.54 1359.34 cv
1064.94 1355.09 1065.3 1348.34 1065.3 1336.95 cv
1065.3 1267.22 li
1065.3 1267.22 li
cp
.72549 .890196 .976471 rgb
ef
1067.6 1308.24 mo
1067.6 1336.95 li
1067.6 1343.17 1066.52 1351.9 1071.51 1356.43 cv
1075.37 1352.49 1075.68 1343.29 1075.68 1338.61 cv
1075.68 1308.24 li
1067.6 1308.24 li
1067.6 1308.24 li
cp
.560784 .760784 .4 rgb
ef
1068.34 1267 mo
1075.22 1267 li
1075.22 1270.87 li
1068.34 1270.87 li
1068.34 1267 li
1068.34 1267 li
cp
.454902 .713726 .8 rgb
ef
1088.11 1267.22 mo
1106.74 1267.22 li
1106.74 1264.37 li
1088.11 1264.37 li
1088.11 1267.22 li
1088.11 1267.22 li
cp
.2 .4 .6 rgb
ef
1087.29 1264.37 mo
1107.65 1264.37 li
1107.65 1254.1 li
1087.29 1254.1 li
1087.29 1264.37 li
1087.29 1264.37 li
cp
.27451 .482353 .690196 rgb
ef
1091.25 1267.22 mo
1103.91 1267.22 li
1103.91 1338.61 li
1103.91 1348.95 1102.15 1356.4 1097.49 1359.34 cv
1090.88 1355.09 1091.25 1348.34 1091.25 1336.95 cv
1091.25 1267.22 li
1091.25 1267.22 li
cp
.72549 .890196 .976471 rgb
ef
1093.54 1308.24 mo
1093.54 1336.95 li
1093.54 1343.17 1092.47 1351.9 1097.45 1356.43 cv
1101.31 1352.49 1101.62 1343.29 1101.62 1338.61 cv
1101.62 1308.24 li
1093.54 1308.24 li
1093.54 1308.24 li
cp
.560784 .760784 .4 rgb
ef
1094.29 1267 mo
1101.17 1267 li
1101.17 1270.87 li
1094.29 1270.87 li
1094.29 1267 li
1094.29 1267 li
cp
.454902 .713726 .8 rgb
ef
1114.05 1267.22 mo
1132.68 1267.22 li
1132.68 1264.37 li
1114.05 1264.37 li
1114.05 1267.22 li
1114.05 1267.22 li
cp
.2 .4 .6 rgb
ef
1113.23 1264.37 mo
1133.6 1264.37 li
1133.6 1254.1 li
1113.23 1254.1 li
1113.23 1264.37 li
1113.23 1264.37 li
cp
.27451 .482353 .690196 rgb
ef
1117.19 1267.22 mo
1129.85 1267.22 li
1129.85 1338.61 li
1129.85 1348.95 1128.09 1356.4 1123.43 1359.34 cv
1116.82 1355.09 1117.19 1348.34 1117.19 1336.95 cv
1117.19 1267.22 li
1117.19 1267.22 li
cp
.72549 .890196 .976471 rgb
ef
1119.48 1308.24 mo
1119.48 1336.95 li
1119.48 1343.17 1118.42 1351.9 1123.4 1356.43 cv
1127.26 1352.49 1127.56 1343.29 1127.56 1338.61 cv
1127.56 1308.24 li
1119.48 1308.24 li
1119.48 1308.24 li
cp
.560784 .760784 .4 rgb
ef
1120.23 1267 mo
1127.11 1267 li
1127.11 1270.87 li
1120.23 1270.87 li
1120.23 1267 li
1120.23 1267 li
cp
.454902 .713726 .8 rgb
ef
1140 1267.22 mo
1158.62 1267.22 li
1158.62 1264.37 li
1140 1264.37 li
1140 1267.22 li
1140 1267.22 li
cp
.2 .4 .6 rgb
ef
1139.17 1264.37 mo
1159.54 1264.37 li
1159.54 1254.1 li
1139.17 1254.1 li
1139.17 1264.37 li
1139.17 1264.37 li
cp
.27451 .482353 .690196 rgb
ef
1143.14 1267.22 mo
1155.8 1267.22 li
1155.8 1338.61 li
1155.8 1348.95 1154.03 1356.4 1149.38 1359.34 cv
1142.77 1355.09 1143.14 1348.34 1143.14 1336.95 cv
1143.14 1267.22 li
1143.14 1267.22 li
cp
.72549 .890196 .976471 rgb
ef
1145.43 1308.24 mo
1145.43 1336.95 li
1145.43 1343.17 1144.36 1351.9 1149.34 1356.43 cv
1153.2 1352.49 1153.51 1343.29 1153.51 1338.61 cv
1153.51 1308.24 li
1145.43 1308.24 li
1145.43 1308.24 li
cp
.560784 .760784 .4 rgb
ef
1146.18 1267 mo
1153.06 1267 li
1153.06 1270.87 li
1146.18 1270.87 li
1146.18 1267 li
1146.18 1267 li
cp
.454902 .713726 .8 rgb
ef
1014.94 1366.03 mo
1180.53 1366.03 li
1180.53 1360.16 li
1014.94 1360.16 li
1014.94 1366.03 li
1014.94 1366.03 li
cp
.380392 .384314 .54902 rgb
ef
1014.94 1332.63 mo
1180.53 1332.63 li
1180.53 1326.76 li
1014.94 1326.76 li
1014.94 1332.63 li
1014.94 1332.63 li
cp
ef
1014.94 1307.49 mo
1180.53 1307.49 li
1180.53 1301.62 li
1014.94 1301.62 li
1014.94 1307.49 li
1014.94 1307.49 li
cp
ef
1024.85 1368.42 mo
1037.34 1368.42 li
1037.34 1291.71 li
1024.85 1291.71 li
1024.85 1368.42 li
1024.85 1368.42 li
cp
ef
1158.54 1368.42 mo
1171.02 1368.42 li
1171.02 1291.71 li
1158.54 1291.71 li
1158.54 1368.42 li
1158.54 1368.42 li
cp
ef
2613.22 1227.72 mo
2726.9 1227.72 li
2732.54 1227.72 2737.17 1222.17 2737.17 1215.42 cv
2737.17 1089.52 li
2747.72 1061.52 li
2613.22 1062.43 li
2607.57 1062.43 2602.96 1067.95 2602.96 1074.71 cv
2602.96 1215.42 li
2602.96 1222.17 2607.57 1227.72 2613.22 1227.72 cv
2613.22 1227.72 li
cp
.545098 .796078 .878431 rgb
ef
2613.93 1217.15 mo
2613.64 1216.67 2613.51 1215.86 2613.51 1215.42 cv
2613.51 1115.55 li
2726.61 1115.55 li
2726.61 1215.42 li
2726.61 1215.86 2726.48 1216.67 2726.19 1217.15 cv
2613.93 1217.15 li
2613.93 1217.15 li
cp
.27451 .482353 .690196 rgb
ef
2632.68 1070.49 mo
2628.37 1070.49 li
2628.37 1079.66 li
2628.37 1082.17 li
2628.37 1098.52 li
2628.37 1101.04 li
2628.37 1117.39 li
2628.37 1119.91 li
2628.37 1136.28 li
2628.37 1138.79 li
2628.37 1155.15 li
2628.37 1157.66 li
2628.37 1174.01 li
2628.37 1176.53 li
2628.37 1192.9 li
2628.37 1195.4 li
2628.37 1211.77 li
2628.37 1214.28 li
2628.37 1217.15 li
2632.68 1217.15 li
2632.68 1214.28 li
2642.26 1214.28 li
2642.26 1211.77 li
2632.68 1211.77 li
2632.68 1195.4 li
2642.26 1195.4 li
2642.26 1192.9 li
2632.68 1192.9 li
2632.68 1176.53 li
2642.26 1176.53 li
2642.26 1174.01 li
2632.68 1174.01 li
2632.68 1157.66 li
2642.26 1157.66 li
2642.26 1155.15 li
2632.68 1155.15 li
2632.68 1138.79 li
2642.26 1138.79 li
2642.26 1136.28 li
2632.68 1136.28 li
2632.68 1119.91 li
2642.26 1119.91 li
2642.26 1117.39 li
2632.68 1117.39 li
2632.68 1101.04 li
2642.26 1101.04 li
2642.26 1098.52 li
2632.68 1098.52 li
2632.68 1082.17 li
2642.26 1082.17 li
2642.26 1079.66 li
2632.68 1079.66 li
2632.68 1070.49 li
2632.68 1070.49 li
cp
.772549 .933333 .941176 rgb
ef
2737.66 1247.35 mo
2597.22 1247.35 li
2597.22 1227.69 li
2737.66 1227.69 li
2737.66 1247.35 li
2737.66 1247.35 li
cp
.67451 .207843 .129412 rgb
ef
2750.55 1334.1 mo
2584.8 1334.1 li
2581.61 1334.1 2579 1331.49 2579 1328.3 cv
2579 1253.61 li
2579 1250.42 2581.61 1247.81 2584.8 1247.81 cv
2750.55 1247.81 li
2753.74 1247.81 2756.35 1250.42 2756.35 1253.61 cv
2756.35 1328.3 li
2756.35 1331.49 2753.74 1334.1 2750.55 1334.1 cv
2750.55 1334.1 li
cp
.545098 .796078 .878431 rgb
ef
2740.54 1339.86 mo
2721.84 1339.86 li
2721.84 1334.1 li
2740.54 1334.1 li
2740.54 1339.86 li
2740.54 1339.86 li
cp
.2 .4 .6 rgb
ef
2614.22 1339.86 mo
2595.54 1339.86 li
2595.54 1334.1 li
2614.22 1334.1 li
2614.22 1339.86 li
2614.22 1339.86 li
cp
ef
2737.18 1313.49 mo
2702.67 1313.49 li
2702.67 1298.63 li
2737.18 1298.63 li
2737.18 1313.49 li
2737.18 1313.49 li
cp
.917647 .827451 .419608 rgb
ef
2691.16 1313.49 mo
2656.65 1313.49 li
2656.65 1298.63 li
2691.16 1298.63 li
2691.16 1313.49 li
2691.16 1313.49 li
cp
ef
2615.9 1310.61 mo
2604.26 1310.61 2594.81 1301.17 2594.81 1289.52 cv
2594.81 1277.88 2604.26 1268.42 2615.9 1268.42 cv
2627.55 1268.42 2636.99 1277.88 2636.99 1289.52 cv
2636.99 1301.17 2627.55 1310.61 2615.9 1310.61 cv
2615.9 1310.61 li
cp
.2 .4 .6 rgb
ef
2671.99 1278.98 mo
2666.43 1278.98 2661.92 1274.47 2661.92 1268.9 cv
2661.92 1263.35 2666.43 1258.84 2671.99 1258.84 cv
2677.55 1258.84 2682.06 1263.35 2682.06 1268.9 cv
2682.06 1274.47 2677.55 1278.98 2671.99 1278.98 cv
2671.99 1278.98 li
cp
.27451 .482353 .690196 rgb
ef
2710.57 1278.98 mo
2706.47 1278.98 2703.15 1275.66 2703.15 1271.55 cv
2703.15 1267.44 2706.47 1264.11 2710.57 1264.11 cv
2714.68 1264.11 2718.01 1267.44 2718.01 1271.55 cv
2718.01 1275.66 2714.68 1278.98 2710.57 1278.98 cv
2710.57 1278.98 li
cp
ef
2607.55 1266.78 mo
2599.24 1272.43 li
2625.91 1311.68 li
2634.23 1306.02 li
2607.55 1266.78 li
2607.55 1266.78 li
cp
ef
685.258 1367.89 mo
712.503 1367.89 739.754 1367.89 767.006 1367.89 cv
767.006 1341.2 767.006 1314.53 767.006 1287.85 cv
767.006 1269.03 755.802 1264.87 742.254 1251 cv
712.6 1251 li
698.226 1262.78 685.258 1267.44 685.258 1286.42 cv
685.258 1313.56 685.258 1340.73 685.258 1367.89 cv
685.258 1367.89 li
cp
.592157 .298039 .176471 rgb
ef
685.258 1367.89 mo
712.503 1367.89 739.761 1367.89 767.006 1367.89 cv
767.006 1341.2 767.006 1314.53 767.006 1287.85 cv
767.006 1284.1 766.56 1280.94 765.747 1278.16 cv
727.285 1280.85 695.507 1305.5 685.258 1338.49 cv
685.258 1367.89 li
685.258 1367.89 li
cp
.470588 .235294 .137255 rgb
ef
708.919 1225.11 mo
745.767 1225.11 li
745.767 1251 li
708.919 1251 li
708.919 1225.11 li
708.919 1225.11 li
cp
.772549 .933333 .941176 rgb
ef
708.919 1245.25 mo
745.767 1245.25 li
745.767 1251 li
708.919 1251 li
708.919 1245.25 li
708.919 1245.25 li
cp
.454902 .713726 .8 rgb
ef
706.711 1324.27 mo
763.455 1324.27 li
763.455 1292.75 li
706.711 1292.75 li
706.711 1324.27 li
706.711 1324.27 li
cp
.772549 .933333 .941176 rgb
ef
604.099 1182.81 mo
594.529 1184.67 li
579.457 1107.07 li
589.02 1105.21 li
604.099 1182.81 li
604.099 1182.81 li
cp
.298039 .301961 .423529 rgb
ef
726.123 1368.18 mo
521.137 1368.18 li
521.137 1345.4 li
726.123 1345.4 li
726.123 1368.18 li
726.123 1368.18 li
cp
.913725 .905882 .909804 rgb
ef
697.458 1345.4 mo
608.709 1345.4 li
608.709 1339.51 li
697.458 1339.51 li
697.458 1345.4 li
697.458 1345.4 li
cp
.8 .8 .8 rgb
ef
649.302 1174.57 mo
604.203 1183.33 li
587.722 1098.52 li
632.829 1089.75 li
649.302 1174.57 li
649.302 1174.57 li
cp
.913725 .905882 .909804 rgb
ef
596.873 1096.2 mo
587.619 1098.01 li
604.099 1182.81 li
613.353 1181.01 li
596.873 1096.2 li
596.873 1096.2 li
cp
.788235 .776471 .819608 rgb
ef
612.481 1028.07 mo
583.182 1033.77 li
585.953 1048.03 li
615.257 1042.34 li
612.481 1028.07 li
612.481 1028.07 li
cp
.298039 .301961 .423529 rgb
ef
612.036 1042.46 mo
588.516 1047.02 li
596.834 1089.81 li
620.346 1085.25 li
612.036 1042.46 li
612.036 1042.46 li
cp
ef
692.317 1245.67 mo
590.164 1265.52 li
588.071 1254.74 li
690.218 1234.88 li
692.317 1245.67 li
692.317 1245.67 li
cp
.913725 .905882 .909804 rgb
ef
624.557 1328.25 mo
615.303 1330.04 li
579.127 1143.86 li
588.381 1142.06 li
624.557 1328.25 li
624.557 1328.25 li
cp
ef
579.876 1147.71 mo
538.244 1155.8 li
501.028 1201.83 514.364 1303.25 569.589 1337.73 cv
615.077 1328.88 li
600.211 1252.37 li
582.091 1255.88 li
583.454 1262.91 li
584.952 1270.61 579.882 1278.12 572.185 1279.61 cv
567.781 1280.48 li
560.083 1281.96 552.574 1276.9 551.075 1269.2 cv
543.177 1228.56 li
541.686 1220.87 546.755 1213.35 554.446 1211.86 cv
558.857 1211 li
565.993 1209.61 572.973 1213.87 575.136 1220.64 cv
593.353 1217.1 li
579.876 1147.71 li
579.876 1147.71 li
cp
ef
586.011 1170.37 mo
576.001 1172.31 566.315 1165.77 564.372 1155.78 cv
562.427 1145.77 568.962 1136.08 578.965 1134.13 cv
588.975 1132.19 598.662 1138.73 600.605 1148.73 cv
602.549 1158.74 596.014 1168.42 586.011 1170.37 cv
586.011 1170.37 li
cp
.298039 .301961 .423529 rgb
ef
581.18 1215.19 mo
574.51 1216.49 568.045 1212.13 566.754 1205.46 cv
565.457 1198.79 569.815 1192.33 576.486 1191.04 cv
583.157 1189.73 589.621 1194.1 590.913 1200.76 cv
592.21 1207.44 587.851 1213.9 581.18 1215.19 cv
581.18 1215.19 li
cp
ef
584.261 1161.36 mo
579.224 1162.34 574.355 1159.06 573.379 1154.02 cv
572.405 1149 575.685 1144.12 580.722 1143.15 cv
585.752 1142.17 590.622 1145.45 591.597 1150.48 cv
592.579 1155.52 589.292 1160.39 584.261 1161.36 cv
584.261 1161.36 li
cp
.788235 .776471 .819608 rgb
ef
580.012 1209.18 mo
576.661 1209.84 573.412 1207.65 572.76 1204.29 cv
572.108 1200.94 574.296 1197.69 577.655 1197.04 cv
581.006 1196.38 584.254 1198.58 584.907 1201.94 cv
585.559 1205.28 583.37 1208.54 580.012 1209.18 cv
580.012 1209.18 li
cp
ef
651.705 1230.26 mo
625.687 1235.31 li
621.909 1215.85 li
647.927 1210.78 li
651.705 1230.26 li
651.705 1230.26 li
cp
.298039 .301961 .423529 rgb
ef
664.723 1268.23 mo
630.369 1274.91 li
627.146 1258.34 li
661.507 1251.66 li
664.723 1268.23 li
664.723 1268.23 li
cp
ef
687.913 1198.98 mo
670.173 1218.67 li
655.437 1205.41 li
673.176 1185.72 li
687.913 1198.98 li
687.913 1198.98 li
cp
ef
652.164 1217.16 mo
619.978 1223.42 li
621.586 1231.71 li
653.778 1225.46 li
652.164 1217.16 li
652.164 1217.16 li
cp
.380392 .384314 .54902 rgb
ef
666.467 1256.83 mo
623.969 1265.08 li
625.338 1272.13 li
667.835 1263.88 li
666.467 1256.83 li
666.467 1256.83 li
cp
ef
680.403 1188.26 mo
658.453 1212.62 li
664.73 1218.27 li
686.673 1193.9 li
680.403 1188.26 li
680.403 1188.26 li
cp
ef
687.306 1303.85 mo
639.7 1313.11 li
637.808 1303.36 li
685.414 1294.11 li
687.306 1303.85 li
687.306 1303.85 li
cp
.298039 .301961 .423529 rgb
ef
639.151 1310.55 mo
618.344 1314.61 li
617.518 1310.35 li
638.325 1306.31 li
639.151 1310.55 li
639.151 1310.55 li
cp
.380392 .384314 .54902 rgb
ef
657.349 1203.29 mo
671.097 1188.01 li
666.105 1183.46 li
611.641 1194.43 li
621.728 1208.28 li
623.149 1215.6 li
645.512 1211.26 li
642.502 1197.84 li
647.908 1194.78 li
657.349 1203.29 li
657.349 1203.29 li
cp
.298039 .301961 .423529 rgb
ef
668.333 1178.42 mo
608.193 1190.11 li
609.168 1195.12 li
669.308 1183.43 li
668.333 1178.42 li
668.333 1178.42 li
cp
.8 .8 .8 rgb
ef
672.847 1169.74 mo
584.571 1186.89 li
586.069 1194.6 li
674.345 1177.45 li
672.847 1169.74 li
672.847 1169.74 li
cp
.913725 .905882 .909804 rgb
ef
587.722 1098.52 mo
632.829 1089.75 li
620.062 1083.79 li
596.55 1088.35 li
587.722 1098.52 li
587.722 1098.52 li
cp
.380392 .384314 .54902 rgb
ef
605.765 1293.76 mo
605.765 1345.4 li
549.997 1345.4 li
553.4 1338.94 566.542 1312.21 576.15 1295.13 cv
580.193 1287.94 583.382 1278.87 592.804 1278.85 cv
599.391 1278.82 605.946 1284.57 605.765 1293.76 cv
605.765 1293.76 li
cp
.913725 .905882 .909804 rgb
ef
593.818 1302.9 mo
589.324 1303.76 584.971 1300.83 584.093 1296.33 cv
583.221 1291.84 586.16 1287.48 590.654 1286.61 cv
595.155 1285.73 599.507 1288.68 600.379 1293.17 cv
601.251 1297.67 598.313 1302.02 593.818 1302.9 cv
593.818 1302.9 li
cp
.788235 .776471 .819608 rgb
ef
2005.07 941.939 mo
1984.15 972.277 li
1920.83 929.114 li
1891.92 885.008 li
1894.22 877.608 li
1895.52 858.416 li
1909.39 845.811 li
1912.1 852.901 1911.66 851.157 1908.54 858.196 cv
1903.29 865.222 li
1902.44 885.37 li
1909.61 866.901 li
1929.13 851.145 li
1932.06 860.508 li
1941.39 858.816 li
1940.6 867.482 li
1934.54 873.397 li
1926.78 877.143 li
1925.24 892.616 li
1932.89 881.599 li
1945.33 879.971 li
1952.1 882.58 li
1945.6 890.911 1948.16 889.955 1937.7 889.749 cv
1934.38 899.603 li
1935.9 903.852 li
1948.18 912.014 1960.08 919.014 1959.28 929.23 cv
2005.07 941.939 li
2005.07 941.939 li
cp
.984314 .788235 .65098 rgb
ef
2173.49 984.405 mo
2206.26 897.446 li
2169.12 896.064 2164.83 911.511 2147.42 927.875 cv
2091.34 986.419 li
1989.05 936.411 li
1992.82 948.707 1982.1 965.858 1975.69 968.273 cv
2035.44 1009.23 2070.25 1054.03 2093.55 1050.31 cv
2114.32 1046.99 2140.96 1029.19 2173.49 984.405 cv
2173.49 984.405 li
cp
1 1 1 rgb
ef
2337.14 907.778 mo
2219.9 902.754 li
2234.95 885.68 li
2285.77 870.53 li
2331.25 891.543 li
2337.14 907.778 li
2337.14 907.778 li
cp
ef
2264.8 1675.79 mo
2242.5 1653.34 li
2243.12 1675.64 2249.92 1694.73 2233.53 1708.53 cv
2218.4 1721.25 2169.47 1739.73 2169.99 1753.01 cv
2170.23 1759.17 2182.12 1763.83 2202.75 1758.19 cv
2214.66 1754.94 2219.29 1746.49 2240.56 1727.78 cv
2257.43 1723.53 2256.23 1727.05 2264.46 1712.23 cv
2260.03 1696.54 li
2264.8 1675.79 li
2264.8 1675.79 li
cp
.776471 .278431 .196078 rgb
ef
2243.77 1690.67 mo
2242.63 1697.3 2239.74 1703.3 2233.53 1708.53 cv
2218.4 1721.25 2169.47 1739.73 2169.99 1753.01 cv
2170.23 1759.17 2182.12 1763.83 2202.75 1758.19 cv
2214.65 1754.94 2220.53 1748.9 2241.81 1730.2 cv
2258.67 1725.95 2260.87 1721.57 2267.18 1716.41 cv
2265.1 1700.64 li
2254.41 1707.49 2250.77 1710.05 2244.64 1707.87 cv
2253.02 1692.75 li
2243.77 1690.67 li
2243.77 1690.67 li
cp
.4 .2 .2 rgb
ef
2178.33 1759.93 mo
2183.93 1761.26 2192.19 1761.08 2202.75 1758.19 cv
2214.05 1755.11 2220.08 1750.71 2238.85 1734.14 cv
2239.85 1733.26 2240.73 1731.14 2241.81 1730.2 cv
2241.88 1730.99 2241.85 1731.08 2242.04 1732.37 cv
2247.81 1730.35 2263.21 1720.99 2268.56 1716.61 cv
2267.35 1711.85 li
2254.26 1719.36 li
2235.45 1730.42 li
2209.63 1750.37 2210.49 1754.79 2178.33 1759.93 cv
2178.33 1759.93 li
cp
2170.05 1753.56 mo
2170.48 1756.34 2173.34 1758.74 2178.33 1759.93 cv
2173.39 1751.7 li
2170.05 1753.56 li
2170.05 1753.56 li
cp
.2 .2 .2 rgb
ef
2193.57 1732.07 mo
2192.15 1732.69 li
2184.96 1735.89 2169.63 1744.02 2169.99 1753.01 cv
2170.05 1754.49 2170.78 1755.87 2172.15 1757.06 cv
2177.64 1756.06 2184.89 1753.74 2192.84 1750.27 cv
2210.16 1742.73 2224.28 1732.56 2224.38 1727.58 cv
2224.47 1722.64 2210.71 1724.66 2193.57 1732.07 cv
2193.57 1732.07 li
cp
.470588 .25098 .25098 rgb
ef
2229.27 1712.01 mo
2227.45 1713.45 2225.71 1714.76 2224.01 1715.98 cv
2235.15 1722.45 li
2238.2 1717.19 li
2229.27 1712.01 li
2229.27 1712.01 li
cp
.4 .4 .4 rgb
ef
2399.53 1678.34 mo
2423.63 1666.49 li
2426.53 1728.42 2431.91 1733.65 2486.31 1750.51 cv
2493.35 1765.86 li
2466.81 1765.29 li
2457 1757.81 2416.55 1742.99 2412.84 1739.34 cv
2408.7 1735.27 2411.47 1731.12 2411.87 1719.01 cv
2399.53 1678.34 li
2399.53 1678.34 li
cp
.776471 .278431 .196078 rgb
ef
2365.98 1240.61 mo
2365.76 1228.9 2365.31 1217.63 2364.58 1206.88 cv
2353.25 1210.37 2343.48 1213.61 2334.92 1216.58 cv
2365.98 1240.61 li
2365.98 1240.61 li
cp
2301.51 1389.57 mo
2309.7 1420.88 2319.31 1471.8 2335.9 1520.42 cv
2356.37 1580.39 2384.2 1638.72 2393.72 1674.86 cv
2399.19 1695.6 2383.4 1701.38 2383.84 1701.63 cv
2390.67 1705.44 2400.89 1706.82 2410.52 1710.04 cv
2419.15 1707.17 2429.67 1700.12 2434.34 1696.09 cv
2415.97 1626.89 2398.44 1494.92 2395.54 1460.89 cv
2389.15 1385.8 2383.23 1308.57 2372.4 1245.23 cv
2338.08 1226.14 li
2308.81 1241.55 2288.06 1232.6 2274.18 1237.71 cv
2274.01 1337.07 li
2301.51 1389.57 li
2301.51 1389.57 li
cp
2183.71 1225.22 mo
2185.49 1299.69 2190.64 1392.67 2202.63 1472.22 cv
2212.41 1537.14 2229.14 1588 2232.7 1654.85 cv
2232.93 1659.07 2227.81 1685.95 2226.91 1690.15 cv
2250.25 1697.12 2258.56 1691.63 2274.52 1694.31 cv
2292.87 1541.33 2268.59 1391.21 2274.18 1237.71 cv
2255.12 1241.64 2236.92 1238.07 2183.71 1225.22 cv
2183.71 1225.22 li
cp
.807843 .713726 .564706 rgb
ef
2311.43 1431.08 mo
2391.64 1414.7 li
2388.63 1379.42 2385.48 1344.39 2381.65 1311.26 cv
2381.64 1311.25 li
2274.07 1298.48 li
2274.01 1337.07 li
2301.51 1389.57 li
2304.53 1401.1 2307.74 1415.31 2311.43 1431.08 cv
2311.43 1431.08 li
cp
2188.51 1334.67 mo
2190.47 1364.63 2193.05 1395.08 2196.4 1424.65 cv
2251.93 1436.03 li
2254.28 1312.05 li
2275.7 1386.59 li
2274.51 1357.26 2273.56 1327.87 2273.36 1298.39 cv
2253.56 1259.14 li
2190.24 1288.52 li
2188.51 1334.67 li
2188.51 1334.67 li
cp
.701961 .603922 .447059 rgb
ef
2302.18 831.655 mo
2253.47 851.855 li
2256.21 879.313 2260.25 874.508 2241.61 894.617 cv
2235.36 909.509 li
2232.92 938.852 2295.67 912.531 2314.02 907.236 cv
2303.54 873.475 li
2302.18 831.655 li
2302.18 831.655 li
cp
.984314 .788235 .65098 rgb
ef
2302.18 831.655 mo
2253.46 851.855 li
2255.55 872.636 2258.36 874.947 2251.52 883.562 cv
2251.56 883.562 li
2271.74 883.937 2290.09 867.818 2302.52 842.181 cv
2302.18 831.655 li
2302.18 831.655 li
cp
.905882 .623529 .47451 rgb
f
2264.23 904.769 mo
2253.25 877.403 li
2184.66 934.412 2186.64 1125.81 2190.45 1210.36 cv
2284.96 1247.49 2284.59 1236.52 2361.21 1206.82 cv
2313.35 1115.04 2304.78 1053.99 2315.75 893.842 cv
2303.54 873.475 li
2264.23 904.769 li
2264.23 904.769 li
cp
.8 .8 .8 rgb
ef
2257.77 933.247 mo
2247.06 923.987 li
2261.9 906.254 li
2278.06 926.699 li
2267.47 934.771 li
2283.75 1142 li
2266.31 1173.24 li
2238.09 1141.79 li
2257.77 933.247 li
2257.77 933.247 li
cp
.0901961 .254902 .376471 rgb
ef
2183.71 1225.24 mo
2186.59 1207.75 li
2269.53 1218.93 2285.7 1221.36 2361.9 1199.43 cv
2361.13 1209.73 li
2313.47 1229.89 2289.52 1241.64 2258.87 1241.23 cv
2238.13 1240.94 2223.01 1235.31 2183.71 1225.24 cv
2183.71 1225.24 li
cp
.513726 .419608 .270588 rgb
f
2201.21 1231.37 mo
2214.57 1233.62 li
2216.89 1209.49 li
2203.52 1207.26 li
2201.21 1231.37 li
2201.21 1231.37 li
cp
.807843 .713726 .564706 rgb
ef
2314.32 1231.18 mo
2326.9 1228.12 li
2326.35 1205.54 li
2313.78 1208.6 li
2314.32 1231.18 li
2314.32 1231.18 li
cp
ef
2240.73 1240.75 mo
2283.68 1241.56 li
2284.16 1216.23 li
2241.2 1215.42 li
2240.73 1240.75 li
2240.73 1240.75 li
cp
.8 .8 .8 rgb
ef
2227.59 787.863 mo
2239.69 751.151 li
2246.08 721.071 li
2218.56 730.386 2229.75 766.498 2227.59 787.863 cv
2227.59 787.863 li
cp
.341176 .329412 .145098 rgb
ef
2305.1 723.593 mo
2246.07 721.068 li
2236.96 737.464 2231.5 756.501 2229.68 781.518 cv
2222.74 770.311 2215 787.756 2217.07 797.378 cv
2217.7 800.281 2220.4 803.49 2222.9 802.818 cv
2214.95 832.624 2220.87 857.253 2232.05 864.77 cv
2291.65 880.126 2326.99 810.952 2337.6 762.19 cv
2305.1 723.593 li
2305.1 723.593 li
cp
.984314 .788235 .65098 rgb
ef
2272.41 803.971 mo
2270.42 803.442 2269.17 801.24 2269.61 799.054 cv
2270.06 796.865 2272.03 795.518 2274.03 796.044 cv
2276.02 796.571 2277.27 798.773 2276.82 800.962 cv
2276.38 803.148 2274.4 804.498 2272.41 803.971 cv
2272.41 803.971 li
cp
.258824 .231373 .196078 rgb
ef
2238.03 791.828 mo
2236 791.282 2234.81 789.109 2235.38 786.972 cv
2235.95 784.834 2238.07 783.536 2240.11 784.072 cv
2242.15 784.614 2243.34 786.788 2242.77 788.928 cv
2242.19 791.065 2240.07 792.367 2238.03 791.828 cv
2238.03 791.828 li
cp
ef
2304.02 793.426 mo
2295.56 782.157 2286.55 785.647 2269.79 774.728 cv
2273.19 789.551 2285.14 788.37 2304.02 793.426 cv
2304.02 793.426 li
cp
.341176 .329412 .145098 rgb
ef
2228.54 769.901 mo
2239.14 765.067 2249.83 774.944 2258.26 769.859 cv
2250.72 785.841 2242.1 775.735 2228.54 769.901 cv
2228.54 769.901 li
cp
ef
2431.16 1712 mo
2433.05 1718.76 2436.65 1724.72 2443.62 1729.63 cv
2460.6 1741.62 2513.11 1756.95 2513.96 1770.68 cv
2514.35 1777.04 2502.56 1782.75 2480.64 1778.51 cv
2468 1776.06 2461.29 1770.28 2437.34 1752.62 cv
2419.47 1749.51 2416.73 1745.16 2409.67 1740.33 cv
2410.16 1723.91 li
2421.94 1730.16 2425.96 1732.51 2432.07 1729.8 cv
2421.82 1714.86 li
2431.16 1712 li
2431.16 1712 li
cp
.4 .2 .2 rgb
ef
2506.06 1778.45 mo
2500.42 1780.25 2491.86 1780.68 2480.64 1778.51 cv
2468.64 1776.19 2461.95 1772.11 2440.8 1756.46 cv
2439.68 1755.62 2438.55 1753.51 2437.34 1752.62 cv
2437.35 1753.43 2437.39 1753.52 2437.32 1754.87 cv
2431.15 1753.23 2414.26 1744.75 2408.26 1740.63 cv
2409.02 1735.64 li
2423.34 1742.39 li
2443.93 1752.36 li
2472.71 1770.97 2472.29 1775.58 2506.06 1778.45 cv
2506.06 1778.45 li
cp
2513.96 1771.26 mo
2513.8 1774.15 2511.1 1776.84 2506.06 1778.45 cv
2510.31 1769.59 li
2513.96 1771.26 li
2513.96 1771.26 li
cp
.2 .2 .2 rgb
ef
2487.39 1750.88 mo
2488.93 1751.42 li
2496.69 1754.17 2513.39 1761.38 2513.96 1770.68 cv
2514.05 1772.2 2513.44 1773.7 2512.16 1775.01 cv
2506.37 1774.4 2498.64 1772.56 2490.06 1769.59 cv
2471.36 1763.12 2455.7 1753.72 2455.08 1748.59 cv
2454.47 1743.5 2468.9 1744.54 2487.39 1750.88 cv
2487.39 1750.88 li
cp
.470588 .25098 .25098 rgb
ef
2448.39 1732.91 mo
2450.42 1734.25 2452.36 1735.48 2454.24 1736.6 cv
2443.41 1744.12 li
2439.7 1738.93 li
2448.39 1732.91 li
2448.39 1732.91 li
cp
.4 .4 .4 rgb
ef
2259.22 782.199 mo
2260.87 795.257 2251.82 802.144 2245.38 807.039 cv
2242.72 809.066 2240.51 810.745 2239.98 812.192 cv
2239.32 813.936 2241.42 815.808 2248.92 818.611 cv
2248.27 820.367 li
2239.44 817.061 2237.14 814.426 2238.22 811.533 cv
2238.95 809.583 2241.34 807.762 2244.25 805.557 cv
2250.33 800.93 2258.88 794.424 2257.36 782.432 cv
2259.22 782.199 li
2259.22 782.199 li
cp
.905882 .623529 .47451 rgb
f
2222.9 802.818 mo
2218.58 818.998 2213.11 861.58 2235.95 865.661 cv
2255.61 869.161 2266.12 866.075 2283.02 856.182 cv
2294.23 849.621 2303.91 837.131 2309.45 829.214 cv
2304.1 825.017 li
2250.35 801.311 li
2222.9 802.818 li
2222.9 802.818 li
cp
1 1 1 rgb
ef
2316.73 827.535 mo
2318.4 822.718 2388.54 733.163 2329.42 705.272 cv
2312.03 697.071 2246.14 695.886 2246.25 668.877 cv
2192.08 737.125 2273.19 752.965 2330.15 750.04 cv
2264.57 767.595 2325.94 791.715 2307.28 816.79 cv
2315.91 817.048 li
2322.88 810.945 li
2316.73 827.535 li
2316.73 827.535 li
cp
.341176 .329412 .145098 rgb
ef
2309.48 830.08 mo
2315.34 834.342 2324.35 831.952 2329.62 824.72 cv
2334.88 817.487 2334.39 808.169 2328.52 803.903 cv
2322.66 799.635 2313.65 802.034 2308.38 809.26 cv
2303.12 816.493 2303.61 825.817 2309.48 830.08 cv
2309.48 830.08 li
cp
.984314 .788235 .65098 rgb
ef
2182.42 899.693 mo
2206.26 897.446 li
2230.18 893.055 li
2226.35 986.329 2227.68 1007.98 2251.72 1098.17 cv
2292.07 1012.34 2299.31 988.306 2316.73 895.069 cv
2377.08 912.596 li
2374.38 1165.94 li
2392.65 1251.43 2397.23 1302.06 2413.42 1396.11 cv
2315.74 1416.46 li
2265.59 1428.76 2274.95 1434.84 2268.68 1383.31 cv
2253.56 1259.14 li
2240.8 1379.26 li
2236.7 1417.85 2233.22 1424.12 2209.12 1419.35 cv
2178.46 1413.28 2162.56 1404.11 2145.08 1385.68 cv
2174.63 1001.12 li
2170.26 985.438 li
2182.42 899.693 li
2182.42 899.693 li
cp
1 1 1 rgb
ef
2375.92 1184.64 mo
2382.56 1263.71 li
2339.99 1272.44 li
2318.94 1183.61 li
2375.92 1184.64 li
2375.92 1184.64 li
cp
2384.71 1264.46 mo
2377.83 1182.62 li
2357.33 1182.2 2336.82 1181.85 2316.31 1181.49 cv
2323.69 1212.62 2331.04 1243.76 2338.44 1274.87 cv
2353.88 1271.69 2369.33 1268.52 2384.78 1265.38 cv
2384.71 1264.46 li
2384.71 1264.46 li
cp
.686275 .823529 .905882 rgb
ef
2335.3 899.977 mo
2355.54 979.497 li
2321.23 987.078 li
2353.06 1001.36 li
2264.83 1094.91 li
2263.48 1093.62 li
2349.9 1002 li
2315.33 986.483 li
2353.25 978.089 li
2333.49 900.429 li
2335.3 899.977 li
2335.3 899.977 li
cp
ef
2220.71 903.219 mo
2191.09 954.428 li
2220.69 983.901 li
2184.16 1003.16 li
2243.52 1092.03 li
2241.96 1093.06 li
2181.45 1002.47 li
2217.57 983.423 li
2188.76 954.738 li
2219.09 902.289 li
2220.71 903.219 li
2220.71 903.219 li
cp
ef
2230.59 902.677 mo
2242.9 920.409 li
2244.52 922.734 li
2260.69 903.4 li
2276.6 923.535 li
2314.75 892.616 li
2316.73 895.069 li
2276.11 927.991 li
2260.63 908.398 li
2244.28 927.939 li
2230.28 907.778 li
2230.59 902.677 li
2230.59 902.677 li
cp
.701961 .701961 .701961 rgb
ef
1865.1 456.414 mo
1863.32 239.756 1686.25 65.5645 1469.59 67.3369 cv
1252.93 69.1162 1078.74 246.191 1080.51 462.846 cv
1082.29 679.503 1259.37 853.702 1476.02 851.919 cv
1692.68 850.15 1866.87 673.068 1865.1 456.414 cv
1865.1 456.414 li
cp
.301961 .301961 .301961 rgb
ef
1850.7 443.121 mo
1848.93 228.252 1673.32 55.4937 1458.45 57.2568 cv
1243.59 59.0195 1070.83 234.635 1072.59 449.501 cv
1074.35 664.367 1249.97 837.131 1464.83 835.362 cv
1679.7 833.605 1852.45 657.99 1850.7 443.121 cv
1850.7 443.121 li
cp
.501961 .501961 .501961 rgb
ef
1835.3 439.336 mo
1833.61 232.953 1664.93 67.0142 1458.54 68.7061 cv
1252.16 70.3979 1086.22 239.082 1087.91 445.465 cv
1089.6 651.852 1258.28 817.784 1464.67 816.092 cv
1671.06 814.4 1836.99 645.723 1835.3 439.336 cv
1835.3 439.336 li
cp
.8 .8 .8 rgb
ef
1835.46 458.532 mo
1833.86 262.746 1673.84 105.331 1478.05 106.936 cv
1282.27 108.543 1124.85 268.558 1126.46 464.347 cv
1128.06 660.13 1288.08 817.552 1483.86 815.938 cv
1679.65 814.336 1837.07 654.318 1835.46 458.532 cv
1835.46 458.532 li
cp
.815686 .913725 .972549 rgb
ef
1302.67 256.853 mo
1302.48 233.528 1283.42 214.775 1260.09 214.965 cv
1236.77 215.159 1218.02 234.219 1218.2 257.544 cv
1218.4 280.872 1237.46 299.622 1260.78 299.432 cv
1284.11 299.241 1302.86 280.178 1302.67 256.853 cv
1302.67 256.853 li
cp
1 1 1 rgb
ef
1731.26 754.767 mo
1805.52 668.176 li
1837.67 695.744 li
1763.42 782.341 li
1731.26 754.767 li
1731.26 754.767 li
cp
.501961 .501961 .501961 rgb
ef
1766.44 761.128 mo
1816.43 702.838 li
2838.49 1579.28 li
2788.5 1637.57 li
1766.44 761.128 li
1766.44 761.128 li
cp
.301961 .301961 .301961 rgb
ef
1954.92 922.76 mo
1963.24 913.061 1971.58 903.335 1979.91 893.623 cv
1988.23 883.923 1996.57 874.198 2004.91 864.486 cv
2148.03 978.773 2291.25 1093.14 2434.28 1207.37 cv
2577.31 1321.61 2720.45 1435.9 2863.48 1550.13 cv
2862.79 1550.95 li
2892.99 1578.48 2896.03 1625.25 2869.23 1656.5 cv
2842.44 1687.75 2795.76 1691.87 2763.93 1666.22 cv
2763.51 1666.72 li
2628.79 1542.79 2494.01 1418.76 2359.3 1294.81 cv
2224.59 1170.88 2089.71 1046.79 1954.92 922.76 cv
1954.92 922.76 li
cp
ef
2287.26 1165.75 mo
2253.04 1159.76 2258.95 1164.11 2239.53 1189.71 cv
2251.1 1189.82 2252.56 1186.63 2259.81 1176.79 cv
2247.51 1210.25 li
2244.45 1222.73 2243.01 1222.43 2254.04 1227.97 cv
2258.27 1210.78 li
2258.03 1213.81 2253.36 1228.96 2255.28 1230.73 cv
2257.11 1232.4 2263.41 1236.4 2267.11 1231.73 cv
2271.4 1216.3 li
2268.62 1229.21 li
2267.68 1233.36 2270.19 1233.26 2275.14 1234.96 cv
2279.61 1235.85 2281.38 1221.44 2282.51 1217.91 cv
2281.13 1224.63 2281.2 1224 2280.88 1228.18 cv
2280.6 1231.76 2284.63 1235.17 2289.3 1232.51 cv
2294.2 1216.91 li
2314.23 1189 2304.46 1184.68 2336.57 1159.12 cv
2355.43 1146.92 2374.14 1135.13 2392.77 1122.93 cv
2358.6 1102.4 li
2335.36 1124.65 2312.28 1146.87 2287.26 1165.75 cv
2287.26 1165.75 li
cp
.984314 .788235 .65098 rgb
ef
2355.54 979.497 mo
2376.31 912.389 li
2394.49 917.129 2398.02 931.375 2402.19 948.746 cv
2448.4 1085.93 li
2386.37 1136.48 2379.19 1138.28 2328.52 1171.56 cv
2313.03 1145.96 li
2386.44 1068.33 li
2355.54 979.497 li
2355.54 979.497 li
cp
1 1 1 rgb
ef
2164.84 1185.73 mo
2165.17 1257.23 li
2204.07 1261.67 li
2215.89 1180.28 li
2164.84 1185.73 li
2164.84 1185.73 li
cp
2163.3 1258.07 mo
2162.96 1184.06 li
2181.33 1182.06 2199.71 1180.12 2218.09 1178.16 cv
2213.94 1206.68 2209.82 1235.21 2205.65 1263.72 cv
2191.54 1262.1 2177.42 1260.47 2163.31 1258.89 cv
2163.3 1258.07 li
2163.3 1258.07 li
cp
.686275 .823529 .905882 rgb
ef
1902.71 879.907 mo
1894.62 872.971 li
1895.48 860.314 li
1909.36 847.709 li
1912.06 854.799 1911.63 853.056 1908.5 860.095 cv
1903.25 867.121 li
1902.71 879.907 li
1902.71 879.907 li
cp
.984314 .788235 .65098 rgb
ef
1959.13 928.288 mo
1904.63 881.547 li
1909.58 868.787 li
1929.09 853.043 li
1932.02 862.394 li
1941.35 860.715 li
1940.57 869.381 li
1934.51 875.296 li
1926.74 879.042 li
1925.21 894.514 li
1932.86 883.497 li
1945.29 881.87 li
1952.06 884.479 li
1945.57 892.796 1948.13 891.84 1937.66 891.647 cv
1934.34 901.501 li
1935.86 905.737 li
1946.97 913.125 1957.77 919.557 1959.13 928.288 cv
1959.13 928.288 li
cp
ef
1494.29 571.015 mo
1492.75 573.023 1491.23 575.089 1490.98 579.003 cv
1490.69 583.458 1494.07 587.301 1498.52 587.582 cv
1502.98 587.873 1506.82 584.492 1507.1 580.033 cv
1507.34 576.258 1506.63 574.03 1505.84 572.086 cv
1497.75 552.368 1524.49 540.309 1527.8 555.513 cv
1528.54 558.923 1526.07 560.699 1527.63 564.557 cv
1528.6 566.946 1531.51 568.025 1534.13 566.966 cv
1536.74 565.907 1538.08 563.114 1537.11 560.721 cv
1535.41 556.514 1533.04 556.875 1531.64 553.879 cv
1524.15 537.822 1553.23 537.583 1555.82 554.525 cv
1556.21 557.027 1556.64 559.552 1559.29 562.452 cv
1562.31 565.745 1567.42 565.965 1570.71 562.952 cv
1574 559.943 1574.23 554.825 1571.21 551.535 cv
1568.65 548.749 1566.55 547.712 1564.61 546.94 cv
1546.31 539.705 1553.5 513.548 1566.95 522.986 cv
1569.81 524.994 1569.18 527.971 1572.95 529.76 cv
1575.28 530.861 1578.15 529.689 1579.36 527.135 cv
1580.57 524.587 1579.66 521.626 1577.33 520.522 cv
1573.23 518.579 1571.73 520.445 1568.67 519.192 cv
1554.58 513.387 1569.81 487.104 1588.14 497.339 cv
1589.97 498.356 1592.1 499.338 1595.88 499.551 cv
1600.33 499.806 1604.16 496.396 1604.4 491.934 cv
1604.66 487.481 1601.24 483.668 1596.78 483.417 cv
1592.87 483.194 1590.64 484.453 1588.45 485.741 cv
1572.88 494.931 1556.96 471.405 1572.66 467.415 cv
1575.86 466.607 1577.08 468.67 1581.42 467.327 cv
1583.89 466.565 1585.2 463.759 1584.37 461.06 cv
1583.53 458.364 1580.86 456.801 1578.39 457.566 cv
1574.42 458.793 1574.61 461.825 1571.5 463.408 cv
1558.64 469.927 1550.55 441.978 1570.44 435.914 cv
1572.44 435.301 1574.63 434.442 1577.4 431.865 cv
1580.66 428.833 1580.85 423.715 1577.82 420.455 cv
1574.78 417.18 1569.66 416.987 1566.4 420.028 cv
1563.52 422.702 1562.88 425.182 1562.3 427.651 cv
1558.4 444.089 1530.29 441.978 1538.72 426.337 cv
1540.29 423.425 1542.64 423.925 1544.59 419.822 cv
1545.69 417.497 1544.52 414.63 1541.97 413.416 cv
1539.42 412.208 1536.45 413.112 1535.35 415.437 cv
1533.56 419.205 1535.93 421.12 1534.99 424.478 cv
1531.04 438.542 1502.15 422.007 1513.48 405.085 cv
1514.9 402.98 1516.27 400.83 1516.28 396.897 cv
1516.28 392.435 1512.66 388.815 1508.2 388.812 cv
1503.74 388.809 1500.12 392.428 1500.12 396.891 cv
1500.12 400.675 1500.97 402.857 1501.89 404.74 cv
1510.33 422.121 1487.93 436.87 1484.49 421.113 cv
1483.75 417.704 1486.22 415.934 1484.66 412.072 cv
1483.69 409.68 1480.78 408.598 1478.17 409.657 cv
1475.55 410.716 1474.22 413.516 1475.18 415.902 cv
1476.88 420.112 1479.25 419.75 1480.65 422.75 cv
1487.04 436.437 1457.3 443.763 1454.29 424.165 cv
1453.91 421.659 1453.47 419.131 1450.83 416.241 cv
1447.81 412.947 1442.7 412.721 1439.41 415.734 cv
1436.12 418.747 1435.89 423.864 1438.91 427.151 cv
1441.46 429.941 1443.56 430.977 1445.51 431.746 cv
1463.68 438.93 1456.5 466.226 1442.33 458.581 cv
1439.42 457.005 1439.93 454.661 1435.81 452.71 cv
1433.49 451.609 1430.62 452.778 1429.41 455.332 cv
1428.2 457.876 1429.1 460.847 1431.43 461.951 cv
1435.19 463.733 1437.11 461.374 1440.48 462.31 cv
1454.51 466.255 1441.02 487.705 1423.58 477.97 cv
1421.75 476.953 1419.62 475.971 1415.85 475.758 cv
1411.4 475.506 1407.57 478.916 1407.33 483.368 cv
1407.07 487.827 1410.48 491.644 1414.94 491.892 cv
1418.85 492.115 1421.08 490.859 1423.27 489.571 cv
1439.51 479.988 1456.39 506.435 1438.84 510.875 cv
1435.64 511.688 1434.42 509.625 1430.08 510.968 cv
1427.62 511.73 1426.3 514.536 1427.13 517.235 cv
1427.97 519.928 1430.65 521.498 1433.11 520.735 cv
1437.08 519.502 1436.9 516.467 1440 514.885 cv
1454.68 507.423 1457.98 534.051 1438.32 538.713 cv
1436.29 539.198 1434.06 539.921 1431.13 542.311 cv
1427.68 545.132 1427.17 550.228 1429.99 553.682 cv
1432.82 557.14 1437.91 557.644 1441.36 554.825 cv
1444.4 552.339 1445.2 549.905 1445.93 547.477 cv
1451.54 529.079 1485.1 536.821 1474.55 551.868 cv
1472.55 554.722 1469.57 554.099 1467.78 557.867 cv
1466.67 560.191 1467.85 563.062 1470.4 564.27 cv
1472.96 565.484 1475.92 564.576 1477.02 562.245 cv
1478.97 558.138 1477.1 556.64 1478.35 553.582 cv
1485.45 536.353 1504.41 557.79 1494.29 571.015 cv
1494.29 571.015 li
cp
1362.98 412.828 mo
1362.02 414.084 1361.08 415.369 1360.92 417.813 cv
1360.74 420.59 1362.85 422.986 1365.62 423.16 cv
1368.4 423.341 1370.8 421.229 1370.97 418.453 cv
1371.12 416.102 1370.68 414.71 1370.18 413.5 cv
1365.15 401.208 1381.81 393.694 1383.87 403.167 cv
1384.34 405.298 1382.8 406.403 1383.77 408.805 cv
1384.38 410.296 1386.19 410.968 1387.82 410.306 cv
1389.45 409.647 1390.28 407.907 1389.68 406.416 cv
1388.61 403.791 1387.13 404.02 1386.26 402.15 cv
1381.6 392.141 1399.73 391.992 1401.34 402.554 cv
1401.58 404.113 1401.85 405.689 1403.5 407.494 cv
1405.38 409.547 1408.57 409.683 1410.62 407.804 cv
1412.67 405.931 1412.82 402.741 1410.93 400.688 cv
1409.34 398.951 1408.03 398.305 1406.82 397.827 cv
1395.41 393.313 1399.9 377.011 1408.28 382.894 cv
1410.05 384.146 1409.67 386 1412.02 387.117 cv
1413.47 387.801 1415.26 387.075 1416.01 385.48 cv
1416.77 383.895 1416.2 382.047 1414.75 381.36 cv
1412.19 380.146 1411.25 381.312 1409.35 380.527 cv
1400.57 376.907 1410.06 360.527 1421.48 366.908 cv
1422.62 367.541 1423.95 368.154 1426.31 368.286 cv
1429.08 368.444 1431.47 366.32 1431.62 363.54 cv
1431.78 360.76 1429.65 358.383 1426.87 358.229 cv
1424.43 358.086 1423.05 358.874 1421.68 359.678 cv
1411.97 365.406 1402.05 350.741 1411.84 348.258 cv
1413.83 347.751 1414.59 349.036 1417.29 348.203 cv
1418.84 347.725 1419.66 345.979 1419.13 344.293 cv
1418.61 342.611 1416.95 341.639 1415.41 342.113 cv
1412.93 342.878 1413.05 344.768 1411.11 345.759 cv
1403.1 349.821 1398.05 332.398 1410.45 328.62 cv
1411.7 328.239 1413.06 327.7 1414.79 326.095 cv
1416.83 324.207 1416.94 321.016 1415.05 318.982 cv
1413.15 316.941 1409.97 316.822 1407.93 318.721 cv
1406.14 320.387 1405.74 321.93 1405.38 323.47 cv
1402.95 333.715 1385.42 332.398 1390.68 322.647 cv
1391.66 320.832 1393.13 321.148 1394.33 318.591 cv
1395.02 317.139 1394.3 315.353 1392.71 314.597 cv
1391.11 313.845 1389.27 314.407 1388.58 315.856 cv
1387.46 318.204 1388.94 319.396 1388.35 321.488 cv
1385.89 330.257 1367.88 319.948 1374.95 309.402 cv
1375.83 308.091 1376.69 306.748 1376.69 304.297 cv
1376.69 301.518 1374.44 299.26 1371.66 299.26 cv
1368.88 299.257 1366.62 301.514 1366.62 304.294 cv
1366.62 306.654 1367.15 308.014 1367.72 309.189 cv
1372.98 320.022 1359.02 329.214 1356.88 319.392 cv
1356.42 317.268 1357.96 316.167 1356.98 313.761 cv
1356.38 312.27 1354.57 311.595 1352.94 312.253 cv
1351.3 312.912 1350.47 314.655 1351.07 316.147 cv
1352.13 318.769 1353.61 318.543 1354.48 320.413 cv
1358.47 328.946 1339.92 333.512 1338.06 321.294 cv
1337.82 319.734 1337.55 318.159 1335.89 316.357 cv
1334.02 314.304 1330.83 314.162 1328.78 316.041 cv
1326.72 317.917 1326.58 321.106 1328.46 323.157 cv
1330.06 324.894 1331.37 325.543 1332.58 326.024 cv
1343.9 330.5 1339.43 347.512 1330.6 342.75 cv
1328.78 341.765 1329.1 340.302 1326.53 339.094 cv
1325.09 338.403 1323.3 339.133 1322.54 340.722 cv
1321.79 342.307 1322.35 344.161 1323.8 344.848 cv
1326.15 345.959 1327.34 344.487 1329.44 345.074 cv
1338.19 347.531 1329.78 360.902 1318.91 354.832 cv
1317.77 354.199 1316.44 353.592 1314.09 353.456 cv
1311.31 353.298 1308.93 355.419 1308.78 358.196 cv
1308.62 360.979 1310.74 363.356 1313.52 363.514 cv
1315.96 363.653 1317.35 362.868 1318.72 362.064 cv
1328.84 356.091 1339.35 372.574 1328.42 375.345 cv
1326.43 375.852 1325.66 374.563 1322.97 375.403 cv
1321.42 375.877 1320.61 377.627 1321.12 379.306 cv
1321.65 380.988 1323.31 381.967 1324.85 381.489 cv
1327.33 380.721 1327.21 378.832 1329.15 377.84 cv
1338.29 373.194 1340.35 389.79 1328.1 392.699 cv
1326.83 393 1325.44 393.449 1323.62 394.94 cv
1321.46 396.697 1321.14 399.874 1322.9 402.031 cv
1324.67 404.181 1327.84 404.498 1329.99 402.741 cv
1331.89 401.191 1332.38 399.674 1332.84 398.159 cv
1336.33 386.694 1357.26 391.515 1350.68 400.897 cv
1349.44 402.677 1347.57 402.289 1346.46 404.633 cv
1345.77 406.083 1346.51 407.875 1348.1 408.63 cv
1349.69 409.386 1351.53 408.818 1352.22 407.365 cv
1353.44 404.804 1352.26 403.871 1353.05 401.966 cv
1357.47 391.227 1369.29 404.588 1362.98 412.828 cv
1362.98 412.828 li
cp
1692.5 560.625 mo
1691.54 561.877 1690.59 563.162 1690.43 565.609 cv
1690.25 568.386 1692.36 570.782 1695.13 570.957 cv
1697.91 571.137 1700.31 569.026 1700.48 566.249 cv
1700.63 563.898 1700.19 562.507 1699.7 561.296 cv
1694.65 549.004 1711.32 541.49 1713.39 550.964 cv
1713.85 553.091 1712.31 554.199 1713.28 556.601 cv
1713.89 558.093 1715.7 558.765 1717.33 558.103 cv
1718.96 557.444 1719.79 555.704 1719.19 554.212 cv
1718.13 551.587 1716.65 551.813 1715.77 549.947 cv
1711.11 539.937 1729.23 539.789 1730.86 550.35 cv
1731.1 551.906 1731.36 553.485 1733.01 555.29 cv
1734.89 557.34 1738.08 557.479 1740.13 555.6 cv
1742.18 553.728 1742.32 550.534 1740.45 548.484 cv
1738.85 546.747 1737.54 546.104 1736.33 545.623 cv
1724.92 541.109 1729.4 524.807 1737.79 530.69 cv
1739.57 531.942 1739.17 533.796 1741.53 534.913 cv
1742.98 535.598 1744.77 534.871 1745.52 533.276 cv
1746.28 531.688 1745.72 529.844 1744.26 529.156 cv
1741.7 527.942 1740.77 529.108 1738.86 528.323 cv
1730.08 524.704 1739.57 508.324 1751 514.704 cv
1752.13 515.337 1753.46 515.95 1755.82 516.083 cv
1758.6 516.241 1760.98 514.113 1761.13 511.333 cv
1761.29 508.556 1759.16 506.18 1756.38 506.025 cv
1753.94 505.883 1752.55 506.67 1751.19 507.475 cv
1741.49 513.203 1731.56 498.534 1741.34 496.054 cv
1743.35 495.547 1744.1 496.833 1746.81 495.996 cv
1748.34 495.521 1749.16 493.774 1748.64 492.089 cv
1748.12 490.407 1746.46 489.432 1744.92 489.91 cv
1742.44 490.675 1742.56 492.567 1740.62 493.555 cv
1732.61 497.617 1727.56 480.194 1739.96 476.417 cv
1741.21 476.036 1742.57 475.496 1744.29 473.892 cv
1746.34 472.002 1746.45 468.813 1744.56 466.778 cv
1742.67 464.738 1739.48 464.618 1737.44 466.514 cv
1735.65 468.18 1735.25 469.727 1734.89 471.267 cv
1732.46 481.512 1714.94 480.194 1720.19 470.443 cv
1721.17 468.628 1722.64 468.945 1723.85 466.388 cv
1724.53 464.935 1723.81 463.146 1722.22 462.394 cv
1720.63 461.638 1718.77 462.203 1718.09 463.653 cv
1716.98 466 1718.45 467.192 1717.86 469.284 cv
1715.4 478.054 1697.4 467.744 1704.46 457.199 cv
1705.34 455.888 1706.2 454.544 1706.2 452.094 cv
1706.2 449.313 1703.95 447.057 1701.16 447.057 cv
1698.39 447.054 1696.13 449.311 1696.13 452.09 cv
1696.13 454.448 1696.66 455.807 1697.23 456.985 cv
1702.49 467.818 1688.53 477.014 1686.39 467.188 cv
1685.92 465.064 1687.47 463.959 1686.49 461.554 cv
1685.89 460.066 1684.08 459.391 1682.45 460.049 cv
1680.82 460.708 1679.98 462.452 1680.58 463.943 cv
1681.64 466.565 1683.12 466.339 1683.99 468.209 cv
1687.98 476.739 1669.44 481.308 1667.57 469.09 cv
1667.33 467.531 1667.05 465.955 1665.4 464.153 cv
1663.53 462.1 1660.34 461.958 1658.29 463.837 cv
1656.23 465.709 1656.1 468.903 1657.98 470.953 cv
1659.56 472.69 1660.87 473.339 1662.1 473.82 cv
1673.42 478.295 1668.94 495.308 1660.11 490.546 cv
1658.29 489.561 1658.61 488.098 1656.04 486.888 cv
1654.6 486.2 1652.81 486.93 1652.05 488.518 cv
1651.3 490.104 1651.87 491.957 1653.31 492.645 cv
1655.66 493.755 1656.85 492.283 1658.95 492.871 cv
1667.69 495.328 1659.29 508.698 1648.42 502.628 cv
1647.28 501.995 1645.95 501.388 1643.6 501.25 cv
1640.82 501.091 1638.45 503.216 1638.29 505.993 cv
1638.13 508.772 1640.26 511.152 1643.03 511.311 cv
1645.47 511.449 1646.87 510.665 1648.22 509.861 cv
1658.35 503.887 1668.87 520.371 1657.94 523.138 cv
1655.93 523.648 1655.17 522.359 1652.47 523.199 cv
1650.94 523.673 1650.12 525.424 1650.64 527.103 cv
1651.16 528.785 1652.82 529.763 1654.36 529.285 cv
1656.84 528.517 1656.72 526.628 1658.66 525.637 cv
1667.8 520.987 1669.86 537.586 1657.61 540.496 cv
1656.34 540.793 1654.95 541.245 1653.13 542.737 cv
1650.97 544.493 1650.66 547.67 1652.41 549.824 cv
1654.18 551.978 1657.35 552.294 1659.5 550.534 cv
1661.4 548.988 1661.9 547.47 1662.35 545.956 cv
1665.85 534.487 1686.78 539.311 1680.2 548.694 cv
1678.94 550.473 1677.08 550.085 1675.97 552.43 cv
1675.28 553.879 1676.02 555.671 1677.61 556.427 cv
1679.19 557.179 1681.04 556.611 1681.73 555.161 cv
1682.95 552.601 1681.78 551.667 1682.57 549.763 cv
1686.99 539.023 1698.8 552.381 1692.5 560.625 cv
1692.5 560.625 li
cp
1212.08 725.149 mo
1209.15 722.466 1206.27 719.728 1203.43 716.955 cv
1211.82 697.869 1194.14 676.407 1181.1 693.223 cv
1179.68 691.576 1178.27 689.916 1176.89 688.247 cv
1193.33 674.408 1172.82 655.972 1154.92 659.107 cv
1152.69 655.83 1150.51 652.507 1148.38 649.155 cv
1165.06 640.363 1164.53 615.546 1146.46 618.63 cv
1141.18 619.538 1140 623.993 1133.83 624.174 cv
1131.62 620.035 1129.49 615.856 1127.43 611.627 cv
1128.75 609.547 1130.95 608.185 1133.44 608.185 cv
1140.55 608.185 1141.41 611.84 1146.57 612.111 cv
1171.73 613.422 1163.58 570.014 1133.08 572.032 cv
1129.82 572.254 1126.14 572.203 1120.66 569.975 cv
1114.2 567.343 1111.08 559.959 1113.72 553.495 cv
1116.35 547.021 1123.73 543.912 1130.19 546.55 cv
1135.88 548.858 1138.19 552.139 1140.42 555.426 cv
1157.8 581.127 1194.95 550.818 1176.73 535.743 cv
1172.74 532.443 1169.63 534.551 1164.4 529.741 cv
1161.43 527.012 1161.45 522.159 1164.44 518.908 cv
1167.42 515.656 1172.26 515.23 1175.23 517.965 cv
1180.02 522.375 1177.72 526.541 1181.06 530.861 cv
1196.49 550.831 1218.26 514.956 1194.66 496.048 cv
1192.11 493.998 1189.44 491.482 1186.91 486.135 cv
1183.92 479.823 1186.6 472.28 1192.92 469.293 cv
1199.23 466.304 1206.77 468.99 1209.76 475.306 cv
1212.38 480.859 1211.88 484.831 1211.3 488.757 cv
1206.62 520.277 1258.56 524.281 1254.71 501.75 cv
1253.78 496.367 1249.15 495.247 1249.15 488.731 cv
1249.15 484.698 1252.74 481.428 1257.15 481.428 cv
1261.58 481.428 1265.16 484.698 1265.16 488.731 cv
1265.16 495.834 1261.5 496.7 1261.23 501.869 cv
1259.8 529.634 1300.97 513.771 1295.44 487.911 cv
1294.61 484.037 1293.85 480.101 1296.12 474.395 cv
1298.7 467.905 1306.06 464.741 1312.55 467.331 cv
1319.04 469.91 1322.2 477.269 1319.62 483.755 cv
1317.42 489.251 1314.92 491.931 1312.5 494.14 cv
1288.44 516.057 1318.63 550.137 1332.43 532.308 cv
1335.76 527.981 1333.47 523.822 1338.26 519.415 cv
1341.23 516.68 1346.06 517.103 1349.05 520.351 cv
1352.04 523.609 1352.06 528.458 1349.09 531.19 cv
1343.85 536.001 1340.75 533.896 1336.77 537.189 cv
1317.24 553.356 1355.52 575.942 1371.38 552.5 cv
1373.61 549.213 1375.92 545.939 1381.61 543.621 cv
1388.08 540.99 1395.46 544.099 1398.09 550.563 cv
1400.72 557.037 1397.6 564.418 1391.14 567.05 cv
1385.66 569.277 1381.99 569.323 1378.72 569.11 cv
1345.94 566.93 1342.05 614.3 1365.85 613.054 cv
1371.02 612.783 1371.88 609.131 1378.99 609.131 cv
1383.02 609.131 1386.3 612.712 1386.3 617.129 cv
1386.3 621.546 1383.02 625.13 1378.99 625.13 cv
1372.47 625.13 1371.35 620.503 1365.97 619.576 cv
1340.63 615.25 1347.99 657.06 1378.72 655.019 cv
1381.99 654.799 1385.66 654.851 1391.14 657.082 cv
1397.6 659.714 1400.72 667.092 1398.09 673.559 cv
1395.45 680.029 1388.07 683.146 1381.61 680.507 cv
1375.92 678.192 1373.61 674.912 1371.38 671.628 cv
1356.36 649.417 1315.41 669.258 1336.77 686.939 cv
1340.75 690.236 1343.86 688.131 1349.09 692.945 cv
1352.06 695.67 1352.04 700.523 1349.05 703.774 cv
1346.07 707.022 1341.23 707.449 1338.26 704.72 cv
1333.47 700.31 1335.76 696.145 1332.43 691.824 cv
1317.55 672.545 1287.85 707.529 1312.5 729.989 cv
1314.92 732.198 1317.42 734.877 1319.62 740.37 cv
1322.2 746.863 1319.04 754.218 1312.55 756.798 cv
1306.06 759.384 1298.7 756.223 1296.12 749.733 cv
1293.85 744.025 1294.61 740.092 1295.44 736.214 cv
1300.89 710.729 1259.71 693.132 1261.23 722.263 cv
1261.5 727.429 1265.16 728.291 1265.16 735.401 cv
1265.16 739.434 1261.58 742.704 1257.15 742.704 cv
1252.74 742.704 1249.15 739.434 1249.15 735.401 cv
1249.15 728.885 1253.78 727.765 1254.71 722.382 cv
1258.93 697.559 1219.09 703.342 1212.08 725.149 cv
1212.08 725.149 li
cp
1667.11 765.865 mo
1664.81 767.314 1662.5 768.748 1660.18 770.149 cv
1659.87 769.788 1659.5 769.442 1659.04 769.123 cv
1651.08 763.54 1645.32 770.404 1645.72 778.444 cv
1634.69 784.44 1623.33 789.89 1611.67 794.782 cv
1608.52 794.769 1605.01 796.158 1602.15 798.615 cv
1597.65 800.358 1593.11 802.018 1588.54 803.597 cv
1585.67 794.224 1575.29 787.947 1570.44 799.719 cv
1569.18 802.776 1571.06 804.275 1569.1 808.382 cv
1568.77 809.092 1568.26 809.673 1567.64 810.1 cv
1566.61 810.384 1565.57 810.655 1564.55 810.939 cv
1563.86 810.9 1563.16 810.726 1562.49 810.41 cv
1559.94 809.195 1558.76 806.325 1559.87 804 cv
1561.65 800.232 1564.64 800.859 1566.64 798.001 cv
1577.19 782.955 1543.62 775.212 1538.02 793.61 cv
1537.28 796.042 1536.49 798.473 1533.45 800.959 cv
1530 803.781 1524.9 803.274 1522.07 799.816 cv
1519.25 796.361 1519.76 791.269 1523.22 788.447 cv
1526.14 786.055 1528.38 785.334 1530.41 784.85 cv
1550.07 780.185 1546.76 753.556 1532.09 761.018 cv
1528.98 762.6 1529.18 765.639 1525.19 766.869 cv
1522.73 767.634 1520.06 766.062 1519.22 763.369 cv
1518.39 760.669 1519.7 757.867 1522.16 757.102 cv
1526.5 755.758 1527.72 757.825 1530.93 757.011 cv
1548.47 752.568 1531.6 726.121 1515.35 735.704 cv
1513.17 736.993 1510.94 738.249 1507.02 738.026 cv
1502.56 737.777 1499.16 733.96 1499.41 729.505 cv
1499.66 725.049 1503.48 721.64 1507.93 721.891 cv
1511.71 722.107 1513.84 723.086 1515.67 724.106 cv
1533.11 733.841 1546.59 712.389 1532.56 708.446 cv
1529.2 707.507 1527.28 709.87 1523.52 708.085 cv
1521.19 706.984 1520.28 704.013 1521.49 701.466 cv
1522.71 698.915 1525.57 697.743 1527.9 698.847 cv
1532.01 700.794 1531.5 703.142 1534.41 704.714 cv
1548.58 712.36 1555.76 685.063 1537.6 677.882 cv
1535.65 677.111 1533.55 676.074 1530.99 673.288 cv
1527.98 669.998 1528.2 664.883 1531.5 661.871 cv
1534.79 658.855 1539.9 659.084 1542.91 662.375 cv
1545.56 665.264 1546 667.792 1546.38 670.298 cv
1549.38 689.9 1579.13 682.571 1572.73 668.887 cv
1571.34 665.884 1568.97 666.249 1567.26 662.039 cv
1566.3 659.649 1567.64 656.85 1570.25 655.794 cv
1572.87 654.735 1575.78 655.813 1576.74 658.206 cv
1578.31 662.067 1575.83 663.84 1576.58 667.247 cv
1580.02 683.006 1602.41 668.254 1593.97 650.873 cv
1593.06 648.991 1592.2 646.808 1592.2 643.024 cv
1592.2 638.562 1595.83 634.945 1600.29 634.949 cv
1604.75 634.952 1608.37 638.568 1608.37 643.03 cv
1608.36 646.963 1606.98 649.113 1605.56 651.222 cv
1594.24 668.141 1623.12 684.676 1627.07 670.611 cv
1628.01 667.253 1625.65 665.338 1627.44 661.574 cv
1628.54 659.246 1631.51 658.341 1634.06 659.552 cv
1636.61 660.763 1637.78 663.633 1636.68 665.958 cv
1634.73 670.062 1632.38 669.559 1630.81 672.471 cv
1622.38 688.111 1650.49 690.226 1654.38 673.785 cv
1654.97 671.315 1655.6 668.835 1658.48 666.162 cv
1661.75 663.124 1666.86 663.314 1669.9 666.588 cv
1672.94 669.852 1672.75 674.97 1669.48 678.002 cv
1666.71 680.575 1664.53 681.438 1662.52 682.047 cv
1642.63 688.115 1650.72 716.06 1663.59 709.544 cv
1666.69 707.962 1666.51 704.93 1670.48 703.7 cv
1672.94 702.938 1675.62 704.501 1676.46 707.194 cv
1677.28 709.893 1675.97 712.702 1673.51 713.464 cv
1669.17 714.807 1667.95 712.741 1664.74 713.551 cv
1649.04 717.539 1664.97 741.067 1680.54 731.875 cv
1682.73 730.586 1684.96 729.327 1688.87 729.55 cv
1693.32 729.802 1696.75 733.615 1696.49 738.071 cv
1696.24 742.533 1692.42 745.939 1687.96 745.685 cv
1684.19 745.475 1682.06 744.49 1680.23 743.476 cv
1661.9 733.237 1646.67 759.52 1660.76 765.326 cv
1663.16 766.31 1664.6 765.367 1667.11 765.865 cv
1667.11 765.865 li
cp
1499.38 72.8101 mo
1506.7 73.4556 1513.98 74.292 1521.18 75.3477 cv
1521.27 103.132 1568.41 105.876 1564.89 84.4434 cv
1567.06 85.0308 1569.23 85.6313 1571.38 86.2578 cv
1571.64 101.369 1585.77 101.808 1595.94 94.3042 cv
1602.16 96.5903 1608.3 99.0474 1614.37 101.65 cv
1617.85 116.144 1633.47 126.315 1642.44 115.104 cv
1644.58 116.238 1646.7 117.39 1648.81 118.563 cv
1648.2 118.863 1647.58 119.253 1646.94 119.786 cv
1628.19 135.31 1662.75 156.75 1679.57 137.664 cv
1685.72 141.907 1691.75 146.314 1697.63 150.905 cv
1694.08 151.881 1691.37 151.868 1688.89 151.706 cv
1656.12 149.53 1652.22 196.897 1676.02 195.65 cv
1681.19 195.379 1682.06 191.728 1689.17 191.728 cv
1693.19 191.728 1696.47 195.308 1696.47 199.726 cv
1696.47 204.143 1693.19 207.723 1689.17 207.723 cv
1682.64 207.723 1681.52 203.103 1676.15 202.176 cv
1650.8 197.85 1658.17 239.656 1688.89 237.619 cv
1692.16 237.399 1695.83 237.451 1701.31 239.679 cv
1707.78 242.307 1710.9 249.691 1708.26 256.156 cv
1705.63 262.629 1698.24 265.742 1691.78 263.104 cv
1686.09 260.789 1683.79 257.512 1681.56 254.225 cv
1666.54 232.014 1625.58 251.855 1646.94 269.536 cv
1650.92 272.833 1654.04 270.727 1659.27 275.538 cv
1662.24 278.27 1662.22 283.12 1659.23 286.371 cv
1656.24 289.623 1651.4 290.046 1648.43 287.317 cv
1643.64 282.906 1645.94 278.741 1642.61 274.418 cv
1627.73 255.142 1598.02 290.126 1622.67 312.586 cv
1625.09 314.794 1627.6 317.474 1629.79 322.966 cv
1632.38 329.459 1629.21 336.815 1622.72 339.398 cv
1616.24 341.981 1608.88 338.82 1606.3 332.33 cv
1604.03 326.625 1604.78 322.689 1605.62 318.811 cv
1611.06 293.329 1569.89 275.732 1571.4 304.856 cv
1571.68 310.025 1575.33 310.887 1575.33 317.997 cv
1575.33 322.03 1571.75 325.301 1567.33 325.301 cv
1562.92 325.301 1559.33 322.03 1559.33 317.997 cv
1559.33 311.481 1563.96 310.358 1564.88 304.979 cv
1569.71 276.633 1517.06 288.195 1521.47 317.968 cv
1522.05 321.895 1522.56 325.869 1519.94 331.423 cv
1516.95 337.732 1509.41 340.425 1503.09 337.435 cv
1496.78 334.445 1494.09 326.902 1497.08 320.593 cv
1499.61 315.247 1502.28 312.731 1504.84 310.681 cv
1529.5 290.911 1506.96 255.478 1491.23 275.868 cv
1487.89 280.188 1490.2 284.353 1485.41 288.764 cv
1482.44 291.492 1477.59 291.069 1474.61 287.817 cv
1471.62 284.566 1471.6 279.716 1474.58 276.985 cv
1479.81 272.174 1482.91 274.279 1486.9 270.982 cv
1508.73 252.93 1467.13 226.857 1450.59 251.299 cv
1448.37 254.586 1446.05 257.864 1440.36 260.179 cv
1433.9 262.813 1426.53 259.701 1423.89 253.23 cv
1421.26 246.763 1424.37 239.382 1430.83 236.753 cv
1436.32 234.522 1439.99 234.474 1443.25 234.693 cv
1474.45 236.757 1479.12 197.391 1456.63 201.227 cv
1451.25 202.153 1450.13 206.777 1443.61 206.777 cv
1439.58 206.777 1436.31 203.193 1436.31 198.779 cv
1436.31 194.359 1439.58 190.778 1443.61 190.778 cv
1450.72 190.778 1451.58 194.437 1456.75 194.708 cv
1481.91 196.019 1473.75 152.607 1443.25 154.631 cv
1439.99 154.851 1436.32 154.799 1430.83 152.572 cv
1424.37 149.943 1421.26 142.556 1423.89 136.092 cv
1426.53 129.621 1433.9 126.508 1440.36 129.146 cv
1446.05 131.458 1448.37 134.735 1450.59 138.022 cv
1467.98 163.724 1505.12 133.412 1486.9 118.339 cv
1482.91 115.04 1479.81 117.145 1474.58 112.338 cv
1471.6 109.609 1471.62 104.752 1474.61 101.504 cv
1477.59 98.2563 1482.44 97.8301 1485.41 100.562 cv
1490.2 104.972 1487.89 109.137 1491.23 113.458 cv
1506.67 133.428 1528.43 97.5522 1504.84 78.6411 cv
1503.04 77.2041 1501.19 75.5317 1499.38 72.8101 cv
1499.38 72.8101 li
cp
.74902 .286275 .317647 rgb
ef
732.742 1369.2 mo
752.508 1369.2 772.282 1369.2 792.042 1369.2 cv
792.042 1349.86 792.042 1330.51 792.042 1311.15 cv
792.042 1297.5 783.918 1294.48 774.09 1284.43 cv
752.58 1284.43 li
742.151 1292.96 732.742 1296.35 732.742 1310.1 cv
732.742 1329.81 732.742 1349.51 732.742 1369.2 cv
732.742 1369.2 li
cp
.592157 .298039 .176471 rgb
ef
749.913 1265.64 mo
776.641 1265.64 li
776.641 1284.43 li
749.913 1284.43 li
749.913 1265.64 li
749.913 1265.64 li
cp
.772549 .933333 .941176 rgb
ef
749.913 1280.24 mo
776.641 1280.24 li
776.641 1284.43 li
749.913 1284.43 li
749.913 1280.24 li
749.913 1280.24 li
cp
.454902 .713726 .8 rgb
ef
748.305 1360.43 mo
792.042 1360.43 li
792.042 1314.7 li
748.305 1314.7 li
748.305 1360.43 li
748.305 1360.43 li
cp
.772549 .933333 .941176 rgb
ef
618.893 1582.46 mo
638.661 1582.46 658.427 1582.46 678.194 1582.46 cv
678.194 1563.11 678.194 1543.77 678.194 1524.41 cv
678.194 1510.75 670.064 1507.73 660.242 1497.68 cv
638.731 1497.68 li
628.295 1506.22 618.893 1509.61 618.893 1523.36 cv
618.893 1543.07 618.893 1562.76 618.893 1582.46 cv
618.893 1582.46 li
cp
.592157 .298039 .176471 rgb
ef
636.058 1478.89 mo
662.786 1478.89 li
662.786 1497.68 li
636.058 1497.68 li
636.058 1478.89 li
636.058 1478.89 li
cp
.772549 .933333 .941176 rgb
ef
636.058 1493.5 mo
662.786 1493.5 li
662.786 1497.68 li
636.058 1497.68 li
636.058 1493.5 li
636.058 1493.5 li
cp
.454902 .713726 .8 rgb
ef
634.45 1573.69 mo
678.194 1573.69 li
678.194 1527.96 li
634.45 1527.96 li
634.45 1573.69 li
634.45 1573.69 li
cp
.772549 .933333 .941176 rgb
ef
390.535 1338.63 mo
442.935 1338.63 li
442.935 1268.76 li
390.535 1268.76 li
390.535 1338.63 li
390.535 1338.63 li
cp
.545098 .796078 .878431 rgb
ef
384.803 1258.39 mo
448.121 1258.39 li
448.121 1270.13 li
384.803 1270.13 li
384.803 1258.39 li
384.803 1258.39 li
cp
.2 .4 .6 rgb
ef
437.569 1276.86 mo
438.376 1277.91 438.822 1279.03 438.822 1280.2 cv
438.822 1323.19 li
438.822 1328.62 429.316 1333.08 417.699 1333.08 cv
416.278 1333.08 li
404.661 1333.08 395.155 1328.62 395.155 1323.19 cv
395.155 1280.2 li
395.155 1279.03 395.601 1277.91 396.408 1276.86 cv
437.569 1276.86 li
437.569 1276.86 li
cp
.917647 .827451 .419608 rgb
ef
395.155 1320.03 mo
395.155 1280.2 li
395.155 1279.03 395.607 1277.91 396.408 1276.86 cv
434.837 1276.86 li
434.927 1277.96 434.973 1279.08 434.973 1280.2 cv
434.973 1302.2 417.15 1320.03 395.155 1320.03 cv
395.155 1320.03 li
cp
.968627 .890196 .533333 rgb
ef
426.061 1326.21 mo
428.812 1326.21 431.041 1323.97 431.041 1321.22 cv
431.041 1318.49 428.812 1316.25 426.061 1316.25 cv
423.31 1316.25 421.083 1318.49 421.083 1321.22 cv
421.083 1323.97 423.31 1326.21 426.061 1326.21 cv
426.061 1326.21 li
cp
ef
423.472 1312.84 mo
425.919 1312.84 427.909 1310.85 427.909 1308.4 cv
427.909 1305.96 425.919 1303.97 423.472 1303.97 cv
421.024 1303.97 419.036 1305.96 419.036 1308.4 cv
419.036 1310.85 421.024 1312.84 423.472 1312.84 cv
423.472 1312.84 li
cp
.917647 .827451 .419608 rgb
ef
411.119 1326.08 mo
414.592 1326.08 417.402 1323.26 417.402 1319.79 cv
417.402 1316.33 414.592 1313.51 411.119 1313.51 cv
407.651 1313.51 404.841 1316.33 404.841 1319.79 cv
404.841 1323.26 407.651 1326.08 411.119 1326.08 cv
411.119 1326.08 li
cp
.968627 .890196 .533333 rgb
ef
778.675 1583.38 mo
838.357 1583.38 li
838.357 1575.62 li
831.615 1575.62 li
848.237 1567.63 859.712 1550.65 859.712 1530.97 cv
859.712 1508.7 845.001 1489.87 824.77 1483.66 cv
824.77 1417.91 li
828.896 1417.91 li
828.896 1407.96 li
787.89 1407.96 li
787.89 1417.91 li
794.2 1417.91 li
794.2 1484.12 li
774.723 1490.79 760.723 1509.24 760.723 1530.97 cv
760.723 1550.65 772.198 1567.63 788.82 1575.62 cv
778.675 1575.62 li
778.675 1583.38 li
778.675 1583.38 li
cp
.698039 .929412 .992157 rgb
ef
829.936 1572.12 mo
845.745 1564.52 855.832 1548.56 855.832 1530.97 cv
855.832 1510.94 842.742 1493.23 823.633 1487.37 cv
820.895 1486.53 li
820.895 1414.02 li
825.015 1414.02 li
825.015 1411.84 li
791.771 1411.84 li
791.771 1414.02 li
798.081 1414.02 li
798.081 1486.9 li
795.452 1487.79 li
777.029 1494.09 764.597 1511.45 764.597 1530.97 cv
764.597 1548.56 774.684 1564.52 790.5 1572.12 cv
806.818 1578.44 813.01 1578.17 829.936 1572.12 cv
829.936 1572.12 li
cp
.545098 .796078 .878431 rgb
ef
829.936 1572.12 mo
845.745 1564.52 855.832 1548.56 855.832 1530.97 cv
855.832 1515.34 847.863 1501.13 835.283 1492.84 cv
766.509 1544.04 li
770.138 1556.18 778.733 1566.47 790.5 1572.12 cv
806.818 1578.44 813.01 1578.17 829.936 1572.12 cv
829.936 1572.12 li
cp
.454902 .713726 .8 rgb
ef
809.878 1576.87 mo
835.606 1576.87 856.458 1556.02 856.458 1530.3 cv
856.458 1527.82 856.264 1525.39 855.889 1523.01 cv
763.861 1523.01 li
763.493 1525.39 763.299 1527.82 763.299 1530.3 cv
763.299 1556.02 784.151 1576.87 809.878 1576.87 cv
809.878 1576.87 li
cp
.2 .4 .6 rgb
ef
809.878 1576.87 mo
835.606 1576.87 856.458 1556.02 856.458 1530.3 cv
856.458 1527.82 856.264 1525.39 855.889 1523.01 cv
794.761 1523.01 li
765.579 1544.72 li
771.656 1563.38 789.188 1576.87 809.878 1576.87 cv
809.878 1576.87 li
cp
.27451 .482353 .690196 rgb
ef
701.435 1582.49 mo
712.659 1582.49 723.882 1582.49 735.099 1582.49 cv
746.322 1582.49 757.545 1582.49 768.776 1582.49 cv
773.379 1582.49 776.085 1579.81 774.775 1576.52 cv
768.937 1561.92 763.112 1547.33 757.288 1532.75 cv
746.872 1506.69 li
746.872 1472.27 li
749.68 1472.27 li
749.68 1463.63 li
718.871 1463.63 li
718.871 1472.27 li
722.719 1472.27 li
722.719 1508.26 li
712.936 1532.75 li
707.112 1547.33 701.287 1561.92 695.449 1576.52 cv
694.131 1579.81 696.831 1582.49 701.435 1582.49 cv
701.435 1582.49 li
cp
.698039 .929412 .992157 rgb
ef
747.42 1469.99 mo
747.42 1465.89 li
721.137 1465.89 li
721.137 1469.99 li
724.986 1469.99 li
724.986 1508.7 li
715.035 1533.59 li
709.204 1548.18 703.385 1562.76 697.554 1577.36 cv
696.63 1579.66 699.846 1580.23 701.435 1580.23 cv
712.659 1580.23 723.882 1580.23 735.099 1580.23 cv
746.322 1580.23 757.552 1580.23 768.776 1580.23 cv
770.358 1580.23 773.586 1579.66 772.669 1577.36 cv
766.838 1562.76 761.013 1548.18 755.182 1533.59 cv
744.605 1507.13 li
744.605 1469.99 li
747.42 1469.99 li
747.42 1469.99 li
cp
.545098 .796078 .878431 rgb
ef
770.287 1577.7 mo
764.533 1563.28 758.773 1548.87 753.012 1534.45 cv
750.94 1529.28 li
719.278 1529.28 li
717.205 1534.45 li
711.451 1548.85 705.71 1563.26 699.93 1577.7 cv
700.434 1577.85 701.106 1577.89 701.435 1577.89 cv
712.659 1577.89 723.882 1577.89 735.099 1577.89 cv
746.322 1577.89 757.552 1577.89 768.776 1577.89 cv
769.105 1577.89 769.79 1577.84 770.287 1577.7 cv
770.287 1577.7 li
cp
.67451 .207843 .129412 rgb
ef
733.788 1552.07 mo
736.236 1552.07 738.211 1550.09 738.211 1547.65 cv
738.211 1545.21 736.236 1543.22 733.788 1543.22 cv
731.353 1543.22 729.371 1545.21 729.371 1547.65 cv
729.371 1550.09 731.353 1552.07 733.788 1552.07 cv
733.788 1552.07 li
cp
.8 .337255 .231373 rgb
ef
720.524 1566.48 mo
722.965 1566.48 724.948 1564.51 724.948 1562.07 cv
724.948 1559.63 722.965 1557.64 720.524 1557.64 cv
718.083 1557.64 716.1 1559.63 716.1 1562.07 cv
716.1 1564.51 718.083 1566.48 720.524 1566.48 cv
720.524 1566.48 li
cp
ef
721.357 1552.07 mo
722.842 1552.07 724.056 1550.86 724.056 1549.37 cv
724.056 1547.87 722.842 1546.67 721.357 1546.67 cv
719.866 1546.67 718.658 1547.87 718.658 1549.37 cv
718.658 1550.86 719.866 1552.07 721.357 1552.07 cv
721.357 1552.07 li
cp
ef
271.924 1339.25 mo
478.226 1339.25 li
478.226 1684.01 li
271.924 1684.01 li
271.924 1339.25 li
271.924 1339.25 li
cp
.2 .4 .6 rgb
ef
284.829 1353.24 mo
465.324 1353.24 li
465.324 1654.86 li
284.829 1654.86 li
284.829 1353.24 li
284.829 1353.24 li
cp
.454902 .713726 .8 rgb
ef
281.513 1684.01 mo
299.285 1684.01 li
299.285 1719.56 li
281.513 1719.56 li
281.513 1684.01 li
281.513 1684.01 li
cp
.2 .4 .6 rgb
ef
449.722 1684.01 mo
467.494 1684.01 li
467.494 1719.56 li
449.722 1719.56 li
449.722 1684.01 li
449.722 1684.01 li
cp
ef
440.636 1494.73 mo
446.797 1494.73 451.795 1489.73 451.795 1483.57 cv
451.795 1477.41 446.797 1472.41 440.636 1472.41 cv
434.469 1472.41 429.477 1477.41 429.477 1483.57 cv
429.477 1489.73 434.469 1494.73 440.636 1494.73 cv
440.636 1494.73 li
cp
ef
1138.11 1055.88 mo
1179.4 1023.86 li
1166.5 1051.82 li
1119.87 1082.23 li
1067.45 1016.5 li
1085.41 989.854 li
1138.11 1055.88 li
1138.11 1055.88 li
cp
.984314 .788235 .65098 rgb
ef
1003.69 879.132 mo
1003.5 873.462 982.433 872.222 978.139 871.589 cv
976.034 871.279 954.188 866.914 953.858 868.619 cv
953.361 871.215 957.326 875.994 959.826 877.337 cv
969.176 882.374 972.786 883.872 983.867 884.634 cv
994.561 885.37 1001.92 880.075 1003.34 879.933 cv
1003.69 879.132 li
1003.69 879.132 li
cp
.639216 .196078 .0941176 rgb
ef
1090.26 1187.61 mo
1097.48 1363.2 li
999.668 1377.09 1006.88 1378.75 912.239 1350.46 cv
929.701 1160.34 li
1090.26 1187.61 li
1090.26 1187.61 li
cp
.52549 .631373 .721569 rgb
ef
1013.8 1242.67 mo
1075.03 1203.93 li
1072.32 1310.79 1069.26 1313.96 1042.53 1419.21 cv
1026.27 1505.01 963.403 1662.56 998.971 1702.7 cv
1027.27 1734.66 li
1020.44 1741.67 li
1005.1 1738.12 li
952.438 1676.88 li
957.048 1661.1 944.805 1654.22 960.865 1650.72 cv
969.557 1648.83 968.995 1622.08 968.93 1599.17 cv
968.776 1538.06 973.922 1480.11 995.587 1412.41 cv
1013.8 1242.67 li
1013.8 1242.67 li
cp
.941176 .752941 .619608 rgb
ef
1012.97 1721.35 mo
1004.16 1707.42 li
1020.22 1726.34 li
1030.74 1738.74 1028.14 1742.89 1014.24 1743.13 cv
999.636 1743.37 991.203 1741.37 985.184 1733.97 cv
983.493 1731.88 982.007 1729.37 980.619 1726.4 cv
974.446 1713.22 976.357 1713.58 966.812 1701.53 cv
968.265 1735.89 li
964.281 1736.14 li
958.069 1692.38 li
947.272 1674.59 944.934 1658.76 960.865 1650.72 cv
957.965 1685.95 963.712 1681.64 984.455 1708.9 cv
992.552 1718.3 1001.56 1731.19 1012.97 1721.35 cv
1012.97 1721.35 li
cp
.247059 .321569 .431373 rgb
ef
981.988 1229.43 mo
1016.01 1258.04 li
958.895 1413.33 li
944.714 1465.54 915.758 1539.71 897.742 1588.13 cv
877.155 1643.46 875.598 1634.92 874.417 1690.68 cv
874.19 1701.33 873.287 1712.23 871.646 1727.68 cv
844.64 1728.49 li
843.846 1690.63 li
843.594 1680.55 li
836.536 1653.91 li
858.892 1637.16 855.321 1631.47 860.681 1602.22 cv
868.915 1557.34 876.683 1469.88 908.958 1419.97 cv
920.692 1401.81 920.059 1410.31 924.966 1387.17 cv
931.127 1236.65 li
981.988 1229.43 li
981.988 1229.43 li
cp
.941176 .752941 .619608 rgb
ef
1015.97 804.617 mo
975.646 737.093 li
1011.16 747.179 li
1020.42 775.212 1018.68 775.241 1015.97 804.617 cv
1015.97 804.617 li
cp
.360784 .247059 .141176 rgb
ef
1015.97 804.617 mo
975.646 737.093 li
1011.16 747.179 li
1020.42 775.212 1018.68 775.241 1015.97 804.617 cv
1015.97 804.617 li
cp
ef
945.386 839.03 mo
978.294 835.143 li
981.846 852.216 983.893 863 986.734 870.518 cv
988.82 876.032 991.338 879.804 995.187 883.006 cv
1002.5 889.115 1014.44 888.186 1034.49 891.117 cv
1028.64 909.586 1012.28 919.466 1011.15 934.784 cv
980.012 926.299 944.405 935.443 927.22 910.865 cv
971.042 896.18 954.814 885.757 945.386 839.03 cv
945.386 839.03 li
cp
.984314 .788235 .65098 rgb
ef
945.386 839.03 mo
978.294 835.143 li
981.846 852.216 983.893 863 986.734 870.518 cv
988.82 876.032 991.338 879.804 995.187 883.006 cv
1002.5 889.115 1014.44 888.186 1034.49 891.117 cv
1028.64 909.586 1012.28 919.466 1011.15 934.784 cv
980.012 926.299 944.405 935.443 927.22 910.865 cv
971.042 896.18 954.814 885.757 945.386 839.03 cv
945.386 839.03 li
cp
ef
952.735 838.177 mo
985.849 839.224 li
987.083 860.423 979.686 861.569 992.587 880.535 cv
979.201 877.384 964.881 869.975 954.769 860.185 cv
953.981 853.818 953.173 846.534 952.735 838.177 cv
952.735 838.177 li
cp
.905882 .623529 .47451 rgb
ef
1015.97 804.617 mo
1015.97 804.617 1016.38 863.646 998.597 863.143 cv
983.815 862.729 954.278 855.975 942.687 835.465 cv
926.71 807.213 904.425 781.721 936.249 756.637 cv
949.371 746.295 967.296 741.678 983.382 744.509 cv
993.017 746.204 1007.96 753.363 1008.3 772.274 cv
1007.66 796.513 1014.28 795.153 1015.97 804.617 cv
1015.97 804.617 li
cp
.984314 .788235 .65098 rgb
ef
927.576 771.967 mo
968.944 799.951 923.094 801.292 950.171 855.639 cv
903.857 837.325 878.233 785.447 904.295 758.684 cv
919.782 703.652 1020.2 705.295 1034.37 776.003 cv
1014.86 729.008 963.68 780.585 927.576 771.967 cv
927.576 771.967 li
cp
.509804 .364706 .235294 rgb
ef
942.5 838.229 mo
944.934 834.755 943.674 827.29 939.69 821.53 cv
935.712 815.782 930.507 813.936 928.08 817.397 cv
925.645 820.871 926.904 828.336 930.888 834.096 cv
934.873 839.844 940.071 841.69 942.5 838.229 cv
942.5 838.229 li
cp
.984314 .788235 .65098 rgb
ef
983.951 796.142 mo
990.596 807.691 995.123 814.22 999.339 821.323 cv
986.321 825.727 li
985.54 823.532 li
996.124 820.354 li
995.278 818.12 989.466 808.046 983.951 796.142 cv
983.951 796.142 li
cp
.905882 .623529 .47451 rgb
ef
948.931 788.373 mo
944.217 790.02 940.542 793.261 938.283 797.262 cv
947.853 786.674 960.704 791.863 969.021 795.344 cv
966.218 787.356 957.972 785.222 948.931 788.373 cv
948.931 788.373 li
cp
.360784 .247059 .141176 rgb
ef
999.656 773.943 mo
1004.03 773.101 1008.32 773.953 1011.87 776.022 cv
999.714 772.151 992.152 781.902 987.309 788.312 cv
985.863 780.901 991.254 775.561 999.656 773.943 cv
999.656 773.943 li
cp
ef
857.246 1754.7 mo
852.815 1753.91 836.439 1745.72 834.314 1741.05 cv
831.912 1735.8 834.133 1726.53 838.693 1705.25 cv
833.5 1681.13 li
825.893 1725.86 li
823.104 1725.58 li
824.79 1708.66 826.468 1691.72 828.154 1674.81 cv
830.072 1655.6 830.892 1660.99 843.949 1646.16 cv
833.584 1675.66 853.823 1674.17 847.107 1716.57 cv
852.402 1723.21 852.745 1723.74 872.634 1723.57 cv
873.241 1730.17 873.861 1736.77 874.468 1743.37 cv
875.611 1755.66 870.064 1756.97 857.246 1754.7 cv
857.246 1754.7 li
cp
.247059 .321569 .431373 rgb
ef
1027.8 758.393 mo
1030.23 763.517 1032.14 769.142 1033.37 775.309 cv
1014.35 729.505 965.256 777.337 929.351 771.802 cv
927.091 769.927 924.424 767.938 921.26 765.797 cv
955.906 774.069 1003.61 730.176 1027.8 758.393 cv
1027.8 758.393 li
cp
936.39 778.822 mo
958.927 795.534 932.735 808.188 946.406 840.903 cv
924.121 794.469 947.775 802.25 936.39 778.822 cv
936.39 778.822 li
cp
.360784 .247059 .141176 rgb
ef
1018.82 809.105 mo
1021.53 835.93 1012.57 857.421 1001.42 863.466 cv
985.055 866.514 951.921 858.997 942.137 839.262 cv
939.917 832.985 li
942.164 834.303 li
942.176 830.88 li
930.456 812.347 li
943.138 826.644 li
980.683 817.72 li
990.312 808.388 li
1004.36 812.554 li
1018.82 809.105 li
1018.82 809.105 li
cp
1 1 1 rgb
ef
966.057 808.511 mo
968.059 808.02 969.35 805.834 968.937 803.642 cv
968.53 801.45 966.574 800.071 964.578 800.565 cv
962.57 801.059 961.285 803.238 961.692 805.434 cv
962.105 807.633 964.061 809.015 966.057 808.511 cv
966.057 808.511 li
cp
.258824 .231373 .196078 rgb
ef
1000.63 796.929 mo
1002.68 796.419 1003.9 794.269 1003.36 792.122 cv
1002.83 789.971 1000.73 788.641 998.687 789.148 cv
996.634 789.655 995.414 791.808 995.95 793.958 cv
996.485 796.103 998.584 797.436 1000.63 796.929 cv
1000.63 796.929 li
cp
ef
952.554 890.433 mo
1000.81 888.276 li
1017.58 934.164 li
1017.65 943.256 li
1043.7 958.613 li
1075.82 1185.16 li
1090.87 1384.34 li
1064.71 1381.06 1014.42 1419.17 911.709 1385.58 cv
917.805 1369.11 li
960.684 1158.68 li
942.712 1004.32 li
984.707 950.618 li
952.554 890.433 li
952.554 890.433 li
cp
.85098 .380392 .27451 rgb
ef
1038.89 885.925 mo
995.187 883.006 li
1016.47 925.201 1011.22 942.778 1018.03 992.851 cv
983.034 921.765 969.861 929.489 956.119 889.077 cv
901.299 907.739 li
934.369 1006.05 li
942.46 1039.5 949.519 1065.53 948.421 1078.57 cv
946.212 1104.78 918.651 1105.55 913.188 1162.84 cv
907.518 1222.15 917.748 1294.09 906.079 1366.5 cv
994.18 1386.1 li
1014.25 1328.75 1020.46 1302.84 1027.67 1243.03 cv
1027.94 1312.88 1022.43 1334.37 1016.86 1387.88 cv
1097.48 1363.2 li
1098.76 1239 1092.6 1144.58 1077.57 1021.15 cv
1085.74 987.401 li
1056.43 946.614 li
1054.21 921.3 1055.43 889.749 1038.89 885.925 cv
1038.89 885.925 li
cp
1 1 1 rgb
ef
1095.28 1228.66 mo
1095.21 1227.02 li
1075.19 1228.7 li
1064.92 1156.38 li
1091.17 1159.33 li
1091.05 1157.64 li
1062.76 1154.49 li
1066.36 1179.83 1069.94 1205.17 1073.56 1230.51 cv
1095.28 1228.66 li
1095.28 1228.66 li
cp
.686275 .823529 .905882 rgb
ef
956.008 889.425 mo
953.376 870.408 li
956.863 880.688 991.823 882.245 1003.69 879.132 cv
999.087 901.101 li
989.776 910.813 969.221 911.033 956.008 889.425 cv
956.008 889.425 li
cp
.8 .337255 .231373 rgb
ef
951.049 892.667 mo
929.306 941.72 li
963.455 946.834 li
931.367 955.306 li
1017.8 1014.34 li
1019.18 1013.55 li
934.518 955.732 li
969.376 946.537 li
931.612 940.88 li
952.851 892.964 li
951.049 892.667 li
951.049 892.667 li
cp
.686275 .823529 .905882 rgb
ef
1004.47 884.518 mo
1041.75 921.907 li
1028.11 933.518 li
1048.19 933.97 li
1038.86 1002.82 li
1037.77 1002.45 li
1046.91 935.003 li
1025.1 934.513 li
1040.18 921.662 li
1003.78 885.15 li
1004.47 884.518 li
1004.47 884.518 li
cp
ef
1122.93 1132.25 mo
1186.37 972.394 li
1046.45 979.937 li
989.801 1138.33 li
1122.93 1132.25 li
1122.93 1132.25 li
cp
.819608 .352941 .384314 rgb
ef
930.243 973.827 mo
898.929 923.044 li
889.185 949.714 845.583 1103.26 864.93 1121.66 cv
879.57 1135.55 959.347 1124.82 980.109 1120.8 cv
991.571 1123.41 1037.69 1138.3 1036.34 1127.29 cv
1044.44 1126.55 1045.68 1126.46 1047.8 1123 cv
1048.82 1121.35 1048.13 1120.24 1042.2 1118.22 cv
1046.3 1118.28 1058.27 1112.92 1047.61 1109.93 cv
1044.9 1109.17 1042.13 1108.79 1042.96 1108.47 cv
1053.75 1104.34 1036.7 1099.51 1032.61 1097.98 cv
1023.91 1094.73 1015.89 1092.96 1006.76 1092.11 cv
1000.6 1091.52 1017.61 1093.42 1019.93 1091.1 cv
1026.93 1084.15 1020.45 1083.8 1011.09 1084.21 cv
1006.93 1084.4 995.446 1075.73 983.473 1088.67 cv
966.147 1107.44 897.309 1090.14 893.499 1091.64 cv
898.852 1079.98 923.378 998.12 930.243 973.827 cv
930.243 973.827 li
cp
.984314 .788235 .65098 rgb
ef
901.299 907.739 mo
935.848 977.985 li
895.908 1085.42 li
960.251 1097.08 li
957.985 1133.65 li
917.857 1140.05 851.027 1139.13 853.119 1098.02 cv
856.225 1036.89 873.854 975.609 891.509 918.149 cv
892.737 914.158 895.488 909.547 901.299 907.739 cv
901.299 907.739 li
cp
1 1 1 rgb
ef
930.359 1164.33 mo
932.044 1235.8 li
971.023 1239.51 li
981.303 1157.91 li
930.359 1164.33 li
930.359 1164.33 li
cp
930.198 1236.68 mo
928.454 1162.69 li
946.781 1160.35 965.121 1158.05 983.454 1155.75 cv
979.85 1184.35 976.273 1212.94 972.65 1241.54 cv
958.508 1240.18 944.359 1238.82 930.217 1237.51 cv
930.198 1236.68 li
930.198 1236.68 li
cp
.686275 .823529 .905882 rgb
ef
1183.35 996.765 mo
1180.87 993.897 1172.66 986.948 1163.34 983.643 cv
1160.19 982.506 1158.52 981.292 1159.39 984.495 cv
1159.77 985.903 1162.49 988.474 1163.59 989.454 cv
1166.79 992.309 1180.19 1001.49 1176.65 1003.54 cv
1172.39 999.386 1164.8 991.302 1154.23 987.543 cv
1150.33 986.161 1148.27 984.649 1149.34 988.603 cv
1149.82 990.346 1153.17 993.522 1154.53 994.737 cv
1159.43 999.089 1169.58 1006.83 1173.94 1010.35 cv
1173.63 1010.73 li
1169.28 1006.18 1158.66 998.185 1148.15 995.809 cv
1144.1 994.892 1141.89 993.64 1143.42 997.437 cv
1144.1 999.115 1147.81 1001.87 1149.31 1002.91 cv
1154.56 1006.57 1164.24 1013.23 1168.83 1016.42 cv
1166.48 1019.19 li
1164.18 1015.57 1157.62 1009.14 1149.82 1007.54 cv
1146.85 1006.92 1145.39 1005.96 1145.72 1009.09 cv
1145.86 1010.47 1148.14 1012.64 1149.07 1013.45 cv
1150.76 1014.94 1154.45 1016.98 1156.89 1019.09 cv
1159.95 1021.74 1161.87 1024.43 1162.88 1025.44 cv
1167.07 1034.43 1163 1035.74 1158.88 1048.31 cv
1179.4 1023.86 li
1187.55 1007.45 li
1186.11 1000.37 li
1183.35 996.765 li
1183.35 996.765 li
cp
.984314 .788235 .65098 rgb
ef
326.904 590.568 mo
640.275 590.568 li
640.275 962.939 li
326.904 962.939 li
326.904 590.568 li
326.904 590.568 li
cp
1 1 1 rgb
ef
353.128 629.085 mo
614.05 629.085 li
614.05 902.47 li
353.128 902.47 li
353.128 629.085 li
353.128 629.085 li
cp
.901961 .901961 .901961 rgb
ef
558.786 629.085 mo
558.786 902.47 li
557.668 902.47 li
557.668 629.085 li
558.786 629.085 li
558.786 629.085 li
cp
529.081 629.085 mo
529.081 902.47 li
527.963 902.47 li
527.963 629.085 li
529.081 629.085 li
529.081 629.085 li
cp
499.375 629.085 mo
499.375 902.47 li
498.258 902.47 li
498.258 629.085 li
499.375 629.085 li
499.375 629.085 li
cp
469.669 629.085 mo
469.669 902.47 li
468.552 902.47 li
468.552 629.085 li
469.669 629.085 li
469.669 629.085 li
cp
439.964 629.085 mo
439.964 902.47 li
438.847 902.47 li
438.847 629.085 li
439.964 629.085 li
439.964 629.085 li
cp
410.259 629.085 mo
410.259 902.47 li
409.142 902.47 li
409.142 629.085 li
410.259 629.085 li
410.259 629.085 li
cp
380.557 629.085 mo
380.557 902.47 li
379.44 902.47 li
379.44 629.085 li
380.557 629.085 li
380.557 629.085 li
cp
588.484 629.085 mo
588.484 902.47 li
587.367 902.47 li
587.367 629.085 li
588.484 629.085 li
588.484 629.085 li
cp
0 0 0 rgb
f
353.128 690.136 mo
614.05 690.136 li
614.05 691.25 li
353.128 691.25 li
353.128 690.136 li
353.128 690.136 li
cp
353.128 719.841 mo
614.05 719.841 li
614.05 720.958 li
353.128 720.958 li
353.128 719.841 li
353.128 719.841 li
cp
353.128 749.543 mo
614.05 749.543 li
614.05 750.66 li
353.128 750.66 li
353.128 749.543 li
353.128 749.543 li
cp
353.128 779.251 mo
614.05 779.251 li
614.05 780.365 li
353.128 780.365 li
353.128 779.251 li
353.128 779.251 li
cp
353.128 808.95 mo
614.05 808.95 li
614.05 810.067 li
353.128 810.067 li
353.128 808.95 li
353.128 808.95 li
cp
353.128 838.655 mo
614.05 838.655 li
614.05 839.779 li
353.128 839.779 li
353.128 838.655 li
353.128 838.655 li
cp
353.128 868.36 mo
614.05 868.36 li
614.05 869.471 li
353.128 869.471 li
353.128 868.36 li
353.128 868.36 li
cp
353.128 660.434 mo
614.05 660.434 li
614.05 661.548 li
353.128 661.548 li
353.128 660.434 li
353.128 660.434 li
cp
f
376.144 836.963 mo
408.012 775.535 li
437.311 775.535 li
498.258 714.584 li
527.034 743.363 li
556.558 687.537 li
588.484 687.537 li
588.484 694.969 li
561.013 694.969 li
528.886 755.729 li
498.258 725.098 li
478.969 744.387 459.667 763.666 440.391 782.968 cv
412.513 782.968 li
382.737 840.36 li
376.144 836.963 li
376.144 836.963 li
cp
1 0 0 rgb
f
2465.16 966.517 mo
2791.61 966.517 li
2791.61 783.022 li
2465.16 783.022 li
2465.16 966.517 li
2465.16 966.517 li
cp
1 1 1 rgb
ef
2477.43 794.756 mo
2782.01 794.756 li
2782.01 946.782 li
2477.43 946.782 li
2477.43 794.756 li
2477.43 794.756 li
cp
.901961 .901961 .901961 rgb
ef
2499.3 923.315 mo
2522.77 923.315 li
2522.77 829.434 li
2499.3 829.434 li
2499.3 923.315 li
2499.3 923.315 li
cp
.819608 .352941 .384314 rgb
ef
2529.71 923.315 mo
2553.18 923.315 li
2553.18 855.562 li
2529.71 855.562 li
2529.71 923.315 li
2529.71 923.315 li
cp
ef
2559.8 923.315 mo
2583.27 923.315 li
2583.27 842.233 li
2559.8 842.233 li
2559.8 923.315 li
2559.8 923.315 li
cp
ef
2589.9 923.315 mo
2613.37 923.315 li
2613.37 812.889 li
2589.9 812.889 li
2589.9 923.315 li
2589.9 923.315 li
cp
ef
2619.99 923.315 mo
2643.46 923.315 li
2643.46 861.967 li
2619.99 861.967 li
2619.99 923.315 li
2619.99 923.315 li
cp
ef
2650.08 923.315 mo
2673.56 923.315 li
2673.56 872.636 li
2650.08 872.636 li
2650.08 923.315 li
2650.08 923.315 li
cp
ef
2680.18 923.315 mo
2703.65 923.315 li
2703.65 889.438 li
2680.18 889.438 li
2680.18 923.315 li
2680.18 923.315 li
cp
ef
2710.28 923.315 mo
2733.74 923.315 li
2733.74 911.575 li
2710.28 911.575 li
2710.28 923.315 li
2710.28 923.315 li
cp
ef
2740.37 923.315 mo
2763.84 923.315 li
2763.84 897.704 li
2740.37 897.704 li
2740.37 923.315 li
2740.37 923.315 li
cp
ef
666.732 825.817 mo
836.09 825.817 li
836.09 1027.08 li
666.732 1027.08 li
666.732 825.817 li
666.732 825.817 li
cp
1 1 1 rgb
ef
680.906 846.637 mo
821.916 846.637 li
821.916 994.388 li
680.906 994.388 li
680.906 846.637 li
680.906 846.637 li
cp
.901961 .901961 .901961 rgb
ef
792.049 846.637 mo
792.049 994.388 li
791.449 994.388 li
791.449 846.637 li
792.049 846.637 li
792.049 846.637 li
cp
775.996 846.637 mo
775.996 994.388 li
775.395 994.388 li
775.395 846.637 li
775.996 846.637 li
775.996 846.637 li
cp
759.942 846.637 mo
759.942 994.388 li
759.341 994.388 li
759.341 846.637 li
759.942 846.637 li
759.942 846.637 li
cp
743.888 846.637 mo
743.888 994.388 li
743.288 994.388 li
743.288 846.637 li
743.888 846.637 li
743.888 846.637 li
cp
727.833 846.637 mo
727.833 994.388 li
727.234 994.388 li
727.234 846.637 li
727.833 846.637 li
727.833 846.637 li
cp
711.78 846.637 mo
711.78 994.388 li
711.18 994.388 li
711.18 846.637 li
711.78 846.637 li
711.78 846.637 li
cp
695.726 846.637 mo
695.726 994.388 li
695.125 994.388 li
695.125 846.637 li
695.726 846.637 li
695.726 846.637 li
cp
808.103 846.637 mo
808.103 994.388 li
807.502 994.388 li
807.502 846.637 li
808.103 846.637 li
808.103 846.637 li
cp
0 0 0 rgb
f
680.906 879.636 mo
821.916 879.636 li
821.916 880.243 li
680.906 880.243 li
680.906 879.636 li
680.906 879.636 li
cp
680.906 895.689 mo
821.916 895.689 li
821.916 896.296 li
680.906 896.296 li
680.906 895.689 li
680.906 895.689 li
cp
680.906 911.743 mo
821.916 911.743 li
821.916 912.35 li
680.906 912.35 li
680.906 911.743 li
680.906 911.743 li
cp
680.906 927.797 mo
821.916 927.797 li
821.916 928.404 li
680.906 928.404 li
680.906 927.797 li
680.906 927.797 li
cp
680.906 943.851 mo
821.916 943.851 li
821.916 944.458 li
680.906 944.458 li
680.906 943.851 li
680.906 943.851 li
cp
680.906 959.904 mo
821.916 959.904 li
821.916 960.511 li
680.906 960.511 li
680.906 959.904 li
680.906 959.904 li
cp
680.906 975.958 mo
821.916 975.958 li
821.916 976.565 li
680.906 976.565 li
680.906 975.958 li
680.906 975.958 li
cp
680.906 863.582 mo
821.916 863.582 li
821.916 864.189 li
680.906 864.189 li
680.906 863.582 li
680.906 863.582 li
cp
f
694.493 944.109 mo
696.108 941.125 698.31 936.579 700.886 931.232 cv
710.011 912.324 723.908 883.549 733.769 878.835 cv
742.176 874.831 747.975 883.769 752.444 893.132 cv
753.374 895.069 754.285 897.123 755.143 899.06 cv
756.131 901.294 757.055 903.374 757.914 905.066 cv
758.909 907.016 760.593 911.123 762.75 916.354 cv
765.818 923.832 769.847 933.634 774.2 942.843 cv
781.53 958.341 789.679 972.097 795.226 969.475 cv
801.29 966.607 810.202 956.456 816.097 949.74 cv
818.48 947.028 820.385 944.858 821.451 943.915 cv
822.393 944.987 li
821.399 945.865 819.52 947.996 817.169 950.683 cv
811.196 957.489 802.162 967.77 795.833 970.766 cv
789.252 973.878 780.554 959.62 772.915 943.45 cv
768.569 934.268 764.52 924.4 761.433 916.896 cv
759.302 911.73 757.636 907.675 756.641 905.711 cv
755.757 903.955 754.827 901.863 753.839 899.628 cv
753.012 897.769 752.127 895.78 751.153 893.739 cv
746.994 885.021 741.667 876.639 734.382 880.126 cv
724.966 884.621 711.206 913.125 702.165 931.852 cv
699.569 937.225 697.36 941.81 695.752 944.793 cv
694.493 944.109 li
694.493 944.109 li
cp
1 0 0 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 16.0
%%AI8_CreatorVersion: 16.0.0
%%For: (\702\750\762\740\753\750\751 \702\750\752\762\756\760\756\742\750\767) ()
%%Title: (Coronavirus research, pandemic, epidemiology concept.eps)
%%CreationDate: 6/1/2020 7:23 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6f5bY"Q6<'f)o7"(kUj$PTdO:4^%VY$OMi:JJ,jhpDEfO]7LtYK$L%d0;Y2'<-Di&2oQ9=6:Ap=+>++,S4.+cD]/<T.GfeaO
%e#Zg2ll6sKYCG/1.^cbYqOcqLF,$3RPD,63MFL2pF`HW3Z*DQrEOk2s-=p.N9[-.@7[-UVqs,+g2H5&qa;CA=i1'Q=oCln.eimp$
%T?F?;Y$S4h>P"iLDl$WPYOi#p8u\k3[9ET/C;!esrd]4D[a^(AV-5M&S"HO#8sD(4[>NDMqKJe4ZN'n!<,U!Z1de!\q12!uCVasD
%1B(&9qSUl31nBlcD-/YhMSkAnDlgS&!j2+pad\oPs7<EYs5VH*r:;Rkq]C=ejl\l.r-s1pj_i50Til;]QC8mIHflm5\fu66>r<Ar
%g1gAh;(]3!">Wi*DC0PE?8D-[BX1rtrR4E:WFZd_OA_N"B-c#\1GNDb,7B51OO9#GUmj,haanU1f1Pj7o;TuTl)!1r+C/ck:F^iq
%`cW\]^jbiEa5>Efo;ku,_tGp%1Drm\l7_6K]\s8rXHj-VoRG9aaa9PDRW%:G+A9EEh6,7Co-qSK"jUtooNN2o?f[Cj1s35TqDg-N
%:(fDg=OAr6Jmq?n.'QEGOAi"^cn]8u'rD[fHO6G<P>?k,igA;53hH3lTYa"$nlDa7>KbP=2O]mI#=!;ZA[!8`V2XC0B3P?1aoN">
%G.D4%"`Q9,kJB&!ZZh#-(2>M5qBm=V$iaHb_u,%6ebU57lMNro@#47UhZbr#m+:3M8du"HqIQ9^1EI%,hsbT[=oWAUeR%Q/^J(fD
%e=Xl4=B;bu@S`n"POp7#pD*^t.9.9b1%4;KY<[6U!4T6Vh9)aD.kC*b(YJ1+r`;e0%gDrHn.>T"am_Cie!1UdX&/]$>cfr(Id>Tb
%WV2Ld-oDr8eoFkEeOn(#4m6r9_sjr;Im]\0s4(L"%:3#lT<?)TMU)4:QZ,=rB9KK9(hVX,r!KJR_'((-2W.i8r7n09W/nWGfFG&S
%8Z"P(Y4X+Qoh4T.km.,P@$4d,UYUfD;qOPNZ8\-0]@H]Zd<SU:(n</plT1!<<NU_Zg<C7(ROS9I*".U$q]31m\b=J:s859U]grOL
%s/K+LqhWm(8H<u*gZMMK>%rE5\jX7J2ep\P'F+i2_uV@?CM#rMY6;S($[*^u)SMp*"#8mW"-"e8*k4dq\#BE[`a2ak9LBTFX<#e-
%TUXi@pXEoj?L8ieP3cQ[6%dXA"U-(g`$&-"^o#RPJ;dkDqZ"SGm*5]=]u[0MQT,1ACk4G$IpG3EIBHPO<o0:A`d?fmYT&[/ikQ05
%ZAYb5I-h\F&hT+^\[dgp-=U*'6n/+@MACrY3#DOqZQ5gV@lq+9NahN/%MCB)FGi.N$jt(53i;g6[8>.p;MCGELpIXa*SKW::SmdV
%HYU%\e1<I-jVYgd8Gu_kJNfYdq6%*J9N6pVYUGh*_*Pr6LZ609NeP&\D]]3:\d!>DTg"!YkuJqik$h?6?J[Ei1Ggf>^K&IMl"5-S
%ofq!jYLG[NroWDDnair`^\r@a?2aHZ5Q0uas7m1=?iBAA\XQ3&pIh.?e1A7R;?::,Cqh6k%e,7Kk)64^'"/dtO,U4K&npMI9fFr6
%=Rd1nOsJQ("]84nCR8i3JnY,U)ud5S^\r\k5G^ak[?nJ8'2gJNn.:>N3F6)BV!OonL42^*5pOBVBU\u?f-]OOF]bYq8Pj$R3.+?4
%mP&F@+E@4$"ORd%p$`juXZNSif?i=smT*NYaFid]$%&L=*"iGKO=<FSe:1u9_dNJpYSm3_/42C(C'2J74_1Z!`%1blnr1S&WVIKO
%\D5ip#?*SBnNq!]c_&`+FI3/bd&]?X\'(Glc;Ni5B!_+_3m<+dEV4[-Y>ektjVmS6V6X;*.f1t"B`Eg1*'Kl5YI,F#/N$`?5eJHu
%6g`.QpX`=9g[:"2=s4o%5l&&7?VS`@kJ)=>e`sP_&h$cGcQD886t!=3cMetFpf&E'TU98RJ28S7p-.jj_+*8:#Dj/n"%A.Q8hs4B
%8l*uX,0EGsdf78uTmNXjs(cY`J:7G7#`nk1rbf.0T76k7pUd0`I&hqs(s5[J_rR3]00qP$TKh.Vrb[d<lh+&'!;ugt^r]g2b4E@g
%2D,;fONJW29@\hM^R$Hhmtp8SmeV^sh3)K@)>L,LmdO#;QhGd#%J$*?M#CI"fsol:3>oO0;0HLSR,bXJ>G?!5p'97d*7K5I*jqW<
%H5j5Mh=>?NKe3sTYOeSTN']h#ntc9@HnJ>E_&l%>!($@7=N>'b?$ZNOCB08Iqd.Lf$hou5_Dt]dfjLfADjV4oMJ=WPUoBf9EA)[)
%VJY$R+$n6_&YA%_>^bItAUCVEQo1QdMCMOp=0Eua5HmV&It)rB5<6G_44\!Aicnfp<Y*fPkA.J/]j8KD[^Pm*7/fI0OMpLH[:ZtV
%7Zl@H7E*#/9f'bQ/t/:L+4_sM2?A;jE\0DlC!DgEZl7KCDgS>CLUFads4bl7rqtrorJ.$FnFQ\Vq9M;*iG\a3$6&oiTDo&/rqjJ/
%LVNf6.1*G1<i\@#WE;6+REW)n3*\PRV4a*T@cspS90=h.:[?&;F_nUDoi;6?7ZSk!UiGM.,TfBqQGsd"<bnhjI]Aa'0DY0Sl+?4<
%q<\:DI0f%FLaLkSU/?5^EPTaEqCK$<r0+T.osVVBWEQQOUMb)AQUW:=gD&N:>d$%k#dfk#qek"aa/)hKN$3KHW,#V3R'J+dohhbS
%J(26fWAbSdM!A2YeM2h-on;:@38r0>Au\^CPaeXQjn$)V=R>'@fVQM0R!Qcr*hS\6%ddl-enUG"OZ`XJl`.V5GkO=#8WetYd8Elb
%7;oGZh%Uj`fjP2UWlf($=4+^9fY6c2`--=T+DS2*gKcDGEirC=[F@6W^a4;enuu87Q(,OS;lA_A[jdbFHE'ppmGE:2J3)H!C<?]P
%m?VL*hkdf&lEK-L0kKp1`K%$1#Rk6Id7tH5Z;M9VVir`X;`YWccG_Ghk2o61J6B73G08'5<81;9OR8<;ml'_M$Ds=E0`Hq\G[<E*
%DE!(I@U@KRK+WgeX1b5S]f,U8V8/mu9%?i,3=,KLG8f$me:0&/)]1VL`Ot_GXY^"cck5h]^k+KZ&Ct_E?.8W'>^8Du;YG'gB$Z2>
%_h=tKlbR6Rf_=%<6jN^B*=j'bB*Z<g26q;.oNY_']iE7\h,1THk\Yu*"k2r@]g/s4?0>^j?o/Ro;`ad45@HmHHIt`Qi3h`G[2]9p
%b]gG'CZnA][plaODn:ublJ/AFlSrDO-94idkWM[4PJj[/isE9JWu@iY7eH@^?UR\&Yq^$BI;P8(Z25^q`Nq-VZu<*PXh*2$."5XG
%*1.PnoMYJ^S!Z6<YALk!'N3$G:BN.,+0,BU?EM`"WE-W6s0/UU+f9H&,XOatc.04$CKFE,Pa#AFM+5@hnE76TN(<Ldb4g"L'X\@J
%h(G\rZ*m[1Y#[-bE"5583Pn^Ac#]o(eKa8iFM\[i60N;pW`<6k0YEmT%7LJe+H'G$=L`1k%5$UCHe':\Aa,KO8uofs06.g=5LRdZ
%r5]c?[,1;R5;>fPL0,g5h(sqc_^If_6f9ADOOQu^+X@Y&\ceg=]PQ,)b'uT(5M'[(?+s:>1g=r5&Y_[`=P.uoQMNaXH_?tVfcHjY
%Quu\.Gg&-<i$g>;X3^J$9DKmL(eSB6lYZ*3MmMf&hIIL&>P[/VT9N5]'h.AK?B0df'XG;-A9Ep'j6!g-@LdOd*7r;m4ZZ_9hZM/9
%:I:JTVq\2gNSSn.ojN/]QK;ALf)5rRVsf1D^\kbZp;5c[(D+UCE?Jk'-A4,>*"QRu^CVg":'nb\7uYgTbuCh5./Ko8NV%I;7G&ZO
%(m8lHSTVTBfcTmb9EP\YYa42E$g[#3;jXN7Qu9$e9&g49qVgIPrdN*ICo::Q,rT8EK&p0YptfPZQcT2YAb1)O/aFEY>`[XO#k@<Y
%'BVKU&BY;&DX/e?)&mLd+.9$A\bo?TIEaGV\#%oJC.=9d?YVDR'eKC-1gTC;TnjRRMsg&%@.NL\rq$0ggV<X]Q_49arr!KVgAUX#
%rhlCgR/6WNT_T[Yro;?)q"$0.gL#I0k@b^m">p]uFtVbl41R^NiOq@9[>;ZaDI#A63.J]'F/Np:,)X4LQZB.t<c`V]UaS'Gij"$T
%0r\ga[F/L5"_201WRCbs23K3!pL$&V?>X:<iUrQjTF1dK[aCui[3=mOo;*fcHF2V+#Bk%"AAD*Z8kBgm_g9#uj*n0js3;gMODYNq
%P)Vj<ReSHJNJtN6Q(T?/U"rmcPhVtPG5O40Vlf,Op%c'&:;o7Wf/f-jJ#>3gM/Ke;a=cGmWhi/dE:Alb)^(_QY$paS?[_A+f#$M%
%A@P>3=aH6h=H^<"<7%eT*W!oLC+(`a.DMSspG&]+`=q-hlh&u62ra\,aK9tPM<fpl3iZ&8VA2!B\p'c=buW>VHGrYp'_:=ug[9L/
%F`n.m?l=[SW=%=fOp&IhPpGS[?:b]>^"1o*QYHq!A=XX`f6T$3*Fce7pQJ=JEmSO.@(X1>X&0,Uaui[#Z&%gH/&.?S6+i:cW%!<N
%h29#llj.X2(,K,o`:6In#(noXFDSX#]llCC>1fn27d!SWf&rQ#i-;tRHB9uYF!K^fT%!7^\i#t+h`SjXK"A[=F:IKU7Ae69(5-U$
%8*4'7kmAUgH<0[:Q+SG?8C)VB3JuinO&jd#;id8`gC4#UpKX3cBDD:h'^:_Z2`CX%IrLZu7'UME0h,FL-,,X0\59Zdn(Mgs(9pWi
%_R)$H7\\7&,n-bK79NO<NCg0!1&gFg]d@fC0Paum`Ij012;([Z:2ZUBi0OuhI865t"@9ShMI%9]f4_a<aWU6j3e;<PG"3PS4'</l
%kKi%[N&OhaHMcMVh@d&%O#7QW#d4[4DO'hdkB6\Y:8_\bEX/:-enRX)'b&AC)0as8K9!KHm4)i^)!NCWfS2j(;W3!#"W..cH)^=c
%#ZRoP?WZ86q="fDSQ>m'2V:d0LlS&$!aOl)W-.E,^X0,@NNf#E[\@:1`p,L+:Ih2LRf.#&B=HjgFp=p@R/*uWkAp7"gjC^.4[!dr
%k"XTDQ<qr;Ts$tj5]^ILRD$"dY,8TRH]%so*H-5d@P4L[-Y'>+R*C@O8$qj#rhn#`91ON3UL1,;O=G9KqR*s@3)aNjbA/+.R8+i^
%X-h:9-\n1""a%6Tlf$2D=a].F6Jp&A8T&=e;"J7o%2sM(=aee4<mI>C6?ZsZDJ&"D/`Uc4Z?S2ZgCK>2hrqn.]Q2_4cbGnf+.FLq
%9;VQeE4'LHQ"H>B[J0<X]Xa8ub>'%p2!LFiO2^b@rjA/cIBUGma4F"2k'R(Q4hGp+:X9>oP)rt\R\]c0FDgA7Bh>Ei=C(nn=ZL_3
%QIcT!d&se&lc$ET@U6a1KbrpOYk_,@_)0F!o$Z"@Ch%sAFiS;M)k2a%R:?+u3A34-YD)msn`mKk['oTX:9Wn>5)h\Yh<#8^Ck'^,
%P+FhOhb)34F%1K<3HKfL19dmBSpbi\do2NmC3lnn?GXl\\MpG1*Xc-4jOg&mD4U.XENBMr@+PTIOejR^JTe``g1S1j2g8K1N]bO)
%q4[\ti&[@:V&L^*mi((>b8]\c#HjJ2bLh>ZV!kA)-YV23$8:F@H2"fVXiok_<.5@El<,6[)d],H<edIHBm<>tBHFZq]fX^6cE&^Z
%DdrB1rb.&2qUiIXC7g4(RX<JC964"XXG?p0j$F1/m\XHRXaL>u\i;h/RM`.cJnAkK5A!A4T14l[Bi][@Y).k,Yd,*$X#;_J/A.Ff
%ZRT%c6Lf0r-tlYKVDVUpb`<cDp5Xd6.r:0oG=-#6f\TX%_B=6W]R?*SEE4UtmKE+MKfl6@-f@^qhJopoUW\&9_he]W\LONR7[7Qh
%,'te!ZP%O9[-jB,k>-d.;k:8?5H&3JDqVp/n)mI?6YFrUY9su?.nnum(lfAF[5C1t$D-oe^K3&FG@uP?D+uQgM*\Jb1bc324uKTO
%h?_gf*po4h1kknD=bhoRqWRIIF:^:0:qXCjd]CB\rS,jl`]e-a\Zf40_T(s&H17mS_V.D';SVeIC@SZCHXq;RDte!adRQDMqo[>=
%S$d54;=r(Y]dW74F!Amjh(e5-\P=CXe%inJ_nY$`S*NtnXP/L0nP["1Rl)kc:#DAQ=`G?<n^c=ilAt*,ET!oG$PRREX?5MW=U:Gg
%Akk=2Ql<tY!k5eJ=l-p(Ssg(XomEM-(-:d'q[mJ[cE&i3T6N^_he=VGcakWfSJ>3BQ\&jeC_)<HHN(-'gh+,_i-#WaMj9i\n>pu[
%KnoQ#]=Yj]mg_OiI'^+mpr#D"e<aXcXLEq'f;d+"cas.OnTeL\Eo=#0>B@lZ6atei4./Zqb^+CY'Ioa0J[69lF2R7m]=A!e3r_XT
%U0)IreG"Up^h8(YVgQE=FhM"JVHKaPjiL6c??_+Dl1m3,Fga[.4T+u+Bu\-ZLJsRbWTiT(Xnqf*T=)?fj4e>fK`;aUFo=qfnhS2;
%B'X7nNO*51<nr\(6Z((NgWd-SZd(+<%Von3'ldm31TU@9gJIScBi]M$5.BRCFd*"pl)BCN$i]NOf?/4DNORAcDQNi)?g"c@+(]g2
%*j1hO:RSjGQQ@uub+W^ENSi@NSIWB3=%D95H.^SieB,FWSm$^G(ib!ejE3G;nX8/LJ,5qAqjqPWpgC5:ojRWff%u08/b0>8THA'r
%hhF<PV!6p[n>G`Oq[)Gb+)'BLRP]Kl*;]O"9Pm3*J,49V\e+Lu!DOLn(k-qf%!g[]*8b!`CU'e@'47VTn?\P*_@QWF*1lmhIG-la
%fg#r/E1W],oZr&c(Lp7oFSO>>r;;`LZkI,6A,#h5kj(IeLQ0R*V]Y*MqGGU<$YZ.S`T@!$f3uQe$YnnSD+RmE%"7tWHTKi>!8;[D
%I-Yr:oP%`Nn#7<'FB_od(*e@<QBk"<k!NHV2hf,s['f5qaT^SNRF@q^$@eMf/9[-<k3:pGoNG&r,2VS3'h_O:HFe.1HJj5Z`gb.r
%bfrlF8@+_oaZ9'agNY54W"I%=e/h'M31$5k2QsnYrc*f[1>#W$cfU:0pu;G.SiKEC3]@lnZf)R`Nn5j0g)QD*Q4E)fE"L(F!b6LD
%7Uk9SAB#/tD_A'4mMWD=YV\#JM*lnY"EV:0g(TKW.n`Z:^upF[BFi@5=LWY.R76B--tH@qAE9gh^%(:fcGV,^Y<uq+On;!LSQ.)P
%m[jX,C=*KJd-%(hiiFg$=d>1Jf<!!kqMB"=QgsSXB@bYTHhl<r$ckLS07St1hH7+%<'@Q_?%pQ2&71NOB!kT\1+hk[b!$rCBlP4M
%ld];9?AFFj`N'Ak[nESekcAH$]EccoR*GiZb,dIhG]t>GaJ>_ecAG6:WTRO0VDUU:At]2Q@Cb]jcfhO5hu3:^/[h90no\<L4Rb%o
%OKRk1a$.d0em[1>CGRRJQ:&KLPFl15&4hH5GE_e1!9RhBim>u?fuhD6XRfr41&5k4>ls*D!k9jAVA:+'D\EVbCi5:4TLCE$)`N'#
%@&3p"/_`agCC/1<1&b[+YKgc'jk?0>=Uo7cWPQ/j4DVk8f<ar-r0[HCfOoGJ(YOAq5EF90\2X>q]j`Silk'.97s"-Gg&_hl#^i5W
%,A'N.]>3W_^9F`"NR89Tb_rtgI@+5)CP$9qZ6$_-!/(#XV25pqbAm"GS=9Y+l0`nH`rUQAeF<cN]2If5./tXA=--1]6i%CAL*pZo
%`ZO5s]u0*]*MQ;V(4(^GYU;M%4N"`@;.JS(LE`"YF#7l_rC8S[Zm7WG0^%X$IH/r!m8l..OkD"65%mXA4]7B&$NRi8okSW\7sK<i
%d$2G%/6r6VFC4O/YMAH#'Q1CKDA^68[__CJi,N3o+lKscfFSNqc>6pTrSZV?*Q4MiHSst4:H&pt-;S[]"`EbN:S.9:FL*uQjns3R
%)V0!g)a!)io&GhNjCaYBX*g9Pk:"].o*%%sH+iYuTs].0>(fV/5%aCG2%C#,b_I1gCdTb5:2Ir/@0g7S)@d]0'K4Y=qTP+V5rM&n
%pF$m&U2MI#B9R-g0*+glWWAr*&G7b*A@D\D)SZ-04O"IXp.V!q+#hbgGc[VA4b-7%(3W#?eN-V+!CuF"^H3%'<5`Ku/C?W7_3)D^
%f@jUkm>\o8/T3bZK!pLA%38K'Er.EBTq+Ulb=q*(]PN6.4eeDW7MLg8+%@b[8I/<B*U2fKAC,=6g6%Q@J&l%G]R_cioI7758X3DW
%HJ.e.D82I4B`Nc+=WF]Jp<%R"RLYARE^J@<nT(jFL$O'YnKg4`F4>+?FD)W@(4kWWCXJ"\4%$C+OrWN%iFb@li>0j$g.?-XpuRVj
%S>Z$7g/YMBdj<@M'YZ2Np<Xcrd+mEY(SEWJW==0[_n'\<qtZ@EXEC9uDg#VB*f'9moum)O;SslL4PMC(K-S_8bHK:rjtsOQNb;UJ
%i;`k[Lc`4?!>Mm\9Gq!J)BS>\5g(``;MT=,8'qTC)E6^06d//9)H][R.kl>s&c@0O9bO[T[Ee2@_GuW@GR!(^*bRh#kh@H\]Pi2m
%ij.-elphg3Fkl#tcB-I[lRClbK>VV3M"l[;B8V0CQFtQF5#;iT\3F57"KB=3JFO]E(9&Na=O#f?)N"+p,\@4(mBILpN#U6?=i",t
%XMDS<Y?q8f3RL"JK;%_\*eNL5%sc&Lr?#5\<kLu-6ekDk1$75"iNBSNh"/p-\m%WI:r0b+0R._:HE`_\&\J1$4VT+X6@7YP-$FR`
%r5a2@IG7QaJS(Fm(DZ(+!TY9hfBKO,3-&::&+>AggDlj??KFB+RH!buL2Ch&T?V@AY`4JPHa-UmPTs^-h#@">C=sst@soN-BL%;*
%WQ-U$&UM&Vd.ZBCqV9(-o9Bh?6"2D]2K@S>+&`0G5=Fg*!,2`>jC/H;Q\8Gb?N'$^Bl6WaO<KJ\0j`,]ERa>O\k)n9q4k4YjZ%;.
%p2u+H7X=)hT86!q(qI`PB#cPCHeR7SkiVANP&[Fk%Wf2hFE\mMA&g51HeMBO.g*]&K9<6Cj_RWXSeZM!XuU;>r%@u?e6INa/bu+Q
%3glFpnZE1B7L8Dig8=d;@BTg$KB6X,\B8Z`0R2WE-iQqSDrQhWl7gqb]X0Xt-OFt@TojR4KK+ASl:ZuC%PLci-:N;#`N_8eP`[!l
%$6[<\;7LWc0i/s3%VHLJ$Zms.6V$`;)8fI76u`^<A!ihZC8*`2V@B@E/%h=t:R7b,g$ZgTYjI:B8XV1UKqZlk;4],,9aF!OK'&3N
%Xn=F!_;/9:1G1J`0D-LoYZ^p^4.CIPn+*P%mcJ`M_e9/4DJ'H'lU-4iLNZS`(<m$@n-6\a(^bLnBtXujc.s?l&3nMAU:<$V6pta4
%IF8T.AHOC&HY>T)S&M1/@3ntX10AbZH"9sY,?R>S??L)UL2qXeke`F-,(>1`)l`,=g2%6IrZIY(-K_goBnb=5FPf-o[BQ^jLa[.-
%_t*B27uQ,G2L'J\S>fiI"-2BgqE7TpmKSQmWpku\RK,\WF^!Y8/8'G&3]^@_WNZ1hMt22uk,1Yi8(cdZ?Tpg2>VlUe7UZr*=;j@5
%bW4n4.(m20N:tSPnd<EV9M6QO09R73N'i@Eb3`:)g4'@rK9NX=l$K(:iL!HCd6J#Gs%'Ca"8/epj![41dI@Td-Qd9AU?JjL3-%Mj
%UjRRRN&kHQ2i3922PK\]IPP>tQ]p,8]RQ4OpX"jY(,n';oE.$(>m:nOc]V$ukEfI'_>J+9l23:KS]<L*$YYBQ4l-0me'%rWHY==&
%LpdC.4jPHBMZaN!>#mts#UV=1R%cFI>\:-+;WT[mMse`HPL_Bo^*Bp_PGH3D(D\&X+JZ.K3hsWZ!N,SMB^t&R,dAF2$DrqU(Nss,
%JBPK^T$.]c(0L&IkX,tEJ.3628RFnuqKgL4d@)>1KY>PS>=QGhJ6Q(KC4V+p_Zcu\YP"3QWuX@-:VP&TanJoU=%HN?B-1hq/KY;`
%6'Ut0fCHa7K.6!LR+5-Ya'!'Tja>I`I(5YsPk-Vu$`iBq%$/-Gq4_[#L3VrlhrT6:ZeDg76U@Q,]p/+WfCBAR?Q&+;S1hI>Doeop
%l`Zg3\sAD%g*"Q6r7oGaJ/o9sm(T!n;ms6CT:%J]X;L2@U)7NU]</[68gKiP3f1k_XGA`&-"es`#te^%\ufEl18?>S+k70dbklPC
%=AX]#`]&05r7fm84bCi>OQt&hB5hlF/Y^1#g4Qj8H#-,LPL1+Z/5h9MJNq<?K>FR\/?]Q\-6Y,qb]U<\GPn>Em*=q\$3P\RR^2q.
%8hY_XCPm7V74g$sIa8oW^3G]I>!1XWr0c>Gq[&\,52/i$@M55=''a9#E"FC92]''O0,Y+q?G2dHl+?:7.,hJ@ZFb#F91$lO/A(5c
%ZXjrqAYUf./mo?a?fJ@h]EfNeW"_Q+`=gle%:<;UUY$IVH'5o$coiP-/etuWNe<Db8Iitn[%3:ae\.9'p\Zn1d>g,>!b"7mJ6,-H
%4Fs9PE\uK:HMPHlpcL%qqUpDAEJE*N!Q3El\9]u=0j:M.jsn)9>Z:D<-_\,N.=@#U^DZS:\AE%BL8-Nm'7;[TZ_mJZYViPo/%lQq
%<Q/M*GE\?^ZJkJ&#3^o#c`lYY4i=\Q/k1aT5mlrt`5tK,/('2WQnQ+0UW(n0ag^O0A-W.BkebkfJJS!fL,bk%b'2DiYNEKC<1BTC
%4%[t-].*lq`<jXM;!pj*m1%_jb_R.s@lS'4O4(^t59>H5gmtL[3A>gLD:@e\%fAAKD%DA]&]Z:\#4OF<\'=,4\[[^4Mitc6MO!s8
%H4Z6C7%micMsZ[R,Jl\aAE8HuT&C6;/(Y5fklb,lYbbHZpNR,k8dOSDK?;/?TOAj?2l:85XcX.dOU)t+!Yo">k@$VCp(s!HWp<jU
%:`8/UT!h)")%c38f^dF=TUqGX<!dt=4sdit*uZZ^Z@fsqa)87?+VQIY?qjON27XBcUIsLVo%lbNq^DUK<I?B9e?ZaDRnTaSk&WW6
%HP;-J+l8^U*kaKrAg?`&%`Wi?O3VCX'6uSNG]1"qP+2Yb9Fd_EET?OE,/Tqa*\Q;r_p[K&lJ_U5hGEFjr)*_"Ru$@&ToP$.W$E94
%)"c6__F,,C8Gc"h=&.M%=-;?r.ufNdUkd_Ib`GoOAk)X8LrN2Oqo>$'PL-<1Tp)FBeTUs\$#/&Ir++]S,>Hh8"aWF5/7T(^76+Sh
%C#Vb_qYoha@u&KX]#`8.40!CE6=@)57>+B"`N1+:C+%GN)I)CfcNQFQ"_8X,`od'C7?<^Z*VN3Z9_'5So>78""0KeBC&4rmNN^Q!
%>3""CAY)i\i@3(<\TT9p1+t&"0Rf[tF)sECF]M6ri6&\8XE+r<H&ar<H_!]Zb.OFdhb<:81,%j-I[$`8?(!Y4r><4J^=7@3L_nPM
%T^X&b?..r"/+akEk/>[D9tbWTK(F;_eB>A=1H>a!!C<n;eKEJ3F4"3k4:O.%Y=bAW,tRgrDn6p%0El$T*YE-mGP-AadaPGG0AM-0
%D2L2#ACE_OjEb"R@3hYho2%MqaSYM/fRg+EUV/rg8/uJCWR+]U,/ufHFTcq%K/-2%cOJr6a1QLK+&`]9KT'<'E&-upGK15Y,j@P]
%lTD`Ami?V;D!q2WZ/t37Ai-\YHYU"<jb5""*jaT7/FFud$U'6$@2R,8])HYhA<C\Bp`ZlI[>,sZddU2.A"b+P.b_8?(f6@]mFNJ<
%A9!ib'Zjh?g-CO+EM3;hA9!io,2'12?,r:o?$'3-SeMH>SZsV;?@&+LTZ>5h2cplq^&8Z,"cB_((Zg@Cbs73XL7E2=-Sb+;/]nG%
%g7XApP1lLU(?H#(P'C..']jHa=nGg\(TfF'_F.LS'crn0md'U-?d;)1@&<`5^HfEQ(\+2PbLiHuNgAlj@psY<*j7VbesB%Y%5cE*
%P9Zf!nW=-XV+^B5\.L7Z)'U])>#@#IjKa@T*ji$'cu8\)8U#<hMr*,MHF"c_.Jt1L#1;ObpPnH`koi:^nm*Z4UT=..e)eKaC:69f
%/"Wp-=*+t#rjpH]?/*k([r^l'k?Mmf]7\]fS2;eU1fj#5gi=3r[jWf%!,aN>'7Q@?EAW1/F$b2rmM;B)p=t+4f<"97o[mWa*`dH.
%)--%T)D8a7h1Xc<]/s:/0D<;Qa@fsJ5"6@cD9SEN=oB/Lc-Nc`=oDoUGWWB_iM4!pD2@"H3#P_>-Y>\XSQT4m$nM&#7Rk,!n([>@
%^T3j&!k?RT@__d(C!`qKeie`!jnG+G@_Zq_@H5aHpoK2JRglj7jp1Hj9jW&MS+W]^Tn%%Vr:Cpup\>pG#k#9cBLq6.2nC)*_oj\D
%=][4LGI7E&eY;!]GL\?SUV6rAl;$_@GgF3"XWok+E4d6_#K#d4OqdI4qHgkY_%M$kf2qUM'!KFSjneb2Y-+t[$W;qooGlrbH9i1,
%a/!4Z0:rqXTp_9Rk1Sf/gpZ3>4eqJ_lg\T#TV2WW]p_[!a:N^G$>DDhRg`P&bj>a7CNA_Bq/2BS,M(ps3;5d!)s*I1R%1fm:[uD3
%$N#F@fFa#)^T]AiWm@`G&#?E_a?O;$!Wt"?$``K5"hb+?fG>.o*+WJb.-hjh@:+NPm_jg-6+0>r6MFX8k><4D<M,<[%&0sZW2_M4
%g%8@u(M$h+.>ia.ljKiYF/$/H/*u:7USk-<:@0',@:)i2T?Ck'W5?9A'5$\#JJRs5KNACafGCnAb;D,l_S2[!FJi:OW3@qRW\6hm
%lD:^<BW.V3\f<<9YV0^p\Bi#Us%nOH!s;`6ZIgbU&et%^!OR:_qgtjEGR/5LKmc6eI7(ge#kh3L(GnBB`Cdn!I4i=f_3WH*Q/2oG
%K(S?%?i481lasASW2e11c819n^7\DF+s$h:luR*tWp35jH\Oj4@Jrti+MZOF^7[%eq7kkF<FMMD9bB;C:dgGIf1$1)h>Z&!qTZ!!
%1MSH.)UDq/@0j6PelNjE]8n*&(;CEGA'h^[-,1rSp(kE=`H1F7$"(tpYFs%IUU?)3NrVURDs&^3k]T\/7?HR3^SLP"STjaM,kr_k
%<NK6Zs%HY8ZGP'H\m#iq9siA+Ljs_FVA4*_j`@`NULqEI$ZtMh-#oDsF89/GLYa*)pWl(54+Pn'emme&J'#ADI9lj8cqW$gIu-gp
%_CklS1*=*ZbQ!<ET.pVcs0"LK?,5QO6-b^*fe$K8rb"mMaSZ#8iMZIort9h9Y-HHb.o0J3'?>LkVWTeVSHQo+:(C6^7c)e^-iMph
%B\;4j<8TQ]U$7QmA9UsH?Z1']6b]kSZ+d8ZGCn703i$C4fO/`0*!L\PeA;hN&O;21E0?JC0h`OSn5hL+VdQ:+H4pI@2@_r5m$f%(
%eRB0<]1KD^d1YP)-VLk!d?5c;8*@5m(E?*lB"(i\3gf%OW:*&[)MQAM#hGD_T^WAlmd?/V`''VXefBnUXnFpJk@'JEK]YRKh@PGL
%d/0>07!AefYhgXac$-unBQi<J6>3riblG/gjli/%m^2ns0!P)2(NbmL%A5Dps&nNXDa,MMU4CX7UC/ig\_Idg*@;%Oa5(QF/,)F0
%'k/LATbr[$BaG%0pOZfnAS;XI0jo4l7;;P"Pkb$)]_'k$9mqK.K*WctMPBDLMAZd*]_$G4(jbi1qr`#3G?:`/r8'YRRW*QmaM!'c
%iXpY4?T7ToId^W&Wd5c]rqUBVcE$tk,,:0Fs+^B[5d1WS4%rY`YPsH!G]n)qh[mC$.K#+f0r+OP2aZs2MbWA+=RCGISN<%'Vqlgp
%U\smA%7V:9[I<Kaa0c.8?:^FXIea9<+P&XB%A7AU7`c&]UPf>60sYWa@-g.,fiL)tm)[oF\b_oR+rH^SfmWPlr8_Z!4jHk"/#Ir>
%#8>MFAQORb_/;>QA_MR2R[L[Ib''c$:;a8.lRH:r6hrl0SNojE%<idD$$f#83k[eZ-2@CD1>DCUBe<=a+k8q9<:[>/\uWHVm(SQr
%LoS2,Q,\>M5>o0qQPuVHK@jBVf7,9B"\lQ9DfBj.=.p3J7o)caGC.m==1,oYl8[K?0#P%L&0+O&D(_"]%0/EM$Lr8J*N:'QB[O)^
%c?(+2ec7>?jR+3SM-ZZq'*JP5-cF`Nc)&neLR;;lDI;Hpb1e<>Q'mibV>B52#/>!pZ9#nHgZ",JYrnOhJr&3u*hZYcGY/&3=,u+C
%H7JMi,Ni-`DU4XCC:a5rc'>IfDobot'j_O*r-k.P6Y@-k_K8lpU,Fd,+&C^<9O)MlfPPm/j)D7HLX3OdEdd)>PmINXC:^OFbZi`M
%FAic/EeeCSAR9.=+)e`s]4G?sjj`A69f8_9DCY2q^665<OX7p!5i,X+%%1*7),p8#O("<!%hZ-cN+u\1n_a@j1iaTlX0Ln<p%6RV
%m$j:'EnG'<EumM\Tl=')*pk@>S[Et--)'5F93GUd%^aNaE_].ZV!p?,^QtN7!c>[./i\Fr2L_Lto-!CE:Ok.D7G(]0&"=k=cigkY
%;r2Ik5&#3&:kEK=QD3]G3h.W"ogdd]aEO&^'u$PM@,ft'lU*I"l`44FkHBYS2B@8)A;ONAV-5;4P9sPSJEeC,_/1TGH!Gs>Xi0=@
%1!-([Yf[m,*Arbu+H@rP9UGoo)]fU7l:;$CISDX.ec9lW"r=VD@-;P`FAn7A!TV?0\mWFr\dGpidpCU*khA%5RCFsG<e@hk9RU+n
%YBH/bUp7_9\X4)#+<*>"faPYJI:$rPJDU6=?%)>t_OjjG7/Zqr5TXVmlg1U([#s;4\h$r'".NW!RQuPO-T%BXUn[W/[6sk(^O^dr
%\i<5R\lA%QLE%3W^tQO/rMqH(6)b\4,O"iJ8RD.Lo%!8AL_$9FG7aLRB*\=FN;Q@Rr0JrsFbt,7>i5nn-G[91`)bbCXeml&Y0t97
%T4/)0Z]"\8CD'Y'Z`NX?JHSDu*g\?Aoj`)/[ADa,,RY:Y>aH:W!>lbjaE>a&e7d7]5fYKna=3:kd5l2tmWG"iER2?gMlS2i$>;.+
%cn9kb'*7K8S%Hg[37'^dQpWI^XtCW7bF9PF&sLlkHHEMZP/PX7"P4lE<V<Lf&gO.'$2r5-8eR?=,MGUqf4/oFd9ppn<T91[V"KNZ
%h1UZS@(FYO7>$0>1O2Q$dX&hWQ?5Md@a]S@\.Dtg8`D4(:?T@hQPK'b85I@Fmr2E<4@7(&O!VE>E%(.,)2#K$O>EB.htaQE?S_!:
%F]i./,sCJ8$G1?5omU'&OT0*8^X$JF?Es49>uhfD5U?T!(84gYEY<cMWk/WL]DS[/Y887k\Q.g0LI%=W4^E:LSK_chk^G0IN834L
%!-4a@#P;#s6l-oaJ(89V(EQ''Fu[u?]k8Eu)#cqbShE27dcR+T%c&jk^+MNiJM5ri_kCBDb.>oU%.c`,IGnW,D21K,hs\Z?4RCPK
%RInA6kQ4"-blB@YN%Pc7Qjap`iF1_lci,OZoT2L3`D/*RpMf)b;a_HJq',L=DD"&150Z@iVO%Z$__S4DD21\l"Gn`nN#$o"e#q^`
%4RD(!_S.Pk6Z5%+$E.1pl,(@%;$&MaHFrZ#BG?5c7gH`=\F;0QlQ!isLXFX,gj.fWKnn&Y$>sI.U\0#n@0\VP[iIr1N@WKlGN!!&
%D21;jXihFIZ_VpG:gA;$@-UH<krGu2Mr<>"]B95=(EQ&H"s%;TY885aN%u?1!o74.(d1K%.7lH7*_,%1(_nLdY2l;sFk\)"B`km7
%0`&4FbJ*6<_S^97is&QamCqsA0i*_>n?>\g4m@ZUM=)hZs2)\;gCBF:\1nd@G'QklY887+8+D)30VgD"q[3peS8[53"=VZOLXB]m
%9f%S5&#4&)N&,I;Qg.)tFu\Qokddl)&%h_o<6l@%qMHMG+gI^^CN2Eg4RBHk\'#-i,=W9#YPQQ.Z7\6JnUpF$*@h/fmgBX>I3lW-
%$P0#g?s[Hoa+]:7ASdA](*qIW]'qE-]'"pmrEjddD;BDtB<N*m"p$;i_IXN"*[\9Xqn2DP=c-\G(ERa5N1Sc6SS@r5nBaAS^tT?)
%#r)<`GSj_^lU5ai]^RU9io:5H?Pac0(ZtI)p9**D/j,)Q9FSmfdO=X>LXERO%^Bp]ombqo[AMk+>omGCrlZqI!*O:^.P"U2eA5:N
%0=*9L]Q\`DP1mc_TiSo-;!/j^!HjVjXC>RW>[GTH%2T-/WZ7XHdO3Te1N`p\6M@(RfdFK%0j&X(c)0!::P5%f:=%_^NsaR`&"RjZ
%Wil!XhXX]:R&m-jcSl;%DSC%!C@?39c9+.WSt,\JRTTSn(H11Ef1*Kgf<t6fks^?a*`kjkL$unRhSIgKqXniNUT59og"7f]Ap,rS
%[(<lC4K]cUS?9GoltI:)Vr`@"l[6#93dS%hV<!+7T,saLqI@7NGZc]'9\-p!oWPO^C/*GY?gOsiN67>'g=Y`9f%/@FqoFap^Fdd\
%q,43Vo%E9LGrda&^RCJF^<U@,jb[!2\A#:%'ORKAKahns\Cl6d-^u^J!pQR>Ej%X6e>Jd'].WVqAgofcOcak4@B0Cs8%.*^XlBk<
%k"'Fkfi.@NE4u-VY!!jaOCb"?S?p&t2SU?QZ0A[Hh<c>0&O^$EmI=de*_f/momO,&;*Gs[^HPpEXYmG02WKtkp,u<%8\\YYlaBfr
%Rf8mq./TAC[o]=3an/d,oQ3bD/\aR*@GS!/2gf-=RlehSmT@XCc(q9'!`39E6,6UR2Q%$BH+R?]:-VM]6D8L`fArL^M)i8LS^*Uh
%D&*'"pZ7^7>gT*`H=;(4[EaX%kIfTu+83YCp*io6q3Nr@]52ReSGCO:b4=hHF^[5bU`HUdeot>63u8\D1PPGD:&GI/ITXj&;=Q4/
%!\CBR:!3VbAD<<8l1!&3*'1-4-EQ+C8b,%IJFjcXWD?H$12rqh#5l"g97MPD]4o-S\W$2b0j?2"HNjni.Epjca3\!?:2XrdM6dla
%&(XX&VW\nI@(&`%K,OE9h3hpQ_4:D=]jA,hA:;o`Ec:Y-dIkr-qA7^Blqb7Jc6f0bcMOs9#B.bCr?+Io5`2&+Wrb3e8&```U5[Dd
%c65-l,_QFgWRNhIPu:WsZ@G#=NB,0jGdoVD&]=?"k>@#H)<sPFq!dIO+PjGs`$+sor<p&=Z>nuk;a=`\>+-AS9[O.RfrH\c#FHhc
%0(<#I%Pfl#]Pbg16MZ)q2>=6g&([f$LuC*^E(a^UJi:S;o8A"Z1>T"kCsjJZ`j:%NSfuD_B1VE+Bg0"L2SS[JHe3H[CStsU$PX)J
%[!jfZ?[S6Pfo`/'0.YV1SB;=jK+?^>Vl^V!5OHbM<)<W)c?qt50d?\jR7smC9#Kh5oG[f0A=EJ*IP#K4pplRU^)+9B2gNpNCr66k
%.X%4)lD&&Wc9SQRh@SZ8N!Xe7K<J"Thb'ZS-%6[Q--9K='?kF(@Qes7/4-mJmG0nH.q_:Eq0OqhldW*#o%DINq#"?5iiKXl:k!MN
%&oV"rEFY@6)#&\!UtnHu7^d6@\4"9G2;32-\a?h<=L2f)m5LHe5TQ=Cd#+@TB\/lGebn`8lZ@8hj\f79\J.:gW-9^&_pK`<WB=K)
%)_X='I$p!4`AN19gZJqEFj'."QOtOMgZ-200/\0&H+gUD]_nWE_lM6bkJJgre_B&JPtaqO*aY,<(W.cWrl4H]>'U^lWl$?.Rg[-7
%O*_,LbGQqnK/Z;;5`RWJ&`[4k=)@^+Bhia0$(*mE;Ylhl('3r&A^Y"]2WpRFSC]D&@GrU.2Q*cGne9h$oI'RHWb31KS6/MC&UpJb
%4\HOPKRMOrANOBL-WObEp7Yq@O"M-TK621-K)H]ZG4lGoE!FeT^nI+f.2rfd3'USQR\:J&h<]Z>=K6kD%\$mCF]grdbWUEV]t!TU
%GukR,Vk'(QmY]`LgAtfhedet/s)uZ8dst0TAm$q$hVc^3edGFOJ#l_,CIMd8,%I_"i0u7;aD?p7'.AclBjAP\\&\k5@S<Z3'U%V$
%Rm)=G\7_s]C)Ysu]stfU\3I8pJ'O,,oCMd?o'BE9@_I0%qKaWO_c,fqBTB$)7MX1qj-SQWp;lC5pD_bj)5VTg$LdVA:JtDh435io
%"#>N<f(V@aW^]K[k6kY+o5ZJ`Y]cJI^Fa7C<lEOl[Hnf*PMc5<[#4[Z\B_'=a]Dm*j#62,qu#ae/p/`0X<Xja9]c,!mI^;X$d'7-
%B(KO"j?*=CIr-7q(.tE[9]>hZpmj6-R)\o5](&o$/r02%B,umUl-p-jB_Df_T?/Wj'Hc%Qip+DSa0Du6fF<IV])4^_p6etJ_^V8=
%bRF$fJ+*tG'H^Sh[53(a1;A/E0J?MY5:.b=\sn"W@<oN72<;t&4nZ\;B`9p)Z*Er+G++c4&jRI]irQdq/6Ucnl-+Lp[.ZmWfj(0=
%)TS@jQ4K<oOEL+)HPC@U?a`8.JGFSn\OpkS\U$GZM;M<?X`$,$M@[%_,ARO&Mn8roAMjF5e2eqNCo-SIo"rRP/J$o&J!Am$K)fd,
%*^.B1!IXaG2+Do"P^bl!$/.H9"hN?7%pMPGlcaqV?-j%X$/3)*ekG6Ikmb<%^?&Qo;P(J037hJ)9`$GZliLBSfj2k2=*E.QeT;Ha
%C&VYV+Dn9M"ljm:d(H!c#BR2Z]MUi,]S.ss_J6O0Gc)R.Cp[S@0J5%5Z4B;g*aXgd#Ap9!bH67fe8FjqIA57,ZgF=:FMD7O-A^4F
%13M*$@2e$p!SnZhDJ-u,FJ7lsX^/h$E>o/&2HQA(W^10^FT,$/l]pKuZ?Yg'lqXj10@kp6*s<RVJFS2^0^X'\AR[AG.Cd"D0MI[<
%cQVM<I+RFWmHLF!kc92,lVEE`J!r`;TX:J:Q15(_49hIET%^q;dkf=<<W'+nSs>31m*DZqFX]It><#4#ALDZK\[qqSk"rT_cgG)1
%Uh?T+WRks4cBu4>:K=F<l+,Nq/\WiFrtT,`\daNXqOFAgp;J]afsA@1qJ><H_M"mc6P*FH9^lCR3*a-Ik#M(om<%=-A:Ei6gP-B0
%*!S40R'@Za?d:ZBhoBJ+cl$^qs/s8:*hmH+I']H3=3l)V[br-#dtL<Zi'!3_Z#i,A3pVn#dCIUe9@"-tWscE*&,FH>@l*kj<-q5"
%X0#FTIXs[^aok<O3P'NLn4@119Tql@9R,!Z!(R3m4.$OLX<lIG\e(o0eeL^XetRO3&*#Ts-l#<"\o"Ql_f(#0K0;AG?Z"H8gLQ@)
%mkLTKKYDs8#V!f=g-DHme/igtgXf!FJ[uN0R=)Pc-c^HFG3I3(r3:oq"D#^K,`%nh;G>D#]PQW#6@/@+EIh!iSfS=oTK"r&:HcE1
%l.P\*!m-pe(HFXfD-m0)nci4t>1.i'hb]fna*X5,GT\n]eC7Mg<s$ZS-p8>0<bl'q8!s>OWXD[.TD]Rm2]c\bj4'bAL1p__%*[j]
%1d=7G%:WN=`f\Fd`qU'j^pKm7lZcnBQ0TfJ_t-7QRMB77[j&;.,%CnLSBcH!3Kft^P'@%u6VQg#c?buqVWil@oS7-d0pX(QeceiB
%]'CI_ZS8Kl(6aEmX>IG33lBa/o<1n:Jibn8\"42-_SuB%rn;0U=C$8;g+VSiAlRc(Zh=-Nr,o8m\$i8!m]X?r2AQYE];L:8(%L)#
%O1]iVngi/m\Tk][?hNV6N/\DX`e@p%*!>hHr8'/[#]2(`N*u%Z.s#lAQ?;j>p(7+kDEk^E&gPGkS&%1'4nFk%D%P981u_%%e%Fsh
%5DW,+VAo8@Dc?Q3BnN]JIXf[\OF7r3:D8*JVbN3.AC,=>J:AV$L()cp"12XXM/k]PY2>LmP`Ap[#dJm(n9dFmIAX,OHt/bk4O4K#
%(>WC;D<6$=G4"qga*f0+-2gkl8AfB;Kr".k5\;f,RB*-%VNN.6PF+?XXBbH4NTtr07G;^a@]df_Z[a=Yo?:Z4]BIdT(V*rucTrOk
%oS/dA2Ln/ThCqVZQpZnj0R"*&J&p"bgl6N^%l.aa2Ln.iVPj*8aO(sHjJ6Z'R6/@@.l3;ZH?Mj[Aq@QN)kKIBD2p%U%)mtubn"mL
%S,TVfST"N"7aTrHL<&H#dRiE:1AdZ`h/e^([((29k_)k%oLX&\8o5e[g@q0r^nZgI=dF1$qs!Un-/$>BV/=g*W%G])ok=Z;c9+$%
%&\tU*2VPZE07)Fbe1>Oo3+JJ_0mL5BJ;&%6=Irjh@7$FZ>h?6T@8bmjIhU1RS)S:]YA)ke0g(*1_^q8kREa$r`CktO`f8G):A.[V
%e#O;6,uE<.MXVa@AVZ'6c9$u`pgSE0'C*Ht0i\[e-n\e=A.e>uokY_:3fFTP]XKpr3bNN%Y%J+n9u"5fFlQ$baf!PH>;.+`%4i@;
%FOk\=5l4=:XD%l5V0+S3Tf1_7AWAanEMMHU<4@C^._C3b[[;MSIK>%QP',]5/,F45Dj]qn@W9Dt:@.8&>;m,-D[pS+pb('b[JU*R
%E0+.^-7:en8h1,fWg[j/"O1OQ]8so4!gfLpE**^]>FZ&OVfll9Cu/`XJ".fM#54HC/u6t%Idk24+FT/c3'8;LKd">:j)]%udbBoI
%HE<,-32UhWiBk]>0nKU;pEeJp%(RuW90NPc>iMT=BX2U<NBKaFG[mVCNO[Ba)Bahu,KHHQBm6lq7ietW!$7BhB-ZuGq2sc$dXtV-
%FYJ+M)a1gR9r8Eg9tJ`Y(HS11j(@HSQ6:u)_i:6N/V<LL)a3"e,X%8]2f=?YJ@k?Q_`rm.T&D'&1B14X#+-J'%tM0("0Es#RS8U.
%KE<<,39V4\bpXIn@@b8IroD28/?e4'3p!$-:cr$mf6_Z'n!=U7,%*4g@t\+iG:E[CP%*aAK5%#]6C8OrNZ^gDeOFqRf$d).9T*LJ
%&XYHkL1uJ\O\A<D-h=`:Hjlusmi>oL.k\p)c)#mu)a/OQKT?MPKlg4#9Y5:#)-V+fl0/?7)9Kgoq[h1dPa-`_;)-msop7G[D4B/@
%S\%@Hgh(m+?ttuW@'Hei<AI`A)qP7YQA]X8eNCC"#`B4:Xla'JWbXY0LpM#<b7rdk"c+8<X=02GapF7LPb-BVhk-=t^\oQjjX&JD
%iIn?p./J"6'%P4N3WA3EP%Ci1T$=aDJkX7c>Coef6j7EA.:a/bhU3``&'IU%Xp;,X[cQ;7o>";[[$>bTaJ0,]CT_@]7/PY#G7JF?
%9fm4[WAek(Xp;,/Z/>qE@2`7lm0kLn\nh9>-A:58(3.Z'=1OMn!ql1DK:^F7?D[<WWmC8mSDBs?pN?"OD@*GVUF^[=`93C;4L?>q
%^N"?B1W/5Ymr)JOTu'[>9QuG^Q-Lh'%]?Hr>A7h`FhnP#*j8X$DprKWc`atVSZVO@'@C;P!^GO,okGHMS<"Yl92h>!`U3ur)!,FT
%aW:WAG&$nn[(LC&D7m!AI#h;8f.Vm\mQks[6`%E`qc0[Rp0P1Hq,D?N1V][=KuOo;&#K2$%Opch4(Nb(%K:moTC/TG2pnW5]V&HI
%3rUJ\^F<uX_SW2TIpV^i+.fHDpc<3(HS*mbTlTI&dA(f%=1_e^mK`QK;,.fI5?,7J<-'E=<):L@Zf]d9l@Nt=3od6dGb"[OZ>RBa
%>B52^n'1AU`%A$6).uuqI-L^jH3Z[;0$oEh'CF[&GJCgM"ksaG,4M\tW;(UdQ-7Jj;oN3Sn(ck!W;W\&jemB`l:pBf`Pk=uM7dGm
%LPRM1A1C);V<5ueau%5l)-*XrQnhAsS#As(R=UT:%ahb?+t>GT=JkoO/e@oTl+3B^2,R)9U*aI\ePoH"j6p`nH-iY*<GJMdTjJRi
%I`\a0M;h\*V-[u(bGXGd\+B:Un'?$VSXN>cf1p?j>DAS"5M'8b.IKKIFKf880:_nOh;9II3#EOraM4/_+.FLq9;VQeE4,&YrL8s/
%QSA.EPA;kZ[E)ffZgX0'bjrrQB>3P)0J\qicO"q2TjuHi?<j)UC[L_>EUL)6f.U[n`D)O,jW#]Lb=bWHZ]4qNeK)!(Cht_1A;^%q
%jh/sQ]b^1j`N.JIdb<,*+b]TB.T,<Wp/asNhp_%kU=rsL%=ddTY?\iF&$Js%Hh\i3A"Qfd[QD6=OG\`fX$C.i4VS9r<l+a5"'7%$
%=p:O1i/34aX5F?#^_I6L<l&&*K2=,#%q+S5T42oF,3`FQL`A0@ft`+VEfJsZfjJH6Oo:i9%5uJ=pcBuF/8dEBq)^)GCc?R\!0iJ]
%*u2#oL_9J\!I\SBZot/lL!oshGX&KDW(0'mkK7KjG:P>(_NamGls@ctKnTuBTS\TRDd&F/gTQEIqTdR[Jb@D4qZB2J'KO"_.KAPO
%P]a?gFft7>IP?dT27ea'<e_.*D'mu2dj.(DbqO&hI:!ij<1!ane>ZIGF+-T3]e)$Ee&(QXGiKdiAhug3.DsnR1A'N;ET968+4K#h
%G2030IlhdOn7q[Weq9Mb;T-LVU%W/L\n@Jt3OuC!8&=:e;G,<"Gl0umPuJ`X!]q:opOO5C+ht]m(HTf!hu[0&=dldB\3E@E_jDH\
%"M*(^*8UtQ'K6s%GS9n44LqIljr`aehWbM%YFMG?h]Apq-i'^*)uJGu+LQflNlLM_qAM0a=$ra@XDKr+2Je-acTB"-;JU$g;sHM0
%>:K?eR)t>j'O6dM8b5RJ78enrQWH)H88<S,(Q*&=(Q2dp8=*-o<jTLp/h[aelnKuRT$M2'[ZAJRn=Xa40IMo7gk_Vdk%F4KfN0;s
%%J=eXbRA:$CHWg']5:[Zl_3^l!:A#ka9)MXp6KseP^dIb8TKE,(bNAk"Ym,(SZ,%J0O7G\YTW)YCos>f*P&HOF)]F7J8iu%T.D*]
%@+bTJmeR*n`@NuZjudUun']-BEi2E55Zl-Ve_Lg2+AXATD<:A4("!MN1aR>PAeRRQK-K%CV].!hJA`9]%=fkb7B"9^VLlfY0Rt[T
%4uM0V)"mqcTk%RXW5hd?rs!b0MdS">s))j!)p(Ls2kiS(7^DtF6:dCf&35K4?iZQ@C5giFUi[YEjKf8u/>2Yo`W2CNltj`[8P`mJ
%Ki]s&kSTnNprCH$3"[P,K=HFrojbF;e=%,"!t8'"ATqX?$)$N-&:`!hXCR<aNAu%2)W',gH2;*MSUR=kH/XkZ.t1+IIP])"/S\YG
%`!j_@C&TjLqBVK1$VOlrSnL@C*L8C)iu^YPG9_P@A7JdZ)j.^=KHJ[KE]i#l.SG-!))as*=d;,P8:_2*!A,`SUtHe*i=aR:^SiGi
%6IEXpUn^[Q8ttm0-Ef-I/bsZg;?fP/3LHnK/c#aTg[&61XqXZ5k-#.e0LaB][]/Y4k"9RH5:E;TEQ9dqO1a<:Ctjk>Ao9S?ADqud
%OZRUoau+'j?@L*i&">5YeqYB9]m\LYVsfISaBAUCE0s'("Fdnsa9:<+7!:Kel.FYjq[b%+[-Horqt$sjAma1:%gD+eZI$MfWq147
%pJQF:Zg0npbl5KHNr'3nZY-$2Kj/FW&)#jeI9V$*T*_Zek!li:mEacIYH,1<4)BD\GMiAp?80B88(YJuq1i2Tb\D^QC<M=90/2SK
%VRA"M=tVku[.@:-m]/;u&o97r?XBWd`"[%jO4aM\3<6\Nn0#oANB.H5iR]KbS;HkNs.nu>NL\fdq*<5E3oc*QZ7j4(m5g9_7r'%;
%(JpY5Z?gQKB&)9S[;V>opa3$JX/tDLLC>)>ka/R<+[$_-;qo<SBl"Jb-d&@_Xd>lkp!qkkdIp.(DKfpi@Dm-p?'Q,U2fr>#nYZK_
%d9I`YH905iDuJ.]+?o119u1a,,54Mhh+PrRQ3?CD<0FB@?5+<.>cMn[+3-5!**rIBIpQa_lQ8';p"R1?AU0Fc<d'h3Ds4pVXp=]8
%q13rDpi5b<bh:7]Vq/c+Mk(sh0,M)N1\RorKJ,/Vqd'gm`)VaPQ:1&J([(,!c^_r.5Eq2iW9s39o[NG`IQf^'=+&dB1YLAQ`ueKr
%Ye;cdU5ouJG2*bO5.A.*qlekmJ&U9\(</hkjbn-)LI1CI*V4sH0k`Ts\%`m37=A8k^K#$\V;KG?TjP_PqnE.2a.Kr2&g\bKW@Ih>
%@dEI2cnCSIs8M1GrVZ!-InY\tWEh>c+0o\,G/!P&Y1.6`k&75EC:i9U4kn,Wk#:s]&+IG&C(aPo4MVp*FGb[Q&%LJOTjNK&)ZI8E
%'/!juJ\N;b%tUnis*n1g(6Q(3re>o>_f%c4m8#0.8F<6kmY'*5&9L&VqF*/.4ep)QR[TGaN$t0!$4(FmO>(eC[-]nkU8\M<6PC/M
%FC#JlG)u,RoZK11!`ts*2*j(CP`V"1h-e"]JgsC&mYi<YP,Q2M\n5W=NkYk"@7[ag=GVusU9%oo>r?T?P-.Cp;,ej>[H_H`">ur(
%U5I4h!.g-4pOh1+EUf3dWu<NH,7'%$kmZ8`>uDEmLg^XbM5rRX:!qX^Llu@\A0!QXWiDIa<*@.^Mio]*9LDjR=ckLp/ncr.+D4Yu
%!,]<7O[KMIb*%o",n]&GLQGA,=\h2ul`qpO1gQhQN=92=FqsNn_dG:b.Ln'=YSr0IZmckaKAZ0@aj;f#68L&o7MTkh8N-W]!j,"I
%6S[MuUo>44:DjA[Ql85AhH&SU9u(?I-5UYA$)Wr/'1\;KN%?+D,fPF*$7:+*P[sJGZmonTck@J$XJ[8[a]"[Z8&O$`NCJTm0EAE0
%lgTppPFEFm;'\7Eegq_!Jg=nQ8^VKO6:Om")F;RIDH`g@[l)g#_KQ.[cp[.J_N$IkG=fe[)RrNK:<:e%7gK;'2d+JJWlWeF*HVSu
%8N,K4&N#Z(*@-4W@%1ojJq,r`1K:e/alJ4#M&F*">a#G_OD+6i2qT3Z\gASHi%1<J)m#Y]W$Zj3f-IT.lO4N.HqfbHi5l@17Z``L
%E(u(e.D2^Te#3Tr4.qk;QpsPH'[9sKBHgb23c%2R$j;NBZ]VI>J\b_gL(#S`DLd/4al*Qi.I&*8"4kU%Sr4lPE<4r2'u1nRk`dKa
%34XR'_mtS\+O]R01!g?G;pbT57"bh")E8T!MO9@$O%hCh"`skE&e.;Ln6]s-(#WpQWei&h;.`P"Y/&CL.0*+HNri]d3-kW9AUk*G
%dM:Oi6;'.'A67,'j$Opk;:KSG#XH10[TIhpTV.c&+;D`s*<sL#&2h6a"_e?kS&b`*/+=2YM+`s7L.fl(3.S!e9Q3s_+nAK]\3t'8
%XA^qY4>nXG,.!,FB;,SYV4)crOs0>n^kMksE#Ma%.(Y/^^]=Gsk^;\/YVbVM-Upo7k,EoNZ_o/LK;YRbLsWYP;kVsF8;r;E5t'lF
%a9K/jcOl1=_%l2a$qWD]$qV%1>dk26K_u84i'8$>&.>EY#aiAd,`V+YHrCH;_p[%BTu^4J;[&bn1INokJI_ab_`aGZ^.:Ns4;B]j
%Ya5Lj%XF4f>XbPJ!FR1KDcP.9nqGtO`?D2^>6VI6El<^!'P%`S#ZNAm6j(7$M'kPa9fJ3]i&;bdCsi:c!EA]sJELCib<VRG1giIc
%ij(m]MHgtD:Gb@2)Rp)R!-HY2$b$gXB*ReP:mi^SU(TjsBA3HC+Z/,VCa-nr$imR#H<ns]PQ2#O>p5;[kNfW#4:GM^9nl+U&Z5\$
%$Y3dg494^L3R(<$,3]AS!p2;o!+\##JhUgAcO8Jm1'35BY63a6a>@$U/6HOt$-eX7.ZC;p!RVb2fhcDU0I=kG*#+fsCbUOk3StNJ
%p^eLF.^1/O\qnfHq'h,*8=uWL=aUIR#<<%'%7ggrJ3/Ku^if1o6*>0%8`Zf0l`b+hHNXSX9GPK%HWru`7LOtb!#Z21TJf`c[fN0J
%"[OC6W+?"_T*tr6q@S3]i`o29&4hUGTFJ`2TUl/['0f%h\;>#OfFQ9J;#+6"_!Q52PYjYB62Qa`R/d>[BLmm81de&sAGjpf=IH&.
%I!.V\&b/Br5q`;g`i_kR#UJ\-a<r)d,&#'=SDejdfbKoe!^7a#N"?OJ$mZ3`73+k7-6OF/-ZDA_Ts@$!@)K9<K)u8]bf=Q%EsD+X
%OEAuALtr.o$RC.3GR=H2j9n?W4%G),ID\rVG//cl$Lefu+X@,P'QcB,J]T^`/!s&(F+i4sn?EefWhCS)!*R3;YRRuF@Te4RL;a9A
%TI:Q$6'5RN!_o?oYZ/I]7!W7f5T>607%p9n!/ro!.4ECH=X:p/Q+@$:aY]-53u(0W\mV9O@O*0=K<oCup]hoL&IGa['#hq+6imI"
%[tteKUSn<le=PHWLrKHX\-SUZTas[>@&8as\\CB\=@BE)>212J$^V8!"Onc_+sIYc5hH0oV=PHh/ne,P9WX's5-YM%V\ldY=:?#T
%3c!2deS7H?N,XP/@;F\"1KYd2b*e/rd!A[P=%j1B;/<b[cr$%<7OJgdC4ss<9ZC.6OM*^>oa6QZKE[;:fSug7C:Ie'RD;^.EdA[l
%K7^b4b+!rT.]cbe6om01-*R\%L;I,)*N9C8i05Ma*'n7I1OrS[5A_17'3gb+1nIO$@2i#sl0ft^8D",OR`kmG@3BLUQ*TX?<.G6O
%m"LV`PYafCrD=4WF:npW%;?MPc7i,:JM,*P"?%U27Zstg=@/l3EMQG@P2HOZ97juN!4;#*))EZA/ZoLKOBMZ`a@<!(OHq:<d>K1\
%RVJ5s.+`QHZ:Rb:7O3OS!D$_)Y(DNeJmen_7RKcdbADtle"nJo`'Iq\lY&^"V:#s=Ob-1EfgXPjP.?+lJ1T==`N-p3ET`KO_?X%[
%ck&Ur-Hi1c8]^mRhN*JL]adk<'[uY7MBj36(#)^8@S_Ln1o0F##KWYc=f*DFSgQ#[]#o+TC/Y\E!.4b`!YNL(18WXaW&5E6R%u\b
%Ee9tbP#5\CTI+HE_gtNt0LPt_Y]q/c60]]STdCF""#Na"?l09[+H?`=W\2GI`Pgaqi'=CJdR?848Nbp!BZd=@Fj1Qe$E2H(]r_ss
%AhPZF$rNck(kk]"'+rtfK4-jL!NT.%)qj-8D&"WlCc/aiND6^53XiHb!gss?KujN2.VqS]hZZKKYspDR'o&fQ6sKfI$t>H]ScV$F
%!QWW'Lq]Q#:r>+`el<M4PI5rscY:uFM*lkp-CEB,-%Tj;ZuJATA/.*/Ou[Fl$6a,iV#t[2<E$F4!u+K++MelM;:(%Gb0E:CBJB[F
%:mFdFQFRJ+X[)?f=iOeOUfTSr&?$#LYt5K553Ob!FcG]?J@4I/!":VR0uKS$W=mhslkk_]1^_nB*_[6on0/SZ*?K`7,4R52gS!4B
%m,qCLFd:'262&:u$ke^2=[[bmOr$(q1\QqSJ?>`T;6cOb4aJ\:Om*h#]QMn84qH"EE36"Z,r<7fWKt'pA0[4c#3<pd*dlencpEs^
%6\atQT[4lP]2/Q'#adSQQ&pEW7Ym7$105*Vis+WG,S^W/!r%KNErmOb'Wu,kgjOd7$s?'-(/uJc_rSjg7>QcnTKBqVKFG;G"ukI3
%+XG_n_)Nc',ER5)8"be@:6:L7F6/?=6iJ/c2_nQ&@W*b0U*^-^3)51_66[=a#YGXC$7uA,&!k',TE%YP1[0_B'I<eo:a9F#'=<&I
%Yl_'8(lU'gJ.4UU3GtRoAeK.hcHgkW!h*?37:i]E"G-fM"=P3=1UfU[-(6a^FEE[<BPnDp&F^B&3\g8\TMrs#gJK=o0"T+\AlG()
%0PQ8,7MJ[p!Sp"$PF)RUNs6((Y^qoj=\n7oA8_O2:#`^Vfa+5oV*M8:!^uBB6f/ia*n2u*F(,G@k<PaED%hq2OdQ(k0dQsl\D0TP
%TE&pe;>DB07';Sc2nl<UN!TThU"'AN8?\2l_=KS3bVqhs@9+m^*YOhaoI`27FHK#qU]ntmNi'46F>+&0YaMFRRA<$_WJXq]@B1S-
%IKpi_`Hbl)JQu5@A:St3AFuOn1,fpK(Gn$'\eO@6"n_p;hh<pDmL(NF4WO>QOcRWjD26t9c%h6=6spas"^&U2RGb11%5>oU8:hI$
%2,pH5R](Mt(?A%P<EZB(ToP".&\Vc._PAT#B1'IU6r0MXnKtKYli@8iib!ie8o-W:$Ui:Gd6'63Jba\MciCaeYI6r&d*T,7/7]D/
%8lRC(U51Yr<T\uN/>6LHkgg%Fcrkl'(VRuA2+1Kq5cc8e&c`(P-KDno@\>"RqCh`"^^5oe0hFlJ,20kA)IUdc9Mo1I]8:^A!M%np
%Ta[&.48PHVi+nuJ1A1uC!oUZ6>0u"./Vl>7'7DAL,A^3>@0jYo'<O5TGBE;i>M+iN,t8OZLJ.`hA"F'lHkX:0@;@!FJ@&&CWM;Nc
%#9ji-":Z'd)O:[`0FVOr+>o?$:!5r<*P2nP!0%#GJ7CK'9gfd[oqB\','Ql#89!K@%hKO;:(?QM&HUr7-H]C48[(7c6jF)LKC4P[
%JYdSO1+(i[F9PBh0VhDL,/Y%D4o2p1Q:Zrpa:n!!(/VuhUGBp!7qR]R<5@3O"''G1iAS*FPC(_#JgSW16;`8Z%AYk%@gNKG7gA[M
%*MZ"&$Ir!d11YqtS-:_`<59AJ0f,Vb$48^^%>c/c'/8XXK.4m\77[`>RZ89h:]pI(,)R'61e:OVpo><:Na`@j$Cmk@0bHr/!1f&^
%K51u1\l*ZmO_LiT#\:;ZFnBO5.i.6OJNeK&h-p`V4MVBX6?Na>85#<P#RG*)C_f!hapg%q.H<I8nI`Z1?W08M6PG!#<,L,!2:NLc
%UhISB!#9kk5h.=W_X(,b5Re83LJpeC'gY0M,=Mhof.jMHr,ML:@IF7^,0)/Q)nN4pe<`_n+D2bTZNdW8!`NngVL^?`%=V`W,SXbL
%o`i39)@oM366,?s$p"L$B-3C9i/\dAO9Jo@a1c/YThb#O6jIhoC)@[@\VYlPK7]U)1`.'4j5C\/k]$sc,h!!49EG@J1n!#G'X.X+
%<WZhnV(!82'-sIROfK>MaG>^i$<;e22<=U7KL7's3t*NPCbenj8Oj"h!":%d'9-c!.tZHi6jK2^@r<BRk`sY*>R?oa1hl0_OdLH0
%U(sf!!Ya7o>>tnd5W+WZ.(mXBQC)G&fIS^-dX0@8N9[?VBP`H???0pN/,AFtEMK6u&gl!O*b^`@1cKt"0oe`9J^#^O.$6!QX$u*S
%3C75@0Gg!iOHrQg@(]-"%S#n2AYHhl!?Q-%lA/bsm,X(:$F7fr<-24M1(P(L-3HaJ(p9Sp?<7m-."ReeaMeT(&_%]Z<Do:p$d9g$
%O3lo<P4^K/#'jqu9kT1_Gt%6+'KBu.Q1.N?h3%q-d0V"'3'1_<TrV:id$0Db"a&m*pdX:+;kl%/R\E=S.3ln7aGkm=@4%1h?>SOJ
%E4-rHcLFoqcfD<2Oaoto1QVd6>(Rc+P/RV4/6SiF7,@30N&i,POF*Cab2s6HD.,t1"Z.gb=$V8.mBY!r'VIZUS&U_;"!ni3.5Z#s
%7,nZ<JPAC-!dE?:.M)>haAs!c%0jh@?nMo+UFPgU>d&Za*$cUk&</?1*:_BQiQHo%clBk^d/Sf/$Bu8j@mEX37Z'L;=_6a(f3k/n
%bD$BZ!;1nGTV[:>BP?Tm'b'(k^r.K^/QrpQ7*LUD]F8(USnC#h5[tL$#3$ih([.e5#tuLs<fGJBU$3u,<0;$`U34Ph<V/"D'@@D*
%F"eMn`?L7`%?q">!FSe=+\Edd?02&WJs;)OCT(*Mfn*&J5UB"dk_iMVGmGKS+.WO!RLglF#sCl8QjQ&"PW4K"3l\f\&.TTg)]Qbi
%@A(SI!:M3e!s7%M35M@,,TRXrMWr;FR]%u(a4]BN$#pmo*q4_;"H9:aGL6_4T]--d2"EQgLaK<^.LhuTMAEmc3%LYF6(rWHPgRlV
%5acPh3Y)qg+Qc(f(7YM\'>=h[LEUV=MX#Lh<1"m@p]F&]1u#j2@"B'q[;*#$_)MLC!q=Qu\>i,B$PnteEnC@#-P]k8FHpE/380%?
%91@`jJH6aSS,&K]n"ML$70,5hQraB$LE,4@4tH[[Xp.NBs$,cY&frmC91h2q<C_I662Et6eF6QPi%2gB,5XfoaZu2FV6UYV#D.\2
%Zi^o=.XDrj-g<NC#<&8\7!\nR$N7kYc,fB?%Z7JN4!=Xt,1M"FUP:&3&i<GB64e\/`8HR\"Y_b_BUG0;Q8GIO#SQF?5TJ"MWWIDo
%RfrCNdGXEt<Bt=0Prgh&-kA])Fr"3XR&-O^YbQd;"%31o\1hF9BG#h774:al(`7'X*<A0uWD[OR@>eUB5at+#!?T2oR@luK=Y\:5
%a)E=nWF.;OW^DukPY_HF4B<MW!XC,&A.Ke6fXiIDG[qDb)#43p#J;'O%.lu?`8g;1`CL29KIiRpJ.40#)DdpYM;j<#!`[=h30t(,
%8/0R#1l9m1/Fn[$%g3>?6XHn#":"sm65(@c3mWLWFI=!tL;<RI`O[MtL;oPpE&F$5%JDg"Htub\dK*3Q17_;DOJuujeH-N%!Yr.N
%U1^\9?pgY>gOQ/r#&PGFi"TNRXjF8%Yp>2V@9NoflnRtGMJ;%[PH8/0+U[S2jC`i?rBIU0'1H"u''\F#O1c_]&T\`l3(]NLYK.@R
%n-Eah//UsX46/Lo5DE`o;DXhnaSZI*-)1r\;SE[#M5_OO9CX02NBGm;O8tb9Ga#"B1/!e,(hjVDa9WKJ"$$Z!At^<!0j]03<Oq0'
%0u$;EM>BUjWf>_cU/2aC`o@V97Im-mV_O>jZg#S',h"s9/=@jnNW^"(OL649P8bP7'Iu0IF]aLK/0p0n;Z%3P4mm[:E5!YBrb8YQ
%?GrW_!.ejj59?I_7l83L_:X:E,+VOsV_0Hg)TL&oS&1[;*D))o8#8nWR3ZlXi*g&`TWjbKR_arO7a>h(V'1t#UR-NE=S<ARlX7QY
%<T1uRIQ9)XE'%`SO\(.m8VUY.IC,*W7B2HDKq'+L&dh6==-6BL1lO8+"<\EESBOg9:h`@3M\;>KrkSRW@7V#2;<Xlthn=]G-'bME
%A31)YHQ,?mogC*i!_(a?6',P7?"<\D)FImFFVo%\8GQ7^`Q-rRK&P\j\/7kDJi91sq]t;[PI[J'Godnd$M=;^!X:F%[B#s=+#-S.
%;&(ATS>&Y=g^_2X$T/58+VO'c-ttsX,1!1/rGXe0WlVlI?m'LG!eXjuL!^eQ85<A5"e#kFmSI&<F#-rW$]$a(CDX39SNOn92dN*d
%Pup=_fEu-KJdd4@?_C,8;?]nB)D'/;0Ec.r'fhGL.E_'%FdJW3Zp2cB0a+XBU)lSQ=d7")il2DT-KlF<.md[[()2t0O>/>N"!&[>
%&O*F)T#Uq*MA9L&>`'^T0,/kF:2)6F%HtUG34s,_jTjL9XK^;Zc>&4nCX$7$Ks4+`*Njtqh]Oj(+bECf3H7ihB?F2lV^N^2"hC:Z
%;ALsE]l)i.bf5i$_$q3<[]$:tXq\B6D\ruqka8Scl+b=-.DZ>NWesKm1Fb<bAK[^#NP)e+ROS@LaU/g50i\Q\$]9P7,/W&QBZ`RU
%NZ^%&C*FNGO^;Sf\IFb#<a`G"Aafa!KC!+<-OCN#HlWq+7FQNE9G]8'$E8UYL?Mm=#UX[/=;u9UPd%+4dn*r2DM]VoIT/qI60"#X
%"k^i!!s=**mf^=AR`rX3BL;$rA*U9\!`<@9Y08"b7>5jf@>s+El(TVkY)?U=eTr5VBe2T,%XWgS(Q7>\,JJo8"%+Hj!s>q4)aS(J
%%\Yc_.*bRR5oLK'1U>]]HN6E07PiApA*XqfL]m&!0Jk8[QBI7gE+JI#_h9"%W9>ulO@`/:XO,AS,th9.rSQ`X(bTG]7ED&tnUNN_
%1MU&>Z%J"]^^M681'PHRf*,m5oc"%JNq":r$/.+ml(BDYNer./L;J#!9j+/IU%aan,@<%[&WjUqE@F.=QGoYp)h>!qKJ?CUFE0_V
%4IE((K(Z_#b[!V@JLhK\/;ctk89TrS;gcs7J']G^Daf"KPVbi79M*-m.jeJ\bVP3?5>p!^*(YrpnNorXH8`t(+FQn\N%ncAY[3&u
%3_&n#n0hgc=joFq-S-j-**j0fR_hYcgbhJ(jM!="_VOPmXJWM%N_VO!0nsBY&s)(IE*t\F11e&G!Mc$T6n(3k"nXDt`u_?LK4jGC
%'9LP"ClV&Mg'!tEh5D64)@]tA,l(R])Wrsr3mNR<bN-ISJMaN(PKT"5R;$@.OqL76DJGL+8)QDG18RE4,em2BOa5B*XJ,:%mDsm^
%Yol("@kulEZ>MA4Jms?n-94nKVJM/,*O@]GgHtj4SlCEh$C50s,]&WlNp;L]`.ETh:rc7U`r*@=V71"m7i7_[Gdb5EE_<.L"n[Tn
%eUam='0agY"tC@[*0VdArgFH3"s+a38t^/>l$tue*X5!]<%Lfc2D`[]M(!rKUe[dNOT;960X@?f-k`TEfTiuL(ka6^o0]]*F5p_2
%*e2`i+]IKdZbS3a$Zr\[f*,ak1!_&?Xl79fH%KLaV%@%(,d:t_Ca-?$$#[[$YZVa`4+Z()1?eq/<(Th(*OFdnEi,VNcQsegSp<j\
%oT"A`U*,lEL7f:Q`\"uqbR]^s.Hau,h3t((=R)ObSF9D'J.aK==VJo6JuZ@,nMZ(0:K6@V1(4M/5RDn*QmbbPRUCN9K\%'dBp?Mo
%?-.:^rE+4kqL)pBZ]mfbPL+Y,;^rT"JNG9YU4]bS;)nc#;do*/@QBAS<9=BqdYSH2a57/]aFD8U7ugW$j:l0A#aRaV-q)?@Cc0R4
%-DI,oAX$'g$5HHH)q>!eS!D*p;,4aI1K>\uMkN5Y.flS(EJU2[QC!0U32!-hN?3)*1>I[d8Y_Vp7M\N[^lt`hk(.Y[+ddYIE?WA1
%km82D&eKCHo&6hN'g*r+(`K8c)$F5e3@NZ3MC'<q"p/)'N(nElWX>_Lk^TD&"I8P!<%<no-Gah>nh2^@UfaVIfMuMu-5`aAA6P,:
%<I7\3"bga#k]LLkM1ei(Aii&J.4H%%'U$Ba1'4>\Tj97,h"8Q>#aKInjhN?u9Sj_A^nlT3;2N-a#00A9/IZO*)]1\LXVfq<D\Nrh
%:^-t>(c&.o!D?9I8`.HoN,:M3S4e\e?qI#i-l!3B7S+]3F>V;m_\@:?1)9%r`DXOVX+D*A["1=URH9CNd$Yu+(`X:p&;-aE7GS<L
%iB0.O'G@NeTkXBX0Pj)O*bZLD293BmVNhsLB"+G=![=0s*3bFajdR*(V1[.am!1c&2R?q6CfW!k$,\+l.gj^(Sn!Uo/8Yj630GgP
%Sf40+>R>KDX0a%4YlSOh=GA:?)mJn)s,X[6g!s=tQLO#@r!kUX?pg`ggY>S4^jtSUkg?E(hr">UP*5g@e1nOX)=E-s=e56O7T%9<
%AjiF;Q)#CAQVJJ4kI2A'h4hQ=5`)-R1`X[2cX$d8Q%a&5.25]/bTBu@L#i'<`VO/[$9pD^:u;d3"Q`Uq[q.]<Dos_RbS/'74^r)e
%W=_6[X1T!2MjDJ*(i;?15q4%%j?;6+!K:)*L=Xc'Li9j`Dik\J6\]!CmtfuFf`nUr$dKtI9)d'0]#Jhk2O6M#n`QVINMAeu$@LF\
%'6H\'D3m.Q0UV_qi\7R^9.7U:M5XN$@R$s3#At5s+QB%s1af*!TaJZ_]C[58\.Q%6OeC'j;d'pBQ?q4`!Kuism)*G`k.Ic"E;4QN
%Oi*U=fFokKVi9cm"os[jQO,OUf(AIl$e\?>&O9MUCV"47Cn)-Ei:Ql6E&FuEq>5<A;f&e]49TSHgC!R2Ca.h[RnsF7F`HNq-na5a
%/EH9<%r5PgMk(R72R0)LH&N7AFN5@DH3M8C"^;<@6'HZOGGg$]'2X'5S=rlS%6C(]%!\7n_3e3-C=LjtjFX@R"G_V%JWX=Ln4d=/
%`?ot<)qfm^g5JE2;et+MET^PfNuCDQn:[6bTN[!oBLF_A1Qu$Bq;ES9$d39B$"*ua7f--97qT(j7;;'lgGnF0?DZ1]YOnq=D\7pc
%'o9;#7!E(N)q@'IDcX\V=`GQK%"dDpmkrEX\Dqga[5*60+Q[9kG2%=@l3\n@S/q8X`e0.'ip>n&Nrmu=10jqY3]jsqK/u$+P/Iab
%h;KQ6j,jqCW]n,mi+(P;"(o!OfG'AUVf.DI[_`_1!E`@U?0,O^i5DU6epk+uAD4dr7iinD#qFq(NfSg7D=\;DpIC9]G+3;X-Ea`d
%63k+HKj(N`p*R(IpQnK2!53=p<]%@lVdANe2J3&jU(aY>f_lB_799tMbKOaYK$HL28?6.;X[SfD&20Df]&HVj1b4)'mYTg%R@*\o
%IY?i(_Gd;&Xaif".aSZ*DNt`*kTuS"f(1D\LO\8j"d+0f#-m[H^05Ie4?$j/@/-]Nm).iuH9'R+iKO@(J50Y;p*Mur(l]auOh,ZO
%GhAh;3iIO[I5;li/oMs//69aK]\YiOa60l>?_a1<XImdEkmFp,XjDH//lmj&4,s%ClYp`R^Nn_33eB+pnF>.u@9]Itg;JB1j(R?T
%Y,:k,9l-*`Le[iuM(;Y,!@#*SH:;2+JGQdoc1SWe]:;BRFJOIRF0)B?/:pgd1VgG4EQ(XuOFT3)a&Q5Ecic$q[uA:Kfn4:o#Uir\
%@Afb0*qiU']P,PdH[1!eiW4PmEP&Q),4r%%B\K\[[J=3(M^g>E7Kb@'gJVSK;A2"V8gMg\1:sJB;pSHXmLUJ,Yd9cCI&ME3',:0d
%7L8ocHZBtZP9*Y"l(fsCXIi,I>]?*#\:J]8$_6:UG,\QA_`t^6cE0/4(TY6A2NFpP[1WY3H@i7e/XUcZb5l<$4V+u<Pfn3ZU06bu
%I]m!TF^\AFPk,J\aiL$XrU?Qu@l*c^FJI`%2W0=_an_]#kjKa4bG#r0pTD1_[M)0NJ8Run'/H.qG:m=\cQ_"s.bee?n.qC"Wf(lD
%\r5,i:?+Gp<U@<X#U#V%&/>0ci+]?58e<\L"b)F=khSh-odnA>$RiptD@90h[;RANPXf[VGedTFZQ>6TQ!m@oj299V+KV7S_@'Q@
%g5o'sPWQj2]-=3+<.&?j6,N6Yg00NL:98&"p%t8R/A#XX=biaB;`X[efFN_;9I&XgrCNJaJkm+Mes"S/!4gCl@ljui'Y00[%0"BL
%q,7Mc%P)EfN-&VBlK%4RVU@raFGoL?^iLG:4uQ>mQBhBDE?>8s_R=Q);/+&WDPC>K*#b6f:VClrm+N^o_7P^"5hs@V22.CYGIELH
%8R[UE"<:\(#jfhQlsc+:#j]33T%[=lbgObOA>[sFmbC>IJ.DEXWMnF!;lgdJI%LLC"A5pIdmS.V4Is;:lA`)l=7*pV>R@\PMsA%E
%e^$-&0@+)Ri]7[44=:O23bm2m$a,_u#-@.MM;qJa^RSABrD$r>$_97fhXrYEWm%M-";UtNQ<&(4B?04&2!Z&-H$&K5Olm"BVJFHJ
%ai33FAeheIi[Pq=R"p8dhoPJWL2+n8oHsC?)_&2$TQXDgI_h3oX"OL?-\1]q.V0`%H8Mr8ZAM!LLTd`ci_"@rrdti7PfZ_jmK&CP
%TVYK!3;%2m2bO3WfJkSIL'(@/(LcR$.KTj8`.&:e4@p#oIJ_8cNt?oF:88l<;c,i"T`PmYe%.>D"0TQ0WXgRAO/7-.<8jpjOuuH9
%Hg[dniX6A`^Gu5@<BN@:$7^_2+AW+`'3SNX'm1Ek38q?eLK20s\3^>Z6gW>1`*MRJJ[c(b;;]GkZP'I9W^*f`E0.`laKRjF#PUt!
%Uc;+;DI-0>)5mi&H04@?oGh(-nIPM`=,#1+>oglbZc`kO7_VK!Y(.T0:pIA5au;YI*(3TBOKc)@*^#[0&_e92AQ/X>&/LDOWWB"Y
%'_$qp6[_No?r0Hb,Zq/o5"tH>hKk?US)o$bCEE1q-8;-gGS<?NDr79CG7m@jraLO8Lo[0RZOZ=I(_:1#<Q<md%+3JOW<^o0oI?`q
%_&'fn-NNsFN#F)irr+@6O&X/NLCVJY%'l!MJnq/f9:\!H5M^K"e?@bPpThf@,9.H?:Y3l\Z&+.4F:gFc>icMTE-rudIjC*Y=N(>"
%3nciM4X`kA75n9?rtn6>)f9"A3Xl:QkC9=I]%AoFNdt?(QQRVBOGPHD_"QOXl:\qmaI^t8,S:^+C'1]jC=,W+3,"uhF#:DX#CCfu
%d58%WR_fQ?;.L8AW./DX7.j"+@>PKpb0ss+md.-h68]*`e>t.0%UW]B;H/sS_fO>tL4mg7+rVQ1"8eh%dWU,e*\B+2S$Tpd4-#Sd
%#8r&0)]o0`Z6$7?9i?<2f?6".m8#Yo&^nMm.RYfXAVu>+/XV'jaRP(F=4@Xo/*#j29IYC>)kL3Y'6jirh$u%ie<pYZ!g(rOHfmkV
%&rQf?fp^]>ot-[[^oOu\Pj0BJL:_?>Cr\ZA9tmA3Qk'S4ZMF9Zh>(IPlVg&V=T^4[!de1/97&;_hR>*3pP7s1:AmqS@_eZuG?G/9
%AG:d7c^c=^H@rb>UrWd.*[[+E.TF6D=D-k(mY@)U*9aZKi><lgQb[QF"$5];OO2[B\blUD!(][M(GX_GPgD/_erDY=$iPn,nMsi=
%V8T^>jKIH8B3d!e<KOe^\KO>B6D)!-UP'kc0&NP'PO:f"6u0iSqZTPs_>oWoNo=REfk5#*9h1_="[IYfF_FeqJupGaTaW&_+)\n#
%U)l>ICYQmq!4fFOYGF*$jdc\\mSh(di;"/S%.2ou)Cr%\BqkCYDefft]7A+\G&W>[N<'7<H^oB+4Xd.[GWfq-*$Di62@Z%k9@T:4
%Le/T^&og*&dk$#tM05#d3")A9,4-X&cQi0@`m;'qfs]jNLQQFCnkDcg^WEoNad+C5>:#cCCpWi@YKOA)a\MA;:RQ)bPATU.N],_k
%At.k/5Fq/RPPt='IJe>"5PG$4YuU^i*Cu>!8\W"_cQbOA*<ic^+sT[(4ED_l&b@621(l<EdNqQ3r5doWeC9P\cZbbK$)/u5oU9iI
%VPiuA<grR$P%.&n/^Lk:M7GHopQFi8dXkWun0QJLUa3:rj\(mq9o*D<dmoF@j9^9GAA9?Tr^bmX8`#e]E0`O[;Tq]jHDGD,jK?88
%@6N)pcYWALhE8ucB8QC?B:l$pdk\^3`SdT&n16o=e17iQ7TKT4X!L>C-*+c@Fdf,%PEgURW^KuU.4[NoeYnXO<a,4>.qDd;/M"EG
%eE>7X?;g=:CP,1n0e5/re0U^jbcJsTf0cmmBj+to<+F7Ik+d%a%!GP09o?bYh=uIL1-[8:18i+W]ZC&H*^7<)+4YFZ[A;*>PiH*X
%pIU3+K*&]Z"u:_F'8MYO(,BPj#(_"h94Yhq%"Rl"eOX*h5LCQ5:*bOX,fl/hU[eJ!H,<lo&2G,j-3N)bpm_c8P<jYhkTCuH^_/X-
%9416r3p?ggPX1lrB[dEI.K`pe^oS=\<sJDFJV@Y@Z34s/+OXT#CDk>JK>[Z+c0=.6`pPq45N-i)D!qPdQXTt/aC(#\HikQV!/ikE
%0u6+e:rsMQAHoqDJXS$`1BW,=+OM0(RK62_JEdN.21rS+d'9c6g*btT%@Wc\Gb9ND$lJns+jT#c)(bRe_44o('1DI#FuholVdSj*
%[[dH3'-)7W(sg"Z.1#kUYF\)8'+"LT>!<2B56:O><^260Vss_V.?KZ!1@i86VVn3kS-H;91AX@-PB^M8,ijlBV")IfaJ^1@73lH.
%AAj[bT9;!51=Af^NHsL0A9=;oQBMu,19+,>$$p"jAON;POHagQ17D-6LO*B(,oitEMY5!C8dJ`P&M3%&-1%q%K_E8abF!,Q!Ue'p
%ZhJ\ulgtL[,eT);Qh1&/$=L^bI,Pd:oYW%JnV,5T&K`f\A4i]B8='WAo?#u3O8X_&l+p'WTc&j^KlNQE;kG>d(VXZ[NQilY3SQG:
%k%4bQ-eDFT5FK?^!,!S:N,8F/926q[):^_n7AoeB(RfK`aNhl])9Mc0&"Z\>1Q$J#7F+Nj3Oq<7_'b3;KNS8k_9_?A)6Np-!?`$`
%a@$2<oER.NJje#E7Je3k8]]s,?Bc7T#W-'9%W?Y(R5@;Y+n;9bOU4r3q@tYU(TAfP-D$@cCo!46R<1s%nrX924G?./1e-?_804cW
%\\:WbL%82:ae_um&XH+l-'raG"^j*ZQs<SP.6`qfeDt@&RIEotORo3CPKE6'niWn5:SRWJ$3RtT#c2Q/M(I&4Jl*k<P_gTtkpIcT
%9:7'S]6_pnkU@0uHI7aF<2L9_WYaKk>iI5q_Ko)(8d2X9+g,(U/(=3<$@q5)@1PZ/7!7ibSh/8D9@V7-=gUR]/Q#Zojk-09D2GjY
%M[\B>0(,X5>V81+C=GD#lr([36l@Z*cc_%9&k0N&[kAQm99]Di]tdTL0Mrt:F:*(T_aO;Sd7;E7'GJI)V_2I3i0YrV-@1caE+G[s
%RHRK0JsD1uAYO[B$Y:ZBRSVba>bElOo$$_i;dn$@5r?t,:%_$jh9n^IoL/sAd7\nFWoi<A:R0L!b;C)a:"3T-%G>!&p*!%t.+dSo
%[neI.6n^J8ekHj'':I]Nbr8T"9sfI-%H0urpo-g^,$k,qC2QB_brcohrmYo4Pb)qfk_F8%U+`&F;(%7O:L39k!'=3'IctL\$#_0u
%h2./9-MX,]K0T%HF.r+lOo-Y4T$*TN3p9AIoNYE[dpIT^[-(od:XSo))*XCKIqm4UMY&RMong\:U4f.3jsSmZM#r/ZeXpRP5F)6j
%/HU%\URcp=$RL3+P3rHe)hY6L_6YRWhE2tGZLD\LOLK$s>!"#.+4<Uj8OnW5m6o[",3rb/lunLK`Q3@<r9UYMG2c%2G!(+tA=YrJ
%"sI+_O_:k[Ua=-XD+W=6jO""ifd%m.Ulr)hH+%8*3k%3j]Hg3ZdU"YhQ86dp1GA-0P!1eMAiG!6S>:MWUVkC'5!3hX>i3K3ROlGa
%ogitF@e7AHOT+JtLjb_r&3QabqZh*:fdK=92Mp?^^'kDO'94N",<<.$VZdn*I\j_VbTq<lj__1PD;(\)bN]s>!29I#/2_il>-9'Y
%cCS@+&2\TR/qgI#U6+kpVAH)"(nObu#>#T(heloqk]W2u7/G:ll-$c-I^E6eN72rDO.K'[F/Q)Ee>#f=g/'9b4I,Q:ar=JH4'lKH
%Z-ih[=f8B75H_A3=45tVlN3B]$[_R^9=g2GD9B/5AriNr=_kCWM-AJG/aLQFp2A..]Y/E?9:NsJ:$2"iFBRY8XMN^c0>+B'?IE-J
%V%6qaYqKhXpX0-tCDW@[(!PDC-B/B(L5'F2_mE-IekYbgH-uW[dAPB/*j_/mH0`Km>p;ESO.MMPo9cqX9Y49$r@FS309cC&GpCS0
%j(?`,o;.4Tg?pb4$i8:;oVL5Ses,g/J*E`YC"<piV0?\*AG+?.oqcG>hV^9U".M0,9fgI0%;>?>[7OHS[/"Rq-T>nAS$h+t]C]_6
%I'^8r0-,Y.B#7^"iOAg)=Y&O6jmd,1jC]_!XPr_CDs"-\F5H=FlO9=BO\V?>Vd6:Np=3<8l^*Xa=nD!ea7a.%mW%8O3d6Y)hcZ03
%B/B$IhsbVY5Iuf7cJQrkjB9t&+8sHt^OC8lf/^1OkuiB+]G#YCZor9orn[nZd5!n$/cX7Qrm@l4l"L\':.,.Kq.CS:8J;4?4Fi`E
%DTA+3X3a(/[$UrhfMB#&p[>T:(9Ib?h_7)tAQ)$m9nN,bNbsIaD'cXWj/LY`N/SZT/o40\D2X3tnY!"ha?l!P/oGcb*u.T(@,5U7
%nQ?15eCXdq_fqLB+\_RuE.fn1@ckNYZ7A+2Gq_C@i?.hCeKhNXeWJ<qkl\q;(R#OB&@:'K**?+6:g,^t*eu\IV%ZikZ`[.JR8dSL
%VnfshI.XGZp,N<]9(OS82@!E$!"YJ^NZlsh#e*t.Pn08?9:;V?6&uDb0J*MdXT<WE2/Zm?#sgH?XXh&W(?lHc@<%Du<]k&Sdh3rn
%?elj52%"%\dNI]"C,h#?,H<J+Fl!pM%qqm"7,!T4<Qp1Sb:IHlb`$k,Qj<hai9?G'2OjS;)nb#mEf!gm!4/1oD5eaP>f-@lXa74`
%3hA/T:F$b8l\[QHp)rdW(4qmK>oY(Q[:>-fUP`O![jEdmJh!p@5qq)SiR@OoCG\Z]RhhVP<bZ(uVMK\#67>R"A_Tu+@Nblu>B_.I
%Y1VZi\jt"Mr(/Z!r@*UA>Z#cR#K@^oeiLd^@(Wf1"'5Oo)u$J*eQs!\f>qj0%Sb9eA#PtjI&34h=6!"q\1spVPp+*n!&c^X(?i_Q
%*%hg%/@e/H..XG3iij(FL_A"iC,b[4]tslu1g9RoiieiWjJBlAF^YM%NYEitJr&<@.-+TF,:)R*'Wsu@h4XF+@hsg.*,?+5+:(_T
%G?+5(!^_dT-_*%YFXZ"_0%p^aR^?tLO:VHG(N0<eCh!kB*LZ%J\Z2e>5bsj&;P>"I&3*i@2<]<XV>E\VZ,(/N\.rHSFK_8TCB-HX
%rIt&T&sd[M6*]BQON1$2k,6&PJu9kqc8;PY*Vl784!/oRr(-0/G"9-Pl"'bi&O!Y^N3l1.[s(;6,RT/23(8,-5UgM]!g]e$(!9k!
%mt8na7q^N"Gp[V![ZI*0+Gk<dAjXUR0I\=R2)1<%ZqG,3`q)aB`36Y["=2jnecOs-14X1975G<`Yot#3c%21s>iVa?V"pt=]i2uP
%EhG$&n7qnXS9(1&O"+D\&m8J5a]qRU]sfFoV*&Ob-Cg\O2ENB/RW4Yl!?C0N%U;KE)6jJZ3O]=G&fZ'<8#@5&oBP;p)B_)+AY@<%
%HO:Ob,_gb,f_8BjCc)tZ;3KGIXoir&H@DDchp`^gRDX/E+dS(`!d.GZDfSYPU-j[Q`$L9X)G`$trd8iaMV+8H'@GcL\?l7R,'0Ak
%crSH1_a-)`6e*JuSZe'uFS'UJ+de,*kXW@%PI>5ai+4ut3:ANC!BR3q7tMP:+B)n&S0Zi3J;A%=OE0!N,A_/:G"Wo.mKl"9LN=NK
%#=/U=Q3Mf6N=3fWlTd;eDF^t[F[cofFYbgjNQobchI1FK!Lg-!?"Ddn]VhlY1&XqUn)bXg'0!/bS["X0,WB*EXTP?tB:'CgdOL>1
%H^DWGhBEec'>"?q[_(LKPSE8B:g$J3h1OjC3`:#+J]Aec.ai!1$cLg`bZ75c]RQ/T<ZZg\&R7rc+L.1+;T^AMB]!(:Xea__Ob)ZI
%Y"3mI`01e[]V_Yso!AV0KupFO%:t+[+sad\5-^9XoiIU+*r:?aZgG(!;8;-nJVF5bSU+i@$^W?=0,<">i"qfcW@q-"q5^M^:A]RT
%onR_hS8F]Y2=>NEY@[oB6IJFnK0?"4(bmhA:ntpfTO,o!YdcS<QVlo\3k1dFD\DeW:g4)=1OP)Q0DK-c7]7gX2.j6fAh9PN*8rl5
%k#_U4!EEPjQVkK_%tMO5lAVL/!(aFW10^PN(IpfBr>dqTP,'nN#?9Db#sjkpUC7cN(e@Wh`ULjH3VB#1pq"8Togu1+`YR;rQ2r.R
%m%Ur(O#4:i9I"8Q3CNp`^.)sd0pY:er4W\k+97cR`nB[^S.'^\M]r<gX4_aIfl0u/TgG)=c;5+BKU$"/71.gZ9,C^_&nk:4hhId2
%5HH%tP6==q!:]K<$q9D]lBKN#;ZgkD*Cd`%LkL9kPYlLW\Eq:*rn/?q\\bNJRpgK_$(lF;SW40bUoG,8P8]XVE]mZ6'pHBnKf"M_
%=-NA"/]m`E8GePfR3G_o"cQgVd=ZiTFbI1lga38]qpd@-bpedo/=(!PK1\'IE8Ve9n@`;1'"PU!+YdDqK&s=J4Z?>P`a<U-Y7mg/
%a,glr67ZFe1_;ukVTpg,/^^k#.$RT1[%t'?Pi65=S.q7h8Q<ur3Q,edGcC%h7*K7^O5YZm3RW],)*A33*Ut%.W@,_13BL*3KUB0W
%d2$b4;!b+,9*14h><U8Hg8$^mn2Ykl:e.Vq"CGp#]T]]V.<OKWZ5_So&/[`>.aC%"@5%miKM9,F0[Pa<@#>&<pgT0K+'0&=ldV0I
%is;U0,3af/*lW=V?)+3k%#bCX:VT>P?l%JGN:Qcd^GF<"g(aW9/`I5u=Go$Bl:!^!>bK`1T';tPeJp#nX_lGa30>&Tf_V'G(_7^D
%-jZ32N*pd0FT</-&k.O(fY7OofB2P4KRCP'[9Q^tN2f<=WUWPQf;@4l'jf(IAD4gNBq9QB_#BXgl09/l*8(OP8#iPJ>Ti6,?:Y6V
%0sR4#+sLsp`M'<h<q$t<]GbgBB_&Eq*DAYa7[;2O1_n1j"Y<ITCCdk`Yb]ORZspH&;<j@0i):lhl[Sk?1.=>tkG@0bR7Q4&cVJ2%
%M#VmY23eJqPnX'p*_\Bt1F^4HoIuJ!b[_Dp'GiQF`_=9);gWm(L3s7t^2$GTZBUc)AYsR;M.42TBBD7ER3ZDlh>*r=RHT36ZCroY
%UR;s5-<cl(Rq>QsWFY:P\nWS1RL-Fbg9+3hfL.=b9ia.eTM:)ST:32Lr#pTk0//U4bp7Ghe9;RshH\>b'E66&Jq#6V^M"+To#-rT
%E@Q4'8L(,Gb.6/F,0QLu2npb(B;3b@Gk?p>F='SM8QY(!f9mV%.[utXChI54\Rp&gm[X]9-[Oa^Z?R]_Sr/fr]&oC`H7G2OX/]e6
%m"nJaWosB.I8AAO?Y/;J>6"Q(Ra%Ht6ImP:g/O9HNPqYkek=A`,YT@cTD=7dR9jDCYbEno7=Ejh/j(.DZ>8Ld3j^eN.]9VjQ-Z,q
%FQ-2a!OqLZpti+Q<'rj"W&3N5aX'<'32uJg2PS?`c?RfPkl5=..Djc-KgZ_C8X/olPb4f;23"Cr1%uPkE(<[i&CbG:5UtVp$crHC
%A!)YQ(g"%S^]k;]=UV(T['Aj/.ir>]*<EdKC1TW?4;Fj:a>ai%!laXD'Rn[=kcC`'$@,+6**RrABi0*/UO^Es!X-pql0Q<K8C2=c
%'n>c9nmjPXN\]+q8>c;_fIdU`*DMu1*`#rZNf+1BZk@tGNndhMRoJt7f-.'!9S;lM;tX)IIoVUWkGW,&.HYjoX!M7uptWa&bm5V@
%jHNF/<#T(W&Q`r!hRsgUjnAcV9BcT7KYr7@V:oQ,4KqJ''^ue6h%4uR$F&#A2N-lq`&+fE[!j&/![0`9c!_]OIJZk6U*/JiA?/@6
%"gQ=Gf=/9J)2(SHGX9c5_j5-'XQi9?[qYj'e=7c9!r,*Ja:Hjt8/?_W5&0K&r)9HN@9gbL>RHE_^t6p:S;p]!--Re:20fRFK#+S=
%rpWO_4T3B'l=GP\6Y4S8Gm^G.q>:`/[s9c<X_KrGClCE(FUTah);J2k<LNW>_k#tPYLrMc:fT2m!]"))$"P,-C&@nU@%'$IL\gf4
%"cCbTlSMB#247WKI.'=NQ;Ap$XQ!D/RsopBg.9B2iZsSR8F1OY(#G8B``6>5E:90h15%[Y.''SdS*tb-b[?pnT@fAl_ccVs,[UCK
%H!b2Sb!'SIf\Hs@r><X="n]-CrcIlWC:+FR@RE($;dd)UT?f";J1-qB:YWR3*2/,Jo^tIVTEo:PA%q]T3fM*92N4`)8s2`?e0#a>
%6>\g0_]:r4hE=fA8]O:b'sc^B@qPq[r(Z5:!WA>^U3-]4C+]FQeaelkq3=b.R*%["-7@Di%5%/"%#+3gbRAL)1&9r&AfPjN@&(k?
%NH>kO8UYlO8Y7%]1eVF(s0X?Jl6\.eHc.sEgD/=UBbQ!>=iF7AA%"m"FdXK>!CASS;&SIeQ8IW1QoHC6iG`jrJ4+e:<Zc"LkYEGH
%4I5GNGg6LO2OJ-EX]m-Y;303o'Th9c-EeZMk.bjk"4jW_@,s"=<,8a&=9;]Cmp,o%50A9a#.R:',9LN!cOcCErcaVT0j0[X!h+FL
%>A2qTH*r=".,)UiYi9LnOb.ACIk&&8\8?9?S:H+^$W7#o]ZsSBD8'B%$MK#<c"_iPck#@W"I]NU%Xbtj5CI_(22NYPMXi7[d(^^f
%]98d3-e2QI4O2umIc%7QQ)-M4I6U):rA[/ZeZJSVf[RZmoX&PM8)N.[WQUKp3XHH,KVLbGgc]'I%TGLceM/Ng:p9>cp%rVa8TD02
%4@=#b3(%HZj+/SWK3mb%Ctq'Z$`.,m#P5;h/"#J'SnH-H+(rZrs'\kt*7JZbIMWP1q_J02/hZJgHKPT4j2^\H;7?OI&pt$$"\Bs&
%*a1Ebm^./djrBEH%+Ld7VJXi8Dam^hW4(R.L<:8hJD4Xj8]T,M4*LKEGokTh\'pnFqdhG@H$e`-Y(q6am8l=Q*ZRqOAIA:>9&b88
%W*UlK4cS>XUK@f_K"l5ZVoJVmWKG/815LDT\-$`a6ts:5r3G04GF]ndI\%^hp=issW')"h<0:"f$h01n.@euX&$'I0PFTj>K%,$,
%4uN>MNrk%`T&tJ!:t/Uoiqms(_t`c-`o3oej7(9k2cs-/q``o1aT)3sp`0<BrHq],%(Z'&%%6c!S`KSr(.J#qk=Zo:O*?&fl?RVh
%]H*TsgiJRK!5-MS:<E$fh,rlO1TAir15Zco%][7,keK?7k14`29n*I8cK5G"L@R\[.u*`oDP^+0i:$P*4>GZQ9h`.cM6,$tS"->Z
%]gF)rVIerATjt)-UM^c;9;u=#;T\MC\cM]en'ef*;i-Aa$X&7%Y*YtH1?g0hb@Qln$Mhfe!k2`V+,@[@<e^MKeIY83`>s-cJ;"po
%6!!)4.2Qr-+QF#!Jm0gH`)Z%4UeXJ/OO%:e1/P+'NNOGJ;YT_(0AF42q@"<XV@6OD,SA"K^c4j/,<+Hi#<>OO2`Ha"^pd[(E,k'S
%b8@%?o+?8)![=2QJ?##*KC5MB%`,i":a,)0XhDF!a*d[)-HTBpX`SXR<("'CG8YLM)FsOU4`2G?=Sk=0`f[U\NlB^2KFGWa7S6pL
%)b?`^,.MZ2*/D^nm`i#N(omrbH69K&NG,DNe>E><bud>-fbutNU$OjsFeJ@<4g8[Y"O"Jr9,3l#+9O)--Xq1O+:/>eQ!J9;(RD8p
%JShl'nU2iu4Y>:[FZXIO&cC+V%h-t/AN;uZlSufcKEJf7-%+uu]60nQd,VZ$i(j,<1M2RJ$:@^l^;aopM`?Jk2d2akgM/"f^[K2>
%>C&tu2kq_T]"ppK](L<)\iY9qP_JUL^emqqSn9:Yq_nf\:N\SpOCKX'#&6_hBD;[[o9bHBp#n/nCm=WAQUTELU),Xm!%]\ONS&r'
%b!@2i0j:>cg.b&EIM`;!n2stI%_^Lp(Ko-G6Qf76>hoY[,Nb0mQrdd((/MQ[9RF0-UZ*P-@S<!iFRPZA_fDAmkHE0FG?W:+G<bMc
%G/JQ!]@/O4h<d1<C3sst<O5rFDLK"Qo6l!t0Br@0])ZbIf@IE*>tJ0eUo1#e5AV_S.p'*8U!4"Z/3%^oAm\#j*h;.L'AJ!8l+5`U
%E$,-W8Dr+GJ?qSc\P@9NmT7&[j2TACSbN-D!PaeQp@)p75T4@PUOH@\rS(*mZG/^EY3OBAh[HNda.0Yu]4b@!M*U9eRD#a^/:+*@
%`1kPL/Q#h;cZC%Bf/nuPY0I]O2u\'9YO%rm0OV@i.J9q3=3h9^(a)";j0f(?R1;TYb?U?EZMKRKmPN2nJ7#2U_Z189]&KrAH.c9@
%rq<[1M"l+mbAt5SBfp>#4On`KO(\C5*rPrG:k.OfRbC(sFFrD)"P.4qH`ZR3e-2lXP)e$@=*l\:X7H#$,bl\PPgfDU2^1a)Npo(l
%2;SkiN"LobD&r-4f3^uDZY`S7YstRrmk]-h'u_o>mX9lt&K[3.,0`X)PtpB6h$=bPot'JQb]Z311U=Cl6g,)bRM)csWt>p3`;q(s
%+beNrEd@GcCkotU^O2]6#^#Fik+4IB3'FGE2625_Y#SbjJ''*j(-aC@CNY?qZuN5pOLEc7@\bJA(hZ&bE=\T*[#LRR^)PC2@L?&o
%]:Ku$.b]+0n9eeWpAJIMe0$3@M6!gi&od![o^3;sePuMo3=!U)FXB[!oD3hK,\Rt>NW8!@Lqs&R8(g4emc.0?m)pf0!<PA+$`jJ+
%0+l.GEe"%c&Q(Tb:jB<]Tm&]:o9m=u#9AF%gdTu;^-UV/&m2_,SJLVM=,LB:j9/Qn?"<4<bhMjqf*UE$[=oY4@n8MMqSR#h\Z;f8
%(E1BjRq4UfhJ^EY>'%/O*EH4T?1Bn^Q=nUL[[V7XD1/Td?'a4[0B9RIlW!&ls*Vhim(q_?+0%c2cFV/:s4Bq3@A?R?34M?kWKGse
%l\X$')5D'%GpXdT$'DCV%EiuG8e&8%/_3(pc?*3,(VG^e^<TZJp\oESYO&N(35bgV$.M8Z;$g54l*6gL-Lr@I3$e9:QIX]S]#n_L
%e33Fb'8[LGNRn>hL#X9bb->5:CPHc"B=\M\lWqMM>N_F">CSco=8(;HIMmmicsN!OWZ@H+4#<%CR[9sa$mX+Xd6!cnlEYe?KJO*S
%jtIGEcG`A_8n`@OJ]Wl6i?-)2.VcQ$hJVCo^L&W)iTc!/ac@fu(fc(<?(\kaZiuN\\sLldJ)Xo7GW:qEQ8djE';*;9.XYUG9:g@u
%\DaWXVr3[`B@kl#,<q,<,6782q\`uP8*af-1RI4saJ\Rgl/5!\Y"FZqO*hkl7m97Ms*EbH%=c&R`P7?!KX;GZ*_f,<ceg\AkL:Kk
%(9e*Zeka7;7oI^CBc%W1bs8_pI^Zf[fQF4CEh?LPGi%2!G/J5fk/%aGbA-5DZL7J3pc/e=n[p1@E1E6KD-o*ep2gM:h$3sNY2n5X
%WaWG&h(YGpp7:%/RusUI_\*ZlbBtq,Vt"iJ%HD_,kaa6sE8L:G\Sb258sI;8fVEB'p10]W1jjZm[[m0cS_`Y%nP;ftBIiJNSa>!=
%WHlT`0AH6G7^!>@ri]ffg\odKW/3FC9Amk0;$3P6g;b(+j6]b-d@'BNE+[TnW)fn0?X?>dFN(cipbL\YFWR+,m[)7Y`mLrhl1Hk,
%;"L$b%5@lS3Yp7LrY]+t2Nj*d"fA,ebJ)i)?Z5@sJA6!e[*b!C&_$4G_5Zu(6D(^d#X2X&p\j)jA(_:H%mOq*l^S3X`qul&D0g3@
%![+t1_`/.:p%,)Jm=(Vti7*"$R89<Y`VlaT>NlO</qe<'KP:rV[;AphnB;Zo/rSPLLXJY`]sDC&6b%KNXJG\JN8Jh(%2%0)Jio(=
%Cq#$QgOF,'ICF[ta2Ni(j5SFn[XJ-7BkFstSCqcrV\%:hBV(P.[elo1*nN9M[@W.#VX)=AoH0dbh.i/GNmc`Wee/VTVt'XrUb.-S
%bJ%nMVoFe81F&BO!f7*"mFr)sb"bh.rPti+I]`52eG+$.B)EHAW(QC&`F6:o1VXskDu4i:IX`2m,c&.=Nm;IMK/99gLYZ.=+.%b9
%66YFM%%$Lqe9,kF],dCZ'bUbgoAfC`PV'"bT&DG2Qb&4&D"iPqiubGda"eSP9F4`r@oRkJTt=Mr(r&:oWuDh'IiP$uDhhuF^TaRY
%"/-6Mgq[idE!u(3EEB%M)/"7XI,Bt0C`e`1[/D0JenWtk'))tcQ*YoLQqc'O,_p@q+[8]'#'uQqg/iPQFJmaD-s`jN95UBs],E4m
%CB5m[SbGB(64A[n!^gs2kAfGCXa\#%SM8^D^/@.9R?XH#fK?]([]jb7D>_dj3"D9B<f*YiIY"D:gs,TL#lf`b/"5S"<NPi^*M&:R
%e^8nHj5j,K;5.o-[o9ZZ.=[H[KolODp,%`EemVu+p[t*5m$mOk?)T`uoB,RCF-kd5"uQZINScZ>r=RPZiqmnDCA^%R1]F?mfqPD&
%a.ubjm="f#5*tg=D4ZN\`k*$ZN.8a)5U@a@q=#UO_;!;j3fS?UE?:\i5Fs>Zri%Ck=5W-^c5W!#9[:s]&*&F,3K9q(;2:E^]f?cM
%nNf(h*=A(%D7TJ+E?gf73A#H)o!mTG(ZW:"-Xrl%TmZGZVt'1N:?1S75`QD9?iG`!LU6X3:k2ccR(=7EPkWVgRn#IjGF*=gn*]4U
%_f*PEiDW-(dA4DM'^>AAo'$jCn\]d6_c,U9iL03HI>XIYW(G0\HC"pMXDQWTk0)S,I9-(ujOX2G1@&<:/H+2FK%P;!!nG>;TqAf;
%>&SlNG)"fKq/D2`:SgDS0<Ngsisc^'])HpV@D0:?Rs"KC2/5uOGPE#kXUbXbQ]oh9qt?gkDW\O&e'HfC2b0(eq"L9NcWs8[n&Z"C
%n%Rpr]fDROFa+jfZO[rmT'f&m+jf?,h\8WDFS7`nNQ+eSE__C21Yk1=c$FFVac4&=s4lk3'Kr>Qj`U2L.j3!HMn#j4(NZ,j\,J?S
%@f9fg6h?,/efPPIn^oo&QrL!RrY8b[kLTM:1@&:e4S'8X+[6qWJlqE\NJ6c;]pqUUf$=RoXFKSY;"f[Rni?E,N1,eL@lLK]:?Suj
%:'XpCA=%4@#E]H=\N[Y9\e&Z5mTsP]d*:mHV@Tm%\F]/JlbDsN;I?QH&$L%X5J59U]tBA'6<h'K*C`BBoFJ-X+?KHuDJhthK'V7Y
%%*OFT)9*3Uo!n'glbDsMoFLLd]_e5Mg]dN&@gq\$G8Y&7Xe07IXFKSXaNq_ps.&g?NMfq3kFB,b+.r(KL>;Xa[M%n5nN,t$;Wf-.
%#@RtXpHEN_[!qe;o*i2&oAL>J++#&t#&_7I\@mI?;uH.i_YWMB:@%"ek^c<dURUEi,N6`+mWhj@7_/>cEB?+oF.,;jcJuXRhlQjt
%n'K=H%On$!kHo^5S^Vo\SMddODgl>YhRfD/#;(RRhsPpu-#Rsk2og!.5!7/*rGXNQ4+F[;)qP0H'peNjlTrV_=N_5q0s%!BAt1$R
%I\%^hrf(A#*WF:;BG-"Q95h-tjtM76(sCtsjS/'*b]Y"sR/V059$HU@m:#t+G`2!ppTnJ?gX2GVIX1"m6,%hTITSffNs'4i::ZD2
%CtI(&NQ\frIXb9RmS/PbB%kCAr4X+?:Y"pgd@'BNE+0JD'31;L(in[-C8,h`Crak?f%\/]B?71sB?71S(3N*E?tlWXlJ!=Z4!oT%
%VbcWfX@K?S_cd'RY#D9#8`]MUJcQbF>VGCqW3<22F^7A"mQbi/=O2?ZMh1OnA7_76Nh4-lV5'i`RAaVaFZE.f&lg1K0-)"_o:EZ\
%XQRj#(V(UW3C7*;\G_spTH[XA#nAOq$eu01Bp1:JMs:MbPi%cKs6CTqdn1;+\X]iXg3_r4O!2)=U#OB.4KmMT_ul(4rQ62?qo.cd
%"*MRp)WJ=6S]kUb6,t_O+9#r-nt?;&$#tu8RZph&+A#+JfhUT%h7+QGbt(%#BZ]V%hZ=ae"28n\dJPC9LN-JEe3O]7LGdZ4:Fg9B
%pR`h#6PSV1>,'X-%kI=_D>poZD]=jSG:P`!qi:u:qP/0"&*ku#q)>&eGdO*@7GrZ"lVHj69okY4@_<cn&J:8fS+V48f,7KPr=R<g
%jMq'.>fWbnO$PnSn7')GL?f89p%(V41V?lZ;rKc)CAjMnk8@U-\(Q"s+>\Jjk4A?alhu1?cB)3o^8UW3\b5!P4O9*n5JHFS%(Z&K
%0:ZZGXWNQL1&ahUX(Z$;Ciro7AlmT\1q/`0Xkt4$et4#\g0L=`aK>1mUt1#7:-at)%diad9=O-tVJ9tae+tZGg#9@#ZrV9*)A7c9
%P-g4ZR9D")#g#93cu,mepbsGGZRfP:20_Y@NEnJaR_J2KITeTu87BoCpH![j\*CJ/@Mn)oF>B?248utIc3HGWI6IRNoY/a.rUY\6
%?'iAGSjRL3528@/_tU(fp9JSVjjoS5rY$fsHFAf+U??f<m5jNE\=NP@>])-m_(lp!D;)DFdpV4ZgEmi28kc"A^A'!tEWfi7qO7+4
%5g:6P*X+0a"prt;8P!;0^H[[MI&b<J\)VPqr<.sS]Eg>F%tVO">?Ecso'RkbD',**O3Xm%)b>p;3jI09Lb/_),ioe`f6"_15]g3&
%Z@P!Aj'-6kHWeu>1fIp<,D*rMe$!g9h%6#Yj.`GCLT2_.rV.O0%XQOZ:3W-j/pgd*gDd'&4i?;g^X=;#>C-FM[5@kNQ9YR*NU8p!
%:3]t>KK+QGhHcfnj^"_mc.XJ8nhSWtc,>o-gP2dh?)=^ISgGIN:Rk]W)s7_Bd'"S`Y1$[RgLZ01G'i7c[tf2jm8l=Qj(k>3#[=`u
%_-(J+UH7@Z?G>#[:trquH#K#/<0oV)jG<#'I[u@<.E]$L-&9I(T,J=!q6N)'W39,/bNBTnlZm.'AG=jYq4(gVdgrWdc]=`EmqC=b
%>4Wg_ZT<RrN1UR88&+!!o.NCIl]IqWahQ<r^02NemJEt&hY2tm@NalYRf&G0i@Zc.Kc)a>[i.ZF1<a8j%+q%YQ08aa,/)iJ]8X6R
%M4@ogoH$SfS/-3g:*XTc^fFbWaF>DcT,(CpMO3;NaFlGVs2o=7-=/BRlD:nRMnFq/S61NDYn%9MCD<5b#algpSkhB/b4XDuYf.b<
%j0DgUr3FPorqAEZ?eHQ^pX:/6Wj1IXrE/imDoakBd(F4o0d2R9rfj^_+js4]\Ge/=O1P)aJ,OiII5N$9RPr7Hm6Cjc)[^:#('35H
%a2&gk9l,$`4rLY!b*nE_$D!`/OK5.c[ip/Ak<DLYTU%==);EY"a@duhcoR:.+3*c]nNP"=_c,UonBC[j=oIZ.a=9q[l<h"[N.6*0
%pVSfIT9"0mVk>ZPWbo9mlU9Djk4LKYhi2AZB[5@TG\Xl5Sf&bHTJ)pheZJ%)qpV7C0(HO/J\lAg1\$#_#(;b_#!sTC(u"]>%6`(.
%UaZ>8:Jk_%f7n2o(.rDQq^jc2$CrK8:LXm?Co#%aZW"RU6bfel$Eg:,+3F^b!k>ogDqr@9]:PSJ(MNaD,.%Vu_`+r>g,cgal<5k$
%pYFJ/H[L&#_27E"BPOp$7":o27XCIL3CN)%Zh=(do=qk8!(Y(U?;.r%X4-gpoe-uHcY!-bld4.+h>Gao08FaK#<#U5e?Ftm].S!>
%Z0e#,au'L"_='Or6FK8PdA65(HteX?^=_G'<6m_gn"e3#&3Q^k0tEN`&W4j!5'gApQAedu.*4P&SQ?WJ\P#N^EL1F9of?1;8Zf1Y
%,9)KLk:,;IJ*X_*-&>1A[`@T-dCJdD-REPjW%A/k)*O?bZY;QgFUJe-Fc&QXSXo>rp`J6Jr1'J.]I&A0JqF=,BTZ,L6)[c2H-t+#
%X:QECe/`U#IiGf%n*HQ_`dd:kkVT^rLU5W_l/q4j:_s:Bo=4U1n@AtD"C<>J+fb+[\qJT1c;+1IAFNd-]JTF(d:7\'SSV$C,tun_
%FK1KYhruUJGoc"DFsQ/]ku1+Jn*HQ_7[/R?-3<aIVh&=`Tf'6jn#Pk/2O^7r/sT&8DX67&&N#Eu-#NnTKk1SHj,*I:J.L/;n&pb:
%Zioao6._pcL@fXJ:)dB6ACMB*c!^R2nRO-<#A'Qb-5>u5d4U&GhPPI0#WQbjGd+3)R&$>dQuC]k=N4]RB'9Ut32U:,>]ZYtH8ThC
%buN/%T*gV_]bFiWqW,e.&teLUj_QGVEtk0K1f31JC.D%Lmr04K29c>DYq86]=8,ZHY$/a(rB:#&l:HeO`$J,@RW+s9M2.Tp`2BEi
%e'lu:g8)o62Q3A]VS!O!P/qK'ht*?-06nkP)SE/B"t7,kko7rdH/>I!)ijED$49X2SG'oOg!\0qgiJO8[Y=@EoIB*68fo4e!,;iB
%\19iQa*/o+=5A-e5mOd2^;X%j1%qR2Kh'f_@b`f\<n@=>$+7n&#TiDXJ8?e*ZbLp(I.'])oWpb(n1/kNnWiJB%cPUb/Gr/=$ZR%B
%.HYGo53Vj;YHdH^KL`clm6"8DS"o9SNKk2b+g!]rl"@\LL9V8Cq_p4Y#Gf=5XYJUjL/2NGP+F_?p0BV[::c?[(H5`f[(B1BnSPm;
%JS9fa-.EAQ#W.8*4=\pbY&$7nn1/kP^T_2A:N2d[`,o@i`t6NsSouLILc-<,])apgD3g\k;\uC'7Tuik%N<L-/PUCl[3Mru^sTF!
%]0CM%iuoDKN,IG@U?0C=[CGX/6cMj+)9bqp`/L*4,J.,_],&2[3O-_1>-pMX>#NV6muqa*cR8Y5*rGNc)F8bh);-(hD%8Xfrc'Q>
%p]Z/hY)(LI(=Oq5ltJ-U_kEB0piq4"$mQcO2V=J26(/93TYN<.iM;@7"9o3R3,\09kmGg;$Nj?q_kDG++\[WQ%[g#ZKnbWYp(KRH
%2+1lF:\^2<p>>IHoDsYeKj^r:fIY.hm>X'hh2^F^#hfI4Xse<BI&DQ?+JTRkWokhgN._?+r%SYZ\oE8':Y-@=@?8CUQWhk-Z\c'/
%X/=B"lAe48C33SSc;+1Ir"#LD1)rQ!""1744MG3oaC+BIUD"]d\u%VbFAlLZZr9:BHXKpHVgL<"%DWqclgP@@1U6=cLRClhS*e-Q
%nH.5E%Q/-H1Y+o.3b7[$=0rNuGb4KNW#$;d9;t@TrV5.;QP<kb.CX__TI`L@ad?hfdX)9`)KNM@-[]RiHo#dFa6&a.@HEd)NZ/f:
%H)rS"%Hfa%6n3emq[tOdZ2\S7Q6S:FO&Nb1s3=-U4imL5>"YKW7j&6k+DUpdF830p[---?_e#XcZtW`Id[IKQch"gfs2kaT,5FR1
%L4ZmIi"FsO)S3uOX(d+[fg;Dr*ltob.+Tt%N'C,5B)G:cE,4l]\uj?[?9Vc+Sfb05h!OO9g\>W#T=CEG\*4SpL`TNCD.VPafU"`@
%fG#gh]Yu2*05HC@&dg8p+F7(/^;]Eb1q'CY=u8@PN7n;^B=IkPr,5LiMn#"!n$Jd)Yu`2439qNNcL`IJ)7;1#,IF$!)Uf;n2^:1U
%g\BDcchV2N[j`6L*0Q3FYN8`iAbB&5p.[s0@iJPPoc%==-#Ke\]uL.83n&cOANG8<k;hFYJ*!GOjGn](jc7j@(JrD#$5jMmCWFpp
%k!Z$+l);i$Db$F+Zj94q:rNl8Ic$,t*f_j].Os=LgZ3%5XIcmbZ]VPVLBiN*aJq_%/(:W3h),e--7/f"b1e>OneSdGVF37E71)8Z
%\%E&F$'0YrA#-WQNG?(!q4i]'o5VLMBD`_5\`.5a_Ps2no\5irD,oZ*$(RC'RZskAi[NM2h?VGuCgi<am>lGZ!2:2DCTc],.,X5#
%'uiW9V<6gF!GDN,Unub!G>2Y..LtcWhf/Q=SY9GYLL3F*SZS`fY`_%UP5qg^pk7HRkOS_hZDTm!i2!Lq.[D(n[6?n.n5dU)B$MQ*
%Q*@Q'Ppe/)e=8#I\%S,s<,2q/#%@m!-oT7KSKdss4I=F3c9inY1*P5^7'B0?=RLAs*>4`T@BOJc>%ef26KX/2PpTSAd[otGjs(eV
%(H!,uf>&ZWJ6K"SX*e>kF_io(jeQWrp8+PC&]m/oNP2id?&c2NG#*^QdV!;=gaAf!,r>3,KTU\nZG__3mB(8tXK*s0%6>*ger<B%
%nP8]*HtMd@CufB,h'F>#[am/,i4[S.>/SqcI51GkkEo,C]AW[.g'JJ_O:o@s%muh'`sQCUqki)B:[2/1`&!uj6"'uILc,Y&(cP!U
%d"ZEpN`A(DoMY^'#ZMJo7sDlXY?IY00+T6q.T*/0i.1pDFOU$,@FVe(l!+g[(p$3Iadl\+GuL4`Coah<RV_7Hp6EtUmoM=&LA>Ap
%MZ-Dm(5>4.p1'FMPlY@$"V1[!RaD<A@%p<TU6-^%TN,m=e`_KE/Vbi+FTS`H\u!c@qk/F#:^NNUl6(DO<'9SL*'!dN_`8`A,k[FH
%Vt>h9dm?RT?)^V^d3b&7]?-IsDQ-[*f"dr+";^$*k=_/6Ej.RAcQ'iF=&I"@mLBdUD3)<!MdoCkj_7._Gr\Km*KhB(#p7(YPn'\3
%]qT#;S\#_8IE4aED'#hC-b<DT!>+Z\_sV1%Elgi)?&BdHrQa1RQEKQ=?7i4V'?B,.3gV]\:S1^92`o)bp*-0d%O=fW=gHO\_:rs#
%lMXt:WZe9nL'"&PW0+(+qV@k]Wg&toP,K)'aBV7[:IB^g\hQ`Y'Med*cn-(G;e5`J1K6k3JGu6Kr1u\`<0om-;)rqs97<$QbSIVQ
%Rg:*]'52EdQ]p9e)PYM^Mo88"qD+mn+OU35/)M^ATD[(\Wo?7<_f`_1on$I`G1h:0/]sbB)ep#dRE'9P)AQ-220:*,T'953[p\#V
%F_`q\DC3=5GB0U0n;9:CUXQY4b36UX):I)rp7]l'+;s?DX5V"GU3G._DfJAM+Q4:@&59DQ6&IMlhiQW(J'Wc6P8E?<n]ptNjTWp&
%"/(C][TDi6g@@JA1tM6t5Md;Op[,'p/hl0*]BTtN^<tfD9jXSXnuG,hA47$GVJ\`S,A*P$qt;a_;S]\8Fa*pnKR,Z.D6g7@?4R>^
%H,i4D,CpK&]LG)GL1#`\0mLQVq.>.010neEL?'Yo>5L/Ohu<*4(OuDPhIAC]hMQ\\!aX:jWeWKJWTQr7B7jLuTeNZ=TVp[Um@e^<
%:hfp3jo:RRi>i1ef1g)1$EjWjBXY!k\5TK.,iBHE=Hi'`=s\Cg341(^o"lg@=)u*3hQXR>CP)5XKf&,]CaneEc"nPIU=nO=irJcb
%rL[,1&Z\+qnY$#eU=Bs`eB7@')(6A-B4@]cJ":>URhV7bTpiXZGFDnZ8if?ejc&N<>BiMjY+u2B3X[k_[>AdmUZ)T(e"Z1`F0rB#
%d(O_&=t-Wa63:(bX$6JqgYpFT>)f?G_H"UUh1mSjN=:c'3&4X@]T?ipk4c@bdi)0Ws!1"['^a*$EO[T2?]VlBT)2Ta@"+TQ;7]#4
%6&;IP,i:aR0e/CG)YJPRKYI-9AM$3&.I;tiR2=So1JHL91[INhEa/"8.H]dXl;Ub;=g`Q5D]gRXkb>UG>D-r(6B<+EIOAPVh8rb@
%qWGcL#cK8T=b^(grY:'hGdR2>cE2'oRh5Ab4BdHD/sAV!Bj*<NF=d)r\_X\ULYGV6)\:JIPr8#onbYpKFY#8j_6tF-;QB9PbI"NQ
%?t66!oGVd*oD=LYdqZElT$1ZO/JRUbH76?<M@,:2ip0]s8JA.knC!g@s,)*5&>nr),Q#ok+K5KcmRqG>;uV(,(Y`:(Me4la)`-K0
%)Sb?Eqa7=J3W0!`+(0i\a^2D6p4G.bTs:<P!P2pCW''hC0KR<2.9%l3,DUlZS4:H:3oTLf*o!tpE>@b7F%jZ3\@82$XBI6^rSj+9
%!&J4nGDa8M89>qIe]^[Z`j8=.T07q-^Gmb"ekE,,qW:cE@$]2oio`:K^KEeQX,:T*2Y>2,8K@m_6t@AEO6_Hap*aI@L3,E>[3gLq
%Eb]+J4$/++LB42(J:n-;==Q]'0rGaQmmm'(_)a4@'LdS^H_]QL[41OXPZCZ8odBr@%\AGSma)WS^FeH\):9h;J,NLHn,AW5l/6n1
%NQG;9[o-[M"!-&<>f1!=[7%f!8+!s,LIih@.4n.=&3c.53Y`G]9N<<a0Pee,<@dndO:YBqetIh4!(gn-=8$FZkhfMRj!OUY:kbh6
%!W9s`n/12hFQCJC#U'Wi>lD;*,,_"FQ)Y!j.UbZ"n[-"gC8j%8+ulT4'A^Q,f;J7oPZU6BdpYq<`_)-i_<PV4%/Tf<o<Ki,?;EhC
%-6M^nFSD%RW3lNU.65k.5qVPJ2PgX4eN!nSLp!cY<%70r3p^M6NK:4mV5@O*_PZ=H,.nh)pqDj/15$X%AfL->]!$%0)$Sp`+'<Lr
%8n.g;)j`uMS6hS''su_sW+!jW2WfZ@EH;GL%J=lBb.#$pP!JG?AU$B+\qQ<03ptNZWr9g,cJ`'nVS%k:H<]p.?!/9.go360[P9`[
%dnX##1o)dgX';'i:fnHB1]*OZY?&moYWn?en5TIHItt;%!4B)[+^J#\9s?5"m0E:gATGgVH:VpK#?OCP>'oSrC`$\\B845Lad#o8
%kFdldUss&gr4JBb(LmS/ppWhV.'9!13f/=8QOQADgm]4fDPQd0P4b15,Od^JK3L\-Es>fQ><"T/F(BRm)jbHE!XXRhPW5MWd7sSW
%+oALJlsIJ]2Q+(%q,B@OA@RbW,G!+4dT1BAHsOo:R)SN=Z%mZ!o^hgHk2PGj#-Q6+&Z-"U"\DIFNj#sQ50g:K"i');edY.g'!?il
%o6g13X6'a0HJ'*2@afOt<>bW?cC6kgKJ:.#6]phE1eA!;js^W?5i.4aX2pu1]=XRcK4-(dVEU9#b?JIMP`b!?k:#Bj=.b"$X8T'J
%e(p._!g;=mnS)_QIm2moqW*]Vqi=\<Pms6ImQR*M1U_eRN`AAr1<"\?*qO&gbOHX1pCS"0QQ1cG0\lr&5X?LH&eH<$gJ[]UKQu81
%Hs&0Vid35XYRnsqG(3C,"-]A9=(\iF,ci)(moH@#]%::uF=)pW..c5hU,cPtj14$k;>BF/U0J%)A&Z<i;n:Ml<nEDc]hh[@%&[J4
%fDkC@2Ng\"Iu\&e8TaNGQ9d5k%q6@s!&1JeatXmemfNK3m.:%<.t;kKSO*\W=]'2Dp^u3RmeHP0$2^^Dab0Lif`GOt.*A_X)RBC;
%Y$=([ABBLeP73dSNan/OQSBo%Nf\^i`\C)iYCC9?@g,#58+*QpceP.3hc4c2gCb$l>p1^!FZm=EbG8I$rN3Zn=in^_]"#$)]@,-*
%g#P1T,m*<Z<'%KgU.$B#PuFh:L:a<-V83(<s3l'`T)7?FZ)&W*`(I>[e>i;>_$.$W*7jR^A;6[\*CQXtUA\de\b8?b"44TBJB\IL
%+3Bdi7HAM]5"@(ATqRUk4og8:RaU4#<K+[;s)9+?XZ+`'a"9(%0_3i7mF9a54F:mg2QF0-S72eA9\$quf&h8(Y?%Pjqhi+%;*Bp\
%Q>&#(59V>fqE@D5E>^ir@&Yr4aunHChTp08>_\^UXi)&&i8b6[jiV:XXDNbKqgid_P(n\L<"Ocq?]>P69K0F3n*Wt*h!^VKa!;sg
%acs8`6EY<hgM&_sSJYIWo1/s<L>DUH3c]LEo]@)8^?;gcj84.r0E-4&2SO.q_(62VbnRFm;Gr/:b:Yci,2Lr]Iq1[+IW9+;1*W8t
%=.8234n#FOiPMMpnIMWW](I(N51!(jBs!@-b\S,unAdD`,%hIC'J.SGm3LkC[JmWfdMYQDe%e?lhlFJjapVc9*9/q*Baair"@=-p
%k\_RB%gAuR=l505"SMN#k[U=[0<NC1LJrr.FK_WFf:9U^d4Lm.>Nu^=bk@:P\[7Z.UPuQ?eQ&VAh;dqeZO@)QORX;N.Fi#W!5M$+
%bH5Kb]id.ld(lUK@eX6_`P1nipt+^2/HVs0;[3pVkP+cPe2d1%7ieA]]`&T\MA[`ZPH"$>oDgSAS8-Ej;60#CbD7_sT<YatqQirJ
%Mq'b^ZqnN5C9u"e,YVJe12Hd^\GNb=?JU<hFkMeRRn.G+W(uO*Egs]Q(;c$0e[+Bn_p7T^A%0lZjfb'Z#B#Xb6*:E)2fn<'gW(#e
%.O"V]fT/249IW?Bh/JWJe\k#e."Gc!e.mQ,on\%]A!"I_XN"IA?C$JgUp#G2U3h/CAtJltFP)fEeQ=@[\,KP'4IcuNK<Q8#T_H$]
%-RL6Q]_WsoETT\@fg>VE<g=!42(R0VKkQ@7.-A<ECp9iSrKNO7eSA=cY.]U`6<I3!/CBlJXdN!"10:=@ko(m*#)%e\CUR4)Y3ope
%cE2ABeog9tj`Ojaf&(r!pirB+rfn!b3*"P!nGqMHCZOO&VXh[\%[X(.lDml^LiKjleH.34^+ZiK7c.,SO85ZseuB,uEC]'bpW[K,
%4NPr-><s.p+fE/8;C5?)g6C&i-R0?5OU@1.gI.=X*VF])<Gti-e'2f'U$,*;j18*iRC?PVZ[_((o(QB<]1.D2U,ql#@M(,f'D1J?
%N>YUo+s]Q*U4:_2'3"dc^@*3/4$3o'ocB]L)#F4l,%D4dj=Yd-8S@&'[D1-O)H29+[fH-_Y_5",e6":->Y$Cp)oeBn!9:d_9p`;V
%UjNO8>5-C+X9DQhMc`-m<"<gt%Jo$k(Z(ccrlT0Ccg0gO+:T'%aIhD#h-l>6bU1_2r%\",3asTsfGO4FoH*W=jZcr[-u.PogaADD
%1UWf3`VK)smaFWqq0ogJM.uNu6^7_I%9?)Nk]h^!NfH-)K0qXuMi<mF3U0UTQpHS&n0M^fW,t:C+S9?Tdd6K8O^d#R8JkT+mn)cH
%JU]r(f#W/X)&kY),tqes-KhF8Fr1Cd[[t^'IeY'X>*aE\IT/Q%>02)cC-2)%f1&bZ.3jgu(n@G&dM1rWkA,COrb#d2rnCoYq+AeL
%3'HssX;WP%2>+QJ/o11]0[r]pG1.GCW?\X;HC[m881H=hlPb?%o/a'Uof;E;(>s,$=a*<:F!V)0KU%"ILPtYhe@XjcVGIDUgXl#O
%B?CgrVSfN%qFoS5h'&F'O$na9l3TUMQC-G*X0RAP1`A#*T4LZGf_M4-#+:-3e?R`:lW7j20[C?q-!mr$_Yd6/Ys(rULeuWQ#FRGN
%RE$Rql.n'$A'Lpc0HW(a;g8DcfPAF^ZSj>G.P^r+\?f)G:^r^,doSHX=SmCg#H[(2pkd$qqT<.#/\Un^$gA,&l`,.p@A__![:sb4
%$gWWUkl2a[etHigdcg6n*rG1UC\*&F8V/fR2hXEhYoB(P@l"Fl;T'3ZJg!,^M[Y,\?[Ou\jjOiQ#>V1&:VZ(KW6W`-e!,MD%X3LW
%,:Bcc>$GS55)1iB!<]=1A%1GK#1Y4M+>rKH$P>k-ra:0bi)_t@s.Y\5haA""Mnpc5IVX(/,64R%[X.5%4?d5?c4$hH6$cM'+6qOD
%ST5I_bB%K@U^-'K/Rl><"?@^;qQ':mj@MpSBS%X]&W4RW^d)N]30(QP"hR3sc:X"*Q$O%h#AmDlH0r"-.V,)DmOi&[;QR_p<AKI2
%<W90QVT9KhQIe9OKdD%/'`J`A=Bjj7=h,)*Q)+iX`HS(fY2\1JCTP#[*Be[@oGo;*9J6OYgL42^)hAdl0kY?=5ra*O!#"h,NE_j.
%qt33t+5E"d!.&hYQA$,RD7OU%o/(Auaa"Q$QU)$^%nS%ehcgA7)Vd;H&P\jbWoPIS^RA)3njj!K[[=hMp0JU#!l@26]V=mc^RRVU
%dp%H1pim&pa4R*$O7JlX$;!Tr)3&J[D7AnjdV.+^7A9FdNAMV76ni,IDoDOMn;)%-p83US:/ujW[3mU-<n:IX*"aUQc#&J70&sW\
%HNl*N/.9eEJ$o9X4TdF,;T^,#jMS?=&F*;)IpXM>.oL.-hcPPX6Zn<`c]&qPF`CENrR?TcEtO)Ai(5[GNpSci/6^\2%&3$9:k*Sq
%nZ`$n2FLg9gI=Sm/BZi9mT!@BUsZ%70`[VidD-0DH6r,)B;\(dp0DEm=i'V86WNp,VCg.q9#,]#Z34@_=hi)#53F1`=J*M*DZ85o
%V:BR7.1.o52V"uGK\=4TU?#E&pn^`\PYC.6)Mn\^(4-K+4;[k[prN8UoM55%9]Vl2#`Sb3oO:MsD=Z$<B:GXT68CpEO`Hr?4soSJ
%HlMUii"0p(I7:o.*s.rHj%QoVY_%b\SFFXlq^WbK2s2@bEA/)[!=B#-(Z#6c[^AlL[@2M)+_*.Z6>'+D6CUHlq$pGn?-<3VFpcDH
%jj`<u,e9`"H)N7&->tWqL";tf`a=pac4aE4nG5Wo),D`OFcCaL,\RP?]rCrdl9d@"$:M64h5-:_9l2":LjV`f!;4c4,mNQE;cSAU
%d=>f(,"FA"lJM(aB\D7@.I7j&%'No/,eDJ]'MA;/bl;0qIu,Eo`V/C1@nVFVJ7eanWh+uC<@cgLn-[1VF=1QU0r-Q@54JZUghA8>
%(KqlWMT\BVB6c%rT\/gi6,SqK9^'MtQi:]'XU_N:K<-(?X[4?$nXWIMGOl>9gL47RX\Wt)$)^,<;>J8?)K7Z&TEpDplVZ+n]DM/"
%oZ=F,@'rIJX.FG??75=HX/$`Ss%nr8(mg"X*jpj0I!B#X0=cmkE>%5!1_CjFdh\MLMA5D@oG3Ha3UI>?=7IRIU['Do[T-VFWeGop
%(dc?]oP_Xl59K=jc2+'J0(_[&?Acj_\=W2k`cXtTD^1$:g*eTe]@A47=3E#5XBl/jahu'+o^eTVf%=ZXD(8@_Q_]$OeJHC#+F9'#
%:#A'*6bC*!HM;<(<3lQH8[Ll+dmjB<WrngL%_-;B8,[O-jpS?Eot&8gK8qteZIa0ZWLa6;WHm7D9:63B&C`VhXsN#Ymdr>+RO*6d
%GI)=8TW;5E7!94TcfNN8h<?_dn?J!O%2e4K#!n\=Q3$Ei(\GM&L?@3,In,SQ_6b9+W3a0#7A%"YJ&Mi9OS>cJ,'F=O%#.)6?Ycp$
%_'+,MI'AhWMS6`7bN`(pMYfirC)cj#kL7,6Xmk$rhH.0-*i\#Q2LN_ja*7L[,DopAh5qQ(UCPC2897Lb4PND_Z'YaJK-7;!UGa2B
%ESXf&LFXaUA>Z,X8`=r_0I7!9(V);(N-pZ==u^!fmH_$K=.E;7Ek7TSlMtS"!E(j0YRW9OgUoQDjJjNPrbcm6VlqqWcRd:m6hTPH
%/J@3RD`/l?4%B&/+51dPK=V0Er1DOkMc(g)J4<Yu3##B<q?r\(ReJLXYppVqj/<k;:o:;,RVHM&OGHH/WprAES`Er,C9tqO6$"Yb
%A.cGbGe65uG-c?phn/VC]_U9VQF;??n+S\HocEU4c)AlR6Sf;\$:XJZGJ<#@#\*Z[2[>&Y@t3U8EUGX*g5MMg6U1PIUJDDQiKl:9
%5QC4LoC>FkpRQ9<NS3rpK$Y,rB;*2VU9.c69CV*?.+/RaH&#3h[fsoN6VX_R!`1flj*59mXrs^Y42?s!/L!$Q)74)/G.9cL`39S1
%O4?*,=72#VMbRKFLHdEdP'/ec:f)FoMCAN/TUo^n9oT?&^i=R;%bXd1jb*(N(b#T&'GqR21@tltGYHX9GA"@HN"PI^;&ctnA?MA4
%bb1DX9fk">6Th:jiDU6TLW-]m@jB;9Z#-"Y)HoQ5]oVu.W8#R$\=$J"[XE@W7[hZWA-e6mOVJ"&_1*O=o@=LQ&JrP<&&qEd!]ZQH
%/4bq2foppI"*0Ff\kdo?9q[[)$D;<N/ZcVZCC)/,$!(0=p`/E`8T[oBK_QV+/-pCOKFMk4c6KRRU3cQQDWb50K('3#r!6%u+n;TY
%&:AWjGi^4T!A02!-F'7QN5?5[83AHB\SH>kD2/=`U:KT$g/rSA-\'P%`p##_Yo8IYaX]@V%C')`C65hh.:D4:4&6pp.j'c&S5((F
%4,VOT-F_P;U-mjB:!e0g;0A)B@mN;^D]kO-L0g!.W.]\SSjhiqN#U\,J"$gM5sBTH`j5ED^61:fiLPTr>bk93$g:-tJ7<bS+Ars7
%YbERSQ#5Tm<,WJ0<G'AJkoj]9`/r@4!Hm%D4SVuA*e2MRY&/B<V'87_0uma(6Z[jhHJP?'-Y"N[>(I&)6j[HSD8XIr_J\n`-Tgq3
%q<tE/X"++#s$5S6%C%E[$Mqc299KU^&N]D<qQOT*PbUa#g'!MFKL?CZ'?POWc*X"*i!fu_a&jK)ejkKs/W:ja>>\$V>e!_f-%V=&
%=DcX,;_!?%K-gXcKF$O+hQlnrSe8SSd4=l#.6D2F--4<C"bq;+"%5C659YVT"c=J?=&^^ZTElik.+5$K]uZs$+8T<JRVAZ&d"a*A
%KXZadl5&-6-4Q)&W*iT$9=<dm+h@dp&[RqJ$BW&sVj_@-1Isf/^Y(lO,WH1P'KHc)]'>+)R'Oki>5=fl5,u#,<Nd6k.;3c(X)TQ:
%oRIL+<N.P;7D&iQB9Z:oMsS&Z+SVZb<,re/&oEUlW00K:L'g=_eKV]]&I"WG67)`G5-mp$a<nf+5"GT=[Z:Y?<K.?%#o-uL_fmP>
%QB@4O9b03q7g$h$Mq'@$8XdZ1/pKcTQ1ao[G(F`jClTVmLa/C'0=9N(emf]R69l-2hb]P8G]37;m64K??"855alQX15RhTD&Y:><
%F$kKY\4]02.WPgURn61+DGb*ud<h)g"OJE:'EGB!"LfRi`9W)5U__P82Xc#W+Lk]*"Q-OB-ql%m%8[O'6,:]J"kVBJ$XL,3\%%sn
%r1[9!$j`94(cGm+1GQ`/8<=/."K(mIZJ)DK]kLCP(4fqkUo]7PY+PcN$DO^P9ej'W_V)'"Y\AtjMiV.8b@;0.>,I^PTOR.;f[j4S
%)<cYM"TWAjfiTFEYY`k:LBIrLMPVq,iFA0'oB_J3!3[$"1QB=/0jB?n5Re5^V/aVU1RFN-gH8#*LgsVpG]p\3jY93%glV[!]2TQ0
%'#:]aD\S6NC,11GR^N%(>9.-_-)>(`Mp&1Wb[I*WY&Tgeqt!b_8jBQ3o^O`>o/dRQ^`&H)e[0H/[TF6@S#K\L9iMno7?gBRA&0SO
%8U-S^i(]&W=>$CmQbJ*?k<.%HbpJDpm49!K$F*HM4]ImeEF;7r*ZnFDA!Ac96FTJ]SrMn>[oJE8'k2U+B<O)VM21oebU1b1asWn4
%3quhpgR(QI`'0>GgIQO'Xf^:ao1a*(NN1\=JmHNq,e9ddTMpbAhbZ3^>lpR'AR`pa7@t(W"sr2ce%\GU];;n@n:fK^[t;*t(k7@M
%lDUNa@7B!EOLDm/a8:<?r[3lI<`T:[,*ge@W%O9E7/9s<ps(bFKN&[XkOob0fc0+MAd`'&-m9t+SG(M0QUkT6*g:i'+MGfN8'HW;
%(uA7tQV3^H"P$7f@S=(hPq&57!3BBt!dkMY[)n^Hr,W0EZrKCBPsISIX.gJAap)Qc@\p5$9:6sRa2U3QiHMW'6?%fiRG"nuS"$&c
%jO/H(BKuipn3,j_W505t9)V\FX1".0e9sgl<m.PC:,hQQ%p-lO)8sPt.6g#?NZ(K_[V[G%_)5@`pk"X7[NXkc#2r5:UO<EZ<E%aC
%^RJGD#1-F-p5=7<q!tPj<imOS]+4<no[QVi,9A9mGr6bj-fkV<m#6cPUgPKG0/b'+>D(a<,*Bl4-sPP\?UPM"TcH)H]+s>`;TFKi
%>)?]V5X$^nL'LZlAM;#)L[<96jY-8ojbUi&r*4_ad9%.jI<iO1`<a22i)J7cp1F'4e0b8^aZ=G=TiNW!S2FI`&_1WkcmC7)JjpLR
%E]*fnd""W24?do:#InKl$DRCGDq7N5aQ;mS^M6/sSO?0+Xj#;PpF8"X%OMh:LI@>g*QDW($Ii.H8/HA@KIDQI8804hHj&/A=7LkY
%N,GF])k-g]"bff.(c8sb's\1;":XUjo1Ro06'<R2[kKOLB5ggre`e2Xq,dW@]0:Si7YPY!Ju;@b0u:I,+c@2L$VdcUJ5-7g?0,74
%oNKAf/M%=GS2@S+`f-^0BK5huE9Glni?<*s%h,%cD#UrLM<^a4C6b)ZHNtSJJmi#0Z`U`]aYo8kgO[fgnd%k7-ul[oPW^3T9+G.8
%\,p#4m\m5Xru0k=U[tAHFXMp6e/j[tW?U^EL#eepYt0X,,i+0KP3l)_K<=8U8"Wr#72fQWXi5=&7:P0"$:7ouB4Z!OApVqX(E'.,
%C?dQ4E-c/4b!IlgQRfSOf"0$_ZJ$fDU\dj'4G.Fr)&H#U]<.SBK=dO\Yj)h0;o7'`:@WN#@IpEns2<=FQTU:+.OZZ+<P:q@f!aCK
%(/Gd)h=s$H1m9UqKND(b#S\sLdVI&uE7FE7noF]"?rkLPVm65qCoE/3S+3m==5_tYF:G([^0dV@#gSFtPr#UjX2RnOrCkV%E`1ZA
%`mM+#j2u7?PXa1j;)4Z2,3HRbri(<>+`c;&gJh2%RR3N$8OITj![?WW*0aE`Up@[U&6``8%Z<a1#rrCj&\Bj1%4L1&<Q`8DgNQ+#
%R^olo*-L_jWVlJG!AB7GW5)&Ja!hqnKiEU#-Pc#/oK%kO;H0bam<:S_R:>4@qOe-S](p;F-e&KC5HYO9UI=MO\GS#9O>`J$Y\>,n
%DsYWfYEfQWaoWju+^)A&Tqph&KH-doh2n;Xh+"J?p6jd?XjqU+R%f.1]6\i1qRSD*'Rl557:b2qG8)*oXRDpbOY$`"p'EdEcDZ.m
%[g??\#6:l`,T00HYSV<O&Q$YN_Z#aZ?:+adHNsi/j5TW>Wu1]nf&t^l.l9on%7J/Z>chTjN6hbS$r(=#<P*,B/CWQS9o,)B*@??+
%o@#b+\4u7)c%d5C[4[ti]J^neLD%4'N'S,BLdc1rGsj/;l_/Q#lRF5I44ch#?jaL:atM4taG<Ha+c_O8k\dHX[Hm&"h"Hg2eenu-
%>[%7U`KIpNB"Mlnpger=qbPbRB)OjRAc'"6c$Xc><+n7ec8p9C*[\7M+p<Fk:ZoHI!\U6Y,l7q^9S$Ushf@qu@f*G`%Ul/1ienn`
%1:2=g!kD+KZ'Elej+d1QeVV!>DK?pd[rbX@I<5jOJU2,-%8"Hs0q^n7KYn1Sb[pK)U0#YR:JU@9Y6P=;'`F7rd[pMs41ZL:%i$q&
%<`Y8c0-kWr\JB=%dn^LTjlj<+oPX%4YK#U;/5,&8qGXOtmj[QO4A7^_iE:TCZP(]GbcXj_N3AO\*DZ9%:NT.ULC9fFU7rp%j9sLl
%DMtq+H5"_ek3*],Os\U(&CBPpQ/iEcgAj2KP.IeAWq1"Z!Y?*b:b($[a.^SO3?Xo<*%F`Pa06VY/90XnXXW>"f3M;WI9U,oEFh;%
%Q4;ua$8&j>#f(\qA^q\AnNk\;Rl<;1W?ROVB,([&k-]eGTWZPHeaAO<VJ`D2OrN$NgI.7cL;CPRjf$.6*U>0MFA![RM6KefVgqu[
%o2";!D8\s"j=/qJ'>kL+#m8Ou_!t?ip0"pFD;Y\(U>ektP-%MbSRdqaN?FTF1p[0W>'u$=;H\,OW/kcVI,?6SaZesjQTN]fM,!j,
%W$L/-[AKCp#g"=##Ps#8AlG*o!jI&kd__YhB'*:M09^=%MhuEOOCr8>5InLX>!uCCja(NCREq=af@fkRbANXUe$rsB1:J@2h4,7Q
%Y9A+a#Bp$(9q2+OI2E&[o-R$qC(-"iQ<:]pOEM^_)JG*3lh+S-$c7m9f)+2lhVrk13aiS!Dj,eNK=4h4g`c5i?bP2N;nKO34F55m
%]p4C:YF3",Dm%kCq(=,<W1[MT_iCLG7!\ZIBHnlQan:4II2#N5Sma?X@Wr`mgA<=qhLE(=Pi_UYZb'D\;K02J$)pJlqJmD=c+6iD
%n",6oLY<H6?:jAbFP&HP:-Z.iYdsDJS/uNK:*Bi/oR0'n:@_cN+a4!3KsI$uh7(KW,N&67]=ZW_VV::*\XQ=@oB"#:VT0C?)eB#V
%ld5FNlpr'h!PCACSgT-+CD#f(-P:Q^UF4Oc-&h6lQ(F5sD!d*pK`lXt+27<I6mT:.;(%KNK)"QEAZhn($X.KF`M2HedKREWMP(!+
%4@uE#]"SH1Nf?!@P*iaPQ:4ZX1Nh@BV.!7O9;[[[HA(rX=V]"^%Ro$sDi:n"PKQ,sQR+Cl9Tep.<Wu<(4pjB"i$&dCedE3]DuJu6
%%oGe$*QNr_][c.3.>h:\kU"gY2CY-2Jog-21jNjk_[+*]F(*]K^RU7J2Gh,%geN`\B[>ua)k(K>>DZ4P%"s5P=hJE*1RV<7XF%/k
%=GP'*&6B8(Qp3@c=Dtsjo.P]"n2%I('(0,-d5]i@oZZDsZZ.&iChuPt1mDeC>=>>qV^oq)e/M#4g=*HXj93`4?WIE%._D-T!E@F$
%QcSjAX<12,MOL=u'6DV0;rrL9A/X!2[V=)2*@T@Oa2`V;@,'sJPDN4W=^nr(S.\rP$T%=+#hW95(JY^D82+H8/F3Bi"+qR8+U(3A
%OD&D`P!qiIS)+6n!.uD$QRRZZe<Vd@<dDJf2/7(E_fVSTM`JYAU)fW/22tJ.T:8s;bbAh#\C$DGq*f+A:/G-a#V?ZTp"S-CbX(FA
%ebc4WEVs+%[6_,be"8UJ%DI7u8u8^d.R^U[Diqo#7l(Nk=-\NfAF$0Z?'WtrHkNn9p5TtSg5"-2[OOcj:+t_QIeXLAAO&0I:dS#]
%h3>JR&lD^jDDn3IN>=#iBfrKW+>JOZA4>1@$MGt;:rT'rlscdK$ACJ5&1pp*fUW!6a=Yt'0BfY6q`fJ8pf#-u%".OQ]P>DS)UZ`1
%8Qo(^$U!MpBMHs1IP1Wa2!\Xc]-ZQMlXLb6^S6ccoM\kr0h>1h/P)mXM?Xt)E?5\AQ]\M'I-[RBr.'4Gllt$5%fKB*On[M%XL@c2
%@l[U6DqI$oo(Ek:fg3sbidO*ONL$&&BJ4t(!.oG?F]d+JBi8E\VCdVBp[osl:kn2\PcCkF\HEsS)3n@CGbrcfLl\d3XR(LiY?GfX
%3,=0?U/+=a!Kl(Mmki.s&e3>ff]?aRNiG2(NesWd<KY/5!ghIBUJ*G;e,qP&PUtm/&_KV=51j\P.^AN')'rGU7)6XOD2-,1:nsSB
%1#ad"5R%"<TJ2ftPEgi01m]f.4%EIREMn@/Caq1028]ii<]Pf@O(DQG0_RLQUg:JTPlj1sK(u)A!iLnpSZO3pGN"HkcfNrP3^W3/
%Lh.Pr-I>Xf!PQUgOMM_M&%[sXL35ju#q+[%=fLAB<$%0Dn#@s[$dnEPMW,CAWsqWd\bFasY+'OIEYO%GSOMoE2s?N)C>Lcc+RTDN
%jmX$;D7Z-2q!a"61;k,8LRJZ0FeJcCM4CE3<9K,nDPk5npO"C74Bn1sgMZ,EU,KB5+2`ukk-9m6DX1PX4WU!r8Ni]R])g2RS@<7\
%)iAtaP\2S[#06;%Y1-^W2UF#<VqXB<3e8krEd1$B!`h@oft290d5]`BeWuSf:N^i?n2fh>[)a!L82mA`;b(X'1TRX5O#>7MYuF?7
%a)53/X$i8BUF^a)Tc3T,dihC'ncBjSHU-s(Z^crBe]sN_G3`a+[FpJM<->N=qC8e6Q[,_DqGl&Yn$^sd].&&s\L;4A#WdN[BIT3l
%g8!4Fh5<5Br@mKidhQpB=ub+I"cNQ7G-i#@gRQZ]#3&gg^AQp9Q<?`rUTN`H/Z*$/Uh)\]Fj-+s&X.@!e<Tc.gMXb6XUWFhldOD^
%f<?FW^Zg`o_Htjc@&rNGf2cCVj^<nrQl'4(bG)uiH8h[FVrLUe=fYKbk35^eKl39LC(ip&H>lE->1`F59]`c.I17NM&&_4]WTdQQ
%B^IS-IQ)VOh;!:RTo\tl,pV5FcJ*q!`HSpDk+nTQ.l30/;H2j#::7;4*H"=qEZ6UMGS+\nX!5pL%"r"ZJM1UgV,"mRb5U@@T4%7Q
%$d`KcM%?2S#sfQ6O2uH%8UC4^-&a@<kri$'8\F+.[9!Ml8%!$K=7#a9Zfl#DfSatV?s9p"U.2#q8fPLp%Vm`fPmPGhSYNWpY'N&2
%UW*b,bFKqKTH]:l7U;<Q3uW`C.knDh5aj?&bFS!(e:_H,)C9h+o<F;3eXNR9LRaUb@d+Ni6T4Unf:om[lPR$A`0aWn<D4"4oMdA1
%,$1HZQ\cYj`AklrVokLIKiD];@k*M?%khralAMU1?T'EKH/r!^,)c*]X/766ZjPMRZQ6Af_M<V18?bT(6$6(H*@eKrRe6GVTV*\`
%db`Ii-(1LKX2I23'fK[\ClY#<AS=e(FeEEji_r/Ijf>n0)kW!%^\pQRMY\YK#au21^&Fs&>XS@`j[ue6FY'C("BPcH7!;2_?WCM`
%Wea$[P:K3Qfp06V7Cq0iZ)K+7lhEnM_3m-HmJ?#g-U2&]"i<F6M^tSFL%tM*P8Hr'^lf\YR&`HqOYib9KK0kPZ<N07P%$$3$Gm)(
%okM9!.Hsl@gIlBXS?:UU4aXjkL5E6;Z-e6C;aQSk/;l?PLmOR'!2/E./['&SOlC>a<mi`PC)oUH<e5k^lMHst+PU/giX;&eY-+oV
%U)?Fk;7T'@;!Q$!W'S:J4`[K5b;tG_!lG+A<7##C#kJb37#.l/TV2&m.$$/]>1]Xe/54KYdfMfi8!W(*/kIQZ?P@%NM\C%!4a'b2
%;LR_l)QT,9q9LOh-)ig<?"UobN>F&h$mDG(j0P?03iu#=0BulO=T[9'E%X;E6H;^Lc#droa)e#\+L`lsV\7YO=jCeP<af3EdlCF`
%\88nP/]-KD:Ic_$$TX9-p9I&7PdOVo4D77O@?lXLCs&D2Z>/ZLZ#7;Nie8!fEfCJ_lqh]AAR;42I;\:\>/Y'@pXln<N;L-X3AA@)
%[P^3!if/LRd!gPC2+gg2G9ugFS&M4O\2>%Z7%S#bPUput'RupmVH[#.7JkK]SH658!*\Vbl^][2E^O#PX!IaTG#=7IG\@hLk:1I,
%-'#If(rJ/[_B)e76]#aGZDu`pfTuN\U:-sO>:[_67:.M*$fpjN,$[BN4BFP_`Il(1D;6b"N,2ZcR[?"EG7I]2<=$>X8!@Uh7R"qU
%&nZ]UBc[A2nu/6(hGf.KPWe\I'iKuRf8ade7<mKq;sR<"_tY/rJT2Z^ON$K=:LfKd"G[+35N:s`J8G^l92A8bXU&)Up7c5]oUL,I
%cs<^V7NThd%s3+kV9oLFL5Sk13*!`J+^RN,qDdJLC>h5XCbij-86fr[eNf7SO@p%0-j%p7q]gQi[VA7(@1O^s]HpSk2$d(saSolD
%097gqV,+,XA_hu$:CaY"r)In^$HJEdfS>u^3rLJE+>I26r(K"eaGUHXS4-NSr0n=Adaf_8X$ec2@H>Gs2Qi'%f&8RZ)Nbqp:%-p=
%+LiC7Aqa.:Vp/:-!r-s9.266&I;Ysqg$VqVbT#ij;N-2$,PTCa'e;dkHb?"@DZe>d^,j)ehM62.[6c%@2gNhgQC1h&bpdY8/nHdJ
%YA-r$Ub8-W`B\6t]eP4lXGgMS#G=CeF5c3<]/ccZQYi&ml7(9i;6pB_0K,ZJi/8)F_a,5Xk&a@Le"rP"l&+b2Xotd\;@:PLZ3W)g
%1LK&LA]NCo:H@%s&MSml<9iIt5Ci7%e"ABI@mC`nc]OqXDV:7-V&Rr^YS91+d9oS?8QBe^%'!/c&sCV=LR`8C)f[oonks;p=p-YH
%G,j$r=')S0"li(H2AJduY,uJ5BRLasTQJ\[8bK6`<D#9M!BfM!>d<AR_!j%Z+Vq137m5oKAi\'[ic?9[n^0M&B\ooEM7,D_[uQ#H
%G89=TD*.![KOfZrcA-LdQIm#,-Rc\H=3!J''[eIaU<Nuu#>ORoQISjPmLY^@a-1;V*R!@QluMX?Pnd\@gfET]Jd%iL=cWS*.!p>;
%NKg^9c8ci/-3HQ2gl+,%=M=G`jcnHh\#S<KZ+[P5[nLhS7#4!2YI8;CR\BYXo#R?N)`\g6MN^T_L$jp8b3j>tT3[rsZnTDN<eiL#
%qK+%AodTse.^45K]10O([/&Q+AZW'Wc@Z$'Ur(;VmeCZ-f$8O00[lB7!U;Wf0tn!6[jquYD`kDMmlr+R7jh&#Q2Y=E2+eT-!nFje
%>*t^l"Qh7_O`\lVIVL)co,>S/^.)D!_-63HY89$fJ:mGNc5/+lI,g_oks`pbQlBe9VPWIE65l->WPC7CaF_W7)+W:L23:Ck/u0la
%,c;!$;Q61%Y4K8NGh;Pf+?^l=ht?Au`AiMp\3;]D,<2EX<e!*J`#o-9*:?[@r0/%$Vid248'^nqgDco*J"U%BeNTE5hIB9#_mA`P
%1$l?/Z7Mo+Z9O+FI5mc]Hksit=V]'%]ofR]>h\sN@Z8se3,pV1ajm7hS3Ik)eS4hM(LCu]dR#"Xdp5Te8oW_3ZWCk&#<YWW:aO5`
%I$h3NWg?;S:`lrKjL).PF3obkpfN+nGN=b^\PuFB3d-eMc:(IOZstX[kPA9!gXB5QY*2bND=qC1776kB&a//s,2SP&^D:O4\I,lq
%XljX=#ERkLpa+lIlGs\^W4e7lhH),!Pp!LE<F#U4DcT08bV&$I-;AUKr>rt?"B^]:SR2s>$AFXZ]1#2r"Z9<BAs:f^#eb0=10Q#p
%ELGP"C6*LkE2Ur^+48s4Ve8tR46=_1^\VMrS@_@co8H8k'`DufH\AR<'anE#Ls%F7$0S$l4!I?"(9,3]kR'mbAVAo)bVqSR&lE-<
%CXX^pn8F`h5ZfknKl@RTS<O_Rk:j,gMoZtkce*&A<<l$FJ^e>N))$7?2St%$-GqDT*B9d'RKjR9$/k\3Tc^&p2i@fQd8Wh?2IR-M
%.-gTkI;C:]n#%0)AUkGkO\<N&FW&]@KoP``eJq)u+-ro1Bl0[kU'eYoF_E`Bc+8rm-Wk4!DhrkN<RcT;$1arf<!gdN/"csq/ePd9
%YduT3Euc*0$F8[I1u4R.]IgE`qV;c16c!io*JN^R#m#p$J^Q.(`KR&UN-DCTG?Ud7A@Flb;fLM68<"":7TW=p>Q<-@Db)0ueXks?
%K@iQ]K+duWB-DoZ&;6n,4DeXgI+`6g!ZMY,"(o`k2Dt?[KOHfX(dT%<jsA_8l!`)P=%=L\.At@1$].WR$Xo1&=OD4r"r*8R"aTUR
%oGjk#_La\pD,0kHQYJ^d_^!EVgr),-\,)[X1+`PdYDC7*UP`nE)hM`pE_DY[:ONTh5?diLGpR>8K4Z5Pqc]o>GoG)`"*Y@S>40H5
%Y""E>js-roAPjcJ?3Q.-O)Hsi@KotA-u0VK0\9;1D0dsol(O`Lo`[8@llblfj!.^i==)W\\-T\R:Zh%=)5(T9a_>QU\*+!nnMQr"
%c%rh2@TZ<dnC\S^-8`.8_1^s:7kM<uCPZFl$h1/Z4p%%V0>7\*Vi<U#^@rj3N(r,42:'fJ:n'o1?4h%+;S>;@C$Lb?C_5rE?<+=6
%l";3"<N`^:/Sm/tkcRe'YcBF1DB;(gjiTREiZ'+IihVpXeQi<uVUa7QQ^H'c`OaV&*SppV]IeF6:h6L'`/4l@OQM-;?u5e4TbO7e
%^YJ*7fCtr&.Kq]H#H!HTEcMa]s0!jLpig<]XalL4%ahOs)l(-;Vd(do-uOheZp9s\%9IohV`#Eln]E#m/o(IASB,'`Cc35[Bb+p`
%`Wrn%A[%`sD>2Tg*hg_7U78*H&/V@e*-6'+@Yc.on_D;1&IH2!benB]EFhFf(:"D<9<k1M`JhTSdF<a^&,Ag".G4r;al^"M88`V#
%a6I-nq5"ss6hYfYNq)1/jAd1LEO`$@jQ?`Y>>,B*r?k/rY5YAa?H4<#;gBo+<HR`cehLp7N4haqBaQVWZnRa91Jh'=f;mI7W(qi>
%a8(1E=O3Zg#m5R7Rd*e?F$(hFO3lN/G:932>/HuF87%$$CF:8,<SbWXlo-Q!+()RgH+JR$W^Q'K8gS1QeP));mR#?R/JJM5D*r`e
%1sdJj$`;YXkbkIHZW\sbXQ,Ofg;`t2^]X!q0M24`h[QNOXc>'(291qnh8U8.*LOK(-"gX,W&/g],CF9h]-B/[fE/?T9]9!]]!I-e
%#sADF'\?Jh0<7af+1C!fKF^;l#U_G602S1'_c&c+(.BDuJ%)=mKP_@-%^U)f0?Dk<qii<!>rJiL%_dm`N+tJc"!6EQ(LK9#VWc.r
%1$V#,jr-UgG-!0k*_)tHF4>4Q>jg,UAp03ln`h)fa@6&l'_;V]+l5%ajQ$[88Du?`k0ku(\>d3,!QF])C:gF-,f#DjhaL75"E#[X
%)_]dGV%Kt98:b6Q"I2,/%>[#2b0)^XT?<mOb9]=QLK:J&<$D@+X;@?7d.gk_AVb*b4(%uDChg:E\*EV_86;98XN'IfSP'hRCtV0F
%=[T/h_QlU-=JN>n_,uka]'X1BY0um7#&T8d6`*,d>G3'AM!&V"-+!sU'QldJ7lQbULhcT!e8&KXjWG<bNo<i^@FbWm)t9%C-r;nR
%iotQ.aoFr.6)/ZG;(:Fg\F_M_htTV:p>GG-"XEN4=`Y&(^I:79&NO,-'VOh9fENga`6%;^kJ0/9Z$bk&^=3aC+>fasir[IlC\iKT
%:WX&Z[=sW#:qo7iU]R<<1*M1?ROY)&pghD5,`+'*N?sb9!pJihA9BGL.0pS,rnX<5j"b/RoV3'r-oLO?e6A5ASkfu/V)]61'uY3$
%Xd7t"&(9dtJhYi3MK@-m[90Wt!%8eo/O^0]ZcWu+/kL:XLPIg"!2UsI,p]m04g9nbC.@sokb5r2I<mu.L:S]$M=)Wc\Hob7GVOME
%pss473\_R),=8j:,65k1qP6LmKOA[!`?)MaZMTL0i5]TD$)Z/#.o!a3W(K'fTY0rf/oF_J3^D*(^"!.6ACEC=$K;i#(m!38r:"\u
%YnoZM=ku@4;T75bb.DpkZKGOn//79aS*0iV9N4O3ljsS-gIg\]?s>76=:6=6&c)%daeiCdWjS9tX\[!2Es&a4YNL"KCt"WfRuN8^
%bletf@=T3%-mHlK0",QF2T_.lT)PAUcF3D3jLXdJ"o8`'NBduYe^`L+<L(4[&dJgL#K;e;1W/aA/3$^@7Ul[Qqp]Pd?2a7WI:@<e
%,WLl')"-a;]">Pb*d6qap0'Kjdqsgc88Tf8pX(-`(iY'jql:[%7(tqg]^DWY%/CN"3o+]+0Th*()5'5lAsPCaRr2(9"A[(7)F2rM
%,%s3:qXPP^Ul&LnD2JE!`5@p"`S)Z)A#3/%+G%VV/Ju_c`o69Dd#^SSnTc-/X+2kI64j]`QoJqt1eEK'?t63#F4/9'_&YGRlR4.=
%bNGhe+>D3eIpq;V7k^*VV?kH4C'qu8nRtj$XG0s(hD)tNkU;?3eEiMkI;m4YZu<<_)I'VLC/LH@nT#4\'DtC<Nic<uGlD;"5"Qjl
%"@=3@q_q+f>tVn*#*Hu"[-_iTKSpZfdIhG]31BoW(H$#C9!2]bRmLRW"C#MVQ7EX5@LKXL=+6,S(M9`+_?aZ!8=lU//t<*Q.%F*3
%OcV`Y##gn.lR$>]*0EZDfo&E0=o_-YO4$<4TP:#/APZ69`O18n(+74=*HV`1eAX(+p;:;VQJ,o.Q(6&"C5O?<a`Cu_>\qHHX0H@5
%W_+sJZF2Y@:?B3'2%[CJ4M\TVZN27NibBbW`IjB7m#9I75HOLsE8a3")9U4CqT@^>juVI&3O2VgB7%7!Mt1";fMuugYX`4kd7[;j
%W&\Y;9.kE#4mt1D/Kh0U@q=+UW">2Xe)ZK&Bs0\=j\:lF_;"1:MU=ao/iI:uE5nrZ"fo*[-`MocC[)=j&D?1]gU6i$(8?B&,&(E@
%@Q!EQG42d<GbGH-YSAKWRB^bqP"2b\+B;JrK*[k$E5!B_EE<4eC=k'e_==fH2$&1$2NC/QUsk7J3Hf+;oIP_)d-V&&ai.EB4JVQ(
%l@g9dY,q'#AJ"XH/5+-@MM2@[43isReEqjm>oQ8CbBV0.Y+%Tm)Gl#TA5s\0LJ,?f"+b`bopXAHWP2M"XbPC[&J?sg2S<!G6krE0
%Lfo*;r%_#kJOn?$PK3n_cMfZkf^*R`(Y^B6bB1#4*V<9q!kEfo9Tuc?rJuNj_F6L7`q:=j@:3fg.RUJLdFC9X%?)(^OFaX,"B4>@
%J8s[L!no5iB)!;@/@+BR*<e@K]+&?mD5\QN;1qq1M]?:?C2qBk?n<IX-*upo,S;.oT`qNPe?d4)XNgj!oo]E3:%`M?4PA?%>"kH:
%cFO?@iK\.Qjbm&;V_YQt2%$rQ&0,tc##@/k/M;fh06t2f;pjg=^N5C.aXIZg*TNtsX7&,1:5:Kq(_%_-#7t14j%+h5mC4YQ#NaWq
%+j5Yqjq/crG>?h-;AgtMIX)'jjr.Ik,2*WW[X%N2U&]se=hU8_dCtF@\pN].r%4SC6?huG<s:7OB[XqgK+-(32h`Np-;UX1c93RS
%5T4C*<nW:\)+<>:3i[MU.2L,.L0Z,fa7,QDS[2:N,%`/-=3?iX1"A1O.<eb!JmR7>&#q8<nIgCR]T$o/fDX6@"RcpNY-Ca3>`$h_
%[+&2ilq;4Gd;J!p(UN<d3DqC.&/nQ/m@+&b?\f#\b6K"M(Z.aeQr,>49ac)cgbb=#-#a(]+N5n',moba)Fc<9*E6@Y,^i9"N%*,F
%V%gMEYA9.70-21/_%enlUrl?cctQA="1De-W!ik()mOmdT;S6Z$<74_M7%IU>HePjZ7fSFYcEk_Z8@Kl_m;RhFnlg=CH'#Q;T:2_
%OG=#[e\*U!aFf*OJ:Rc(EuVVk_Qu>6Mh3Pd5H/dIM;K`JfEBNmQ`H+62GbKNQ)NsfYReXH7CPK!-.Kri/VfX^lC!s61nMp+343$q
%b]H>ulVFr;]^s[/Gn&GNCfsVEhSrt^qSEm*]_>GNg&u_5obR_uU1.(]%$]0K0h;=!N!o;[#c*IL.bXX!AYdd8o9t,b</_Lb5Wk=_
%d]dC^5,-4p\j\3JeI[S6L_Q(YJ>]WU-RF5M%9=?KoRfdEaLT+:WhE!WN&>7mpg&nA'!R1+1@H).EG6;t=9]e(_WUb@.T2h(kb,X^
%`crpm>QG#:(!]]obbeqgasRAEB0#rd,.>rj,C:j-L(<md,fs&-bfB-2'glA6"9Z:11n)]K:rkU,)B?O!Z-eYMC]YJ?/"L^nGYJ:V
%$'FL2fW:N:n^q;7Z9Dfm;(-*IX@eCL5>_YtKED,7>VM\mgZ#-C=<:]=)iKb^<#4W-j9*G94r5QFNY&3RWm8)t@b48eAPfjUN#t>1
%]ouUH@*Vd1CDI_'MtB5uV?V"Lp5AQkf`k3-PbhDKK)2XnKL\BW6N'gJ#CrC:j5K>Wot^BZC#58#V1GmsLS`a0PTrUXMCl+q(%LK6
%.VUd]mY.lRb>S=VS&`WWWh^R"\?L*4*8&a\IY;s/ocY#RnOZ^c0Iaq#W<5b1Xol%(!FgrXYL*i[Q1o0`9$f>FRL'&#<-FCF!GjkF
%0LlSL)P#kAob"q'F?,-/S3=).'$HY2Li9e[;+Q(6PoS`J"WeEIHLl^%Gg1<iQ`.^R7SZGr-3[!q"n2nK+(^Hj($UbK`dlG;MBmnO
%rA<B*0WdfT7>"l+at/k4]^6dm!h1e&fOT%P!9&pJBs?Vp$GOOKFC97?l[IH.a,g`3/faD,)7Jm14d>NtI*1*!>[M>84(On6-pS#l
%-32Pu]u0=8=5!;(mMAnIV&V1*:4*]+d/`_7W=H)H;n3Du(BqF*D=d<6-OVDE>VQP#T0UjT=5*qPDN2e6S^Mn_R\c_9QsgkG5aCd!
%#aL9=Hg`mF4Us.1-0_0CEH(gAP-n<<=sTASg\+41S>[^"X`6Zhc)Ql%CMi"]TXrhfXhMGN)CRRSNI)Uu[2`@u3h$k^;;@ni##r+m
%(<[E'0N=/Fi>7cH<m]1Y%aU[>8FJHtoeE=n*f=q=c;#j0c9pA_ON'g!5kd@$W5?!]6s"?APk!5Qd>L#.(^V6f/oB@$c;^-F<oFbf
%0H(g#>G<`BiQV`#PR-udUU6+WgAVR6RM<g$V^(c;"a#IUg#LXRCBOCD`l9U=;B86'`MpqnhQb9:')N5dHe_-P,$)0F^GQ749p#O?
%=6%%&.LSsPQ$4C;.of*UW>.sEWG`+fT<.S$j"Nu7+QA>lh@N,\Ye,$2]LY&eDV4),\5HpOeYOMAWXrg#G3E1j1FQ;A<NO8&YVs>O
%Jk?%D;\]SPXT8]6-1`l"ZaUCdbZU!3>kk1[Y:_27gPe:r,9MUI,A?eN*RmWX*&4s'aM0Lo2f^#OH/TO<L]RHS[q^9KGAbg.qV@^U
%@iMrV-+kRgGO1!DMeOckaR5-0hPil@]?hE&E1pF1N>FA=,%s@jE:B/-R8\a(6+92>R&dI>)G[]'2;7=%;)d$dM0VQWD^4?1VPcBe
%P,iPua9o[[RJ-Qt2W-"<#ad7I,_W]i;XpE[C`<'g'mQj566PQ!PX$'WAmaA;Uh,RTf_)25"4j.)E-O97Y!R'6JN9F:bf,gH@T8%'
%2D\"b.[X!=n_LSVg/,ju?!XqtP>Yl+A3-MDNGmfa]C$Y;$:81U=*)/PAY^fCT^FbF"c:#_6"+)4BuZc6\D%NIO\""<Xfo$OJuOd.
%[Qsa-&u"$t+`AX'0f_gPfq42\e//$\JPsiX!G`s62<St%[IUQAmHiOKC6FR;>#dC0)iLh=)L4)PNA$o55nS64($o?^E7N#cDlY.^
%;q)`mMrJY=LJpqq3JqeJ#/S<l"ZjL(XphSO84[@Ld0abIMS!%Ob%jQ\OV>odEqNEfR@#T3-`c1@W\]b[5')Nd]4=]+Qe2?YUZ/Cm
%0G8H&1?[='=a4m3>9,BEG?`bO_.gkT3oF.K/g?WcMocG[2<r:-hAC)pe"DDF$teD52&;>eE&lQ(B_#Wj;]DuIERd`3ck:\rQag<p
%Q9pn^XA$6h3D^0_$B>!>+DNW6JU9QaW;ZdH#iB(<9QCH'TcnAd%S@O79_e0-OJ->%Xp2f&Vi$dr%WgEn;-X4\ZFD`-bk,S5,YLgH
%1Ijp"-QQ.Ai-gTL&a<T?)^r3-m>uE9\Tm`#5r=R5MSG)*PU5Cu4BL:YN@m;^o2$l3=[^5tG\o=cF=,l"EnY/qB3(=mRC373q'W#H
%dMe<.J2tiGC&_ddE4M04gJjY4)a+J3<Lp90Ne,q_\77(/PNe7h<O#/unKI0f(n->u'.o:aONEH])oc!&/tC:8M2],VK;Tb8Ml%+4
%Ok'rT<Mm4*EjD)$ZlX`ce54I8>1Qfprt:SE`&!97NjUahI\4S?-fXE,ObX?u1*?f:Q]ei4'3I(?`es8IDWVS0$@_8O4.C=d3Qub&
%Dpo%NOX2O@\C@`S&ru+Bk?8[MnL>_DnQm+8m<o*cck9`0a+3pl2+ONNq[P'W1,o=XJMT"tH+-t2mT]rD"ig^d2:uL\7S#Z:o#"]a
%ZE=GOR8/*rCCl7,Vem%;,/ro4X3C:&3#:\>\W^:n`O:"\g\j1W"807n[D,$R(^$TDG`+t!5:?s'Y=+KRSKndi'=R0S%Lmi%;q*j3
%aiiRNn:"0noYPQ%8pfCeEO1m1\+%=(\?1me6f3@'8"7"E<ArKag8L#E_F`]N#O<"ZeLB,c+gCWJSMY.ZD3*)>N3\TXr6/7N2(7'B
%^V*h65Z:`/'5'7SY=-bbZ(&"2qp<",UY^A5(00r70W8_0+AhL<.X+;B8C3^"%)f@5s')QXR&)C4rgX^n>KSeJ/:"GF"<aP6AKF*Y
%?+skP?1WkJ0'WIs/unU\APnkVes8R$BFY"I<Lj?hL`K+\$qhXM+>"2Z-+M_naR[iodW'PlE"`X`IG8%5;!Q^AA!EM27Hn^U&%>in
%XZn??:DKT^#-ofhBWY8#E9<Bg<1P2:=b?'#JrP(&7>QX+c(^!96(/rrBi<<:pR.:bV,D@T]]0.^<Q,,URf8nsU!_fr1+H84OV1Ci
%s)m<S#IcE>ZC6k1On*'+k=Rd'Z.L&k`],H``F=^!D:k^7=T^1t0%rNgorIj%PG^s'NR=Ipd2f%DB!.gZ_\Qc9R+,Y+GV+eJSU>24
%KLVtb;TZ!i8*7(#$=P;r=<miMp<Mph;&q+rLg6F9-:dVCpRnXW47cd]<$Nj[WsLW7n1Z3nT?2K6r@\8#ZNrA$L>+ZX!QnI^&I#+A
%2>PKlTMc$b/.'tg@j$$>_9'W'nIWVp1J2CZa[M4N$HXCRGE1pmZ*cl:\4E7("K3tF=('.F>`;t9E0s'*)4qSs+m6Xc1$b,X([6_g
%g4fti\X]^3q^uB^*;kVNW#^jG`,V6d=KQR@E6N%<di](@dpEM%&Ig>B]WeLjg6/_/foaab%n>QsM.9J-d@uEN*"!`6F;.saOR;Cu
%l%Yh0"X9!7.PM':L+CYaU>-I%YKK[YV_'l1L[$j_X0-9_E(F=6E!"U:8V2oMTOb9'jJ$&:(7SkbKBf$N=uL>YAgf/:2,^$?:2E\.
%Zp3j$ij@un2$ND>&3LCXd1-<g%_#3<+-lAWW/1(ZI!L_":XqE"J-L$[Y="_K:.oD$+ltGCVS"aoLhY6`JiShr`JH=+ej**(!(!V=
%:b92lHmBFeP<7'gT.7dZ@#"IV\7J[)P=UQn,]AI%L$N7K(]HbOk;p@V8)d^#O_iDa;[BZ(lG:05@`<VQ?O!^@Nb)/Uj9+FE*)?'B
%3a4dL]bGK-3XQ4!$JVcB[l;^Da*geP7Dc<R_]fEW!]i_IS?2hdOd'ok&`h5cmUl+WqJhK./hj%0?O,CJdWKS-`77>mnoH`&CF.W?
%)pqP"^2^Ur/an,*gb$4aLCl3B%m)=Xn?!`I2T$Yt5E$m.oJ0Nu2Sl]rS"Mm,62D`s1=25L^J,\.GN4mRC6$ghoqPu[j#*g"As#;/
%P_KA8pFro;&>V<;<0I<-II4;[>rN7Aka<.#.S7m6^a&cn+%t"/f&;`F/qG(dV>X-"_]E*KXiSaGBb:R(NR*gYo(M,7>N=i94/9d[
%(Iep&V7TM@d6j#=IAYBd^=6<lYp@-mqOkI/>Db9e`mW_^@JmES?S9)LIX,jE#7WU@SStMP5K;_;50q5g8q!9a^GVT8^GUK7PK`#;
%`L-JM;IQ56@O:)CX+U@g,^Z?>i*kRM_ToJlqH2U6&LpPrcW6S:qS$oN<hWOAog0D^obRX0.,pjYJU`i!"S79pgu+#'FI#Obh:Oe9
%YFu`6_GZQ?j!Ef^n3(stY)7*R%%R@oT!\M^;))O#0E(OQl+=,99:Qg;T-b(ho2q_p8<[gJ50q7?47ANn)UFc-)8CR]SfV-AKmIJ-
%0RdHBc^3N,^V%%>Mpf[A8aGm;Bb9^PkBUT9ZoqPhG/*t+Ge*atW)g*XSM[<TkA6^UmY0$7:NBmcpJ=r#!NhamSQe3fJP1prHWu*+
%]JlGR/dI-ep,m/&MJ2POFRcL'EqPu#9nsjR%]=c&nN\OTbQ3J4h/WHCN#B!AUWKi8;i9M/;fS!GL:J7qB-RQ(7+\$nbAWC'bO:C)
%F?b&R?MqCT.h1?aZb@#BZ.`s*8cj%3,&tt#WiPMRckX2!Bo&bQ3A`5t>nk>Kc:hcFn26#KSd^gVFq:_p7V[sVM0N?cjGNgf(T@u<
%d0n5k?u@C0'8Pu2_VGo?lSEcEEjq/L33IsSKVeFQs'^arE4=X_)Z75bj0eA>cgRF!b]NL&j/0kgpGRMfmV$CdR><]i>r'4dl45,1
%GjT5ZYoZL00q7iEp9og2Fn:sq'AfH*,Q<u&+O[QtfCtXAo[f?n;R#@qb0<pZE3buur@i,`5jFEK[BG!Mf\?H&7ZY15FOtMUmQRHI
%-aP(n))_V;G2';l%?:]PC4EjZV<pC\LQRqhF(;rs0fHa@4DXkuY*#aWkpI\cZ/9(NS0)kjpD1`-N^dC4lgaPC?U(;#Vb=[022:P*
%+/6ilDWKk1;Gf4doW`bKb`4T\Fh9BT[E#BLRufHiSiA:K(V7`Y1Qbl6/b6F%@6$L@0TLnT[lPH-nJr]q0E)X/6:(;@^++LilOBCF
%0_i8B_6.f!&Xa4,4tP-u*_Y4)jKRDUo&EaX@/#+6SiA9+8-hrq\)V,-UKGR=%a4*n]5_cAI]L0P0CS\GHh#o8fk*!2E_)?'M#;63
%hKPG.jJ:;;at_LF!hqlQ49E12#ffeoGS39Rh=s)Oajb;Y^^-Y9Wdp"ii`]TeeT+*,:EA5#idXY"s'OJD/.Ws/b0^&%`ZF\(b2X(r
%.I8>Yr2k'd+L?f^+M-iFe1Mn$mVRU$?g"3NE;R?=Ho7?)o',V%Wut,CoVI>e3ifb=!QD0okQ'cGM*;rG;[4:3pC\&H-'s[A,l5FF
%fXq$#re.1fnG6GJ)8FTK/?A$0KLOnZN$"'T+9DZX,/f2(VeR;Bk6)O?@CZet@?f\Rhg<K];2SBOnbk8127ZeFA$;#)7Zs8%Nj'jg
%^LERNNdAC:LPfhphAD_R&)uM0^G293,qm)TG&%eVB!Wr7!/eI.FWD'J'ikNs*G;)PZ`+J+f<+YdEZQU?EHJ(4**olE2a0(.T`)4D
%8Ybio#mnI8d1>T]b030?na\OZ2dc?\c>ETZ`_/3_'l/k4qntXj3CB)O-jlr3Yp!sAY`hssT"VZZDD'X?_PGVAd"DGL,BZhC;u]o[
%p.mp9'P&UWq[b2W.TXafio9@]8:N(u\.4ss_]fg:A$\qM\-!Mg2i3Eb`:jh3erk;97V519mRD?bA@\rC>&1k(jgb?4E\uf1m]@5Q
%Dl]cpH?o&$?#P[n/XqK(*uk7s<HYf"B[n-5<Um0HD6#I(H'6Upp\6\sbH*$g*k_4;@YRV!;6qXl(j/Eg`IuEB#Jm>7dLQ0f(B\+M
%mR=L_aA&H+6KS-_7dt_lnT]ch&RM,t_n^KsDod3Hrt40u!)1!*=]!`ac<$-K"Rrbt#VP_:X!$m8Z+gTU[."B'(U7ZGD:1!K,pu9(
%L8-N?Um`:R#A:gj"!ukj,iD!^rB^@#ER[12E;rj4'es-*gMVup\r+1;ZW+hcDnK<bB-G"<]b.h>qYfYs_!888*S\5UHpoJ`jE!89
%EL(NemOUWO'Fl+28ud^lKtZ5*%"lUdaS:("KRT5G7\2rUk4?P/4C*:3C*p/D`jf9e#Lo^`Wa"NOXQoB0E)%jG;CeD(h(7-s<[R2i
%Wf'ju]E``H/:h],DqWZnio;479:&8i;"Zq!@$)WIrPm]F_sfY3Xo2>ujOu3_loJL`:Ts_0bV/O^LLm)ck6p7o#/tibXG*D"d<7f2
%l[!io)RM:j5Cg&^F#rtoM&P?d9@_JD;AqkE'6/MnN0hl_1*59i]t2HCU`(^IgSZ<hVIUu4[b)Jo%ZK>0g`@4mNB=_%Bu91%"oHuB
%Td\;jHrW$t?;OWAUf=b'OpdN<jXN1A/_7IIBW[B\235k^OP@_Yj0OJE>ccmb%3r.5%&#$,\GPTL8=9&J-?YfDp=<ug'u=H8M11Dg
%Q+aBGIZJ!GL#G)H`ikEM2Cum^4'd)i[dg\6Zjk25g.iFo7Hi4HMTbbDG.dL7cgeO@7,t%pK@Oud9[+h/S>J_fOWliXX2*W!L;CNQ
%?&;6sW-h.VLI*RV45^]ICqGg-kUfRorS#X`/;l$*Q&sg]fbF\2XleW,i:4`oiBhPYcDP$ORh<`^SIWj-JVS6PCY\/fqStOBgqC/.
%P/+9dS`D@=kC?&'h6;`i\*?f%77QpR=G6;)jjc8&d$`k5NPLR)90=7S//jRH20/QH@W;6bX5.fBi*dSLg@$k%rpfY&2m5>i+t=<\
%!s:DC_DOjPY(=UG`JRHWA3L3?`bq;P+a;]K,%St8`tO4S=spbhe'Br45EB"hQI?KXj(R(oX1e$Vn+aD>nLm,UU`//@l?@qC-,<#S
%%!9Fl4V&KSAI>7u:D_n,cWB!B^\iI@P6cc/h^mt_T7/ND?oa1lP7d?o+[)HqbAWC'bAWAIg=6WRn@nAZ^""']<e3kZc<YZ3!OP-^
%qE/,6CHR)t4!Q`h8S=o9!ru5UBCu,^_g$LYEVZa,I/0=q#"Zb1G7DA*E@355\2nQ9)uHf&2$A:ON#ZJ'O`2obg>+)B[I0M*GCh-#
%%KC\2YUES:>haE!Cc-e5EMm5)4`33<2XS!,g\p\hO1TVmU[jU.5fAZe=#8T<#%4C.4Phu+Vbd@:cU]+f"qoX5R=K6L.ZCgij@&M^
%V%fFg)$Z;G1Y8c//B$IXAWbr9<2iq$lIW.tC,f%Q%CkK]E-FOUcPB`&PUtkW4E$kkenT]<09"X4IkQZGR(:Xn^S6@1G;.,'r'_M/
%NJU?C?aND),GRJi>hA]fj.PL#]l#!`>h^[r7]9'CaH\M<OiU4XW>WNZq7\?"`Mg)G$>0X16qJ]'@k95K8kM%s+fb$eMN+&t2i7`R
%)0E,3"'1XY/)"NB=q"$b=t8r>F?%)Z#PP^:J4k"5B#Ve;I:A%-ifVJ4$u=GnbHC^'6S<tAUH0g7/@r_M#aeSHqRGk%k8U2BK#IUJ
%$dRQi,qjp<1ich^$O5*iZVQ<L(ff0B'Ysijp*eGS!Xd@PA.4P)`#0oScI5(^ZLUpA01Vs4_Qg_*<7=LU[6i>2M(5F4TsIt&?D@G5
%_S[%,igU1f[<f:S4f)mjmcP[/,n#Ksk1OA9LrfZu#3^4U'H8l.]Qoo4+c&ud&/'kZ6>^mrdMcdi6Bk*u6''IZB#,Nb@#@</K'jUc
%<VdA$'hotZIG]f1Q3gXYjN9_IJQ,Cr`$*sWJ4e_*&\r6h?+9udK*Y[p`DT*JN*oCqSr!=^AC!n(^(CROY]]ZbL:p)B?>L<'lA.2Q
%_]LC_.9s-R3+H#\(g6m4>*@6-%!$3]JgaHE<X2lj%!3rsTNY?dc&mfb(]I>Rk7:tNdVnClNRo;rnb(LLAFpIhU"i#sLQB(9npFs>
%L>@X!%N>:E<#m`-b3HB)!<ndh_C>fbW.m9/P5QNOQ>hlC1CtqZB?r#lF\8HDp#+m=#T5>"lTSbs"Z=61q#jC/#5\L18*#XuBLh**
%+NIB3.@>CU%0Y_VQ(kjuMD+==JI9MEd4cE&&8d;\Y[sSB09b_%Aq_%).JG"/8OHRCIaIsi"bEpF/A`s-ni*ht+=o!.L&Mg[-s4J5
%QX,k!26"i&YM/^[<Ju]SA2[hnQL+$l[8YW9)N1X^^PJ>8[>f/rf.TK9k'ks6eCR4,AYB*XB.Ce*?^)$JXK:.2T[*pZP6U=\MsJTt
%RDK,"C8FALfC@HgrODb(?ba&!U")WLD1G=7U3bN^0IIHFW7SK!ZkWtPWRD-2olW&@RG%m279TrLCK6;Q=BDcO.\8`jg3BHJ.[4Z#
%qJj#aWe]%)/<YeqMJ?QU*rk;PWsb,:'L`#@/2,4E:Ag8*,FV@e][&Yo]bD:NO^j[[`k2Mk7N(RR8=PuM,J[8HGMS%AFQ"Pgp5&]@
%\qq_(Sh3ES8>='8cn@)05Qa:]OJm(j$(;E?'t.Ko.]brZ[O&%CY,[:-T!T_`7T0JB*dG1okZSu.W!%*[rSSY-^o/mJJ.s^f<W#ih
%Pl9&sB?B`(%4hdFM^U,>$!ogn4/4auXNb?d6Gg)jM,&[lX?W!'+uUhTpeH`L3ZsP';QBR_\k<0!TC!.`Aj0C'J#9>W80OY.-JIF`
%WMgLZE=c[<C<KF8Q&.`]4Q^Y\E51#>buT7HB?l0P]i>\Zo!J4HE`>ION\$<opt-Ma:dXYWm/]i%G:FB^B[[kt6jYd7eOPKT!"*m3
%a]u(sR':1c@%u5YfofHn;:ce78IOYdjJ3N*A^>AH3Ki\8KXEoJ9dUHb7"7KdU&qTVM$kP#6fL\V^dtH"g!+.b)q))]/\JNVie*OR
%drY8;qs'cImX%9&%Si!5#T0D.PD!amp_D?;H@/67VKZ*+L]qaV&_st^pW)[Qn/)*(TBZB4c\)hbB9lT/^9]lS_Tj&J^o;N1]5I@j
%ZIZro?)<B+dU_(&?l6&)c6WpUNs`gg`9JA1B[`Vq7k%[HJFnLi8k>0[Qg12WZ3RC>Q5D+N'0Wc-!V)t\AcJ>:FUAH)1);@)q!&+l
%]"%c@/9]/jF+r\O>DpUsBXFV]O9]-)*@P:Oj)Os>?bLR;YJjUZ]M3DB[]+qAP3F7#mljJFR80RQ@aPmG?'7-G2Pn1IC9$b1cq&39
%L]t1GhQ?KNqLaF]Vc!pN/d10g.dsMaVQ_9.\uR%)/V<;:='.&_K5559<LnVYa7+cJ/E3j9EG$@8pt/aAFn9?l]g53D/0<*V?8e4!
%]-K[f1JkM?8qs1G.6q>Urui,8kdY]$qieK0(jM"bX:n%Xb.]b;8!3WZ1p_\7ah.M/'"#AoG:Pi?WPOif+DpN#W!9pF?.DQC;n0p7
%AB'nk#&#kEVn@Vk#k*V7i9X8X+2S?uBaH5W_QG?qSjZP0EdW=IX^m)_;__Q;^<nLr"/sUZG'':5f"oM+cc%)/':#JP75C@(Zr*'\
%kAjOY'62b#FT<\7lIYcYh"JV:n*@&s@Xum[>E"1T-PU9]Wih3?;Lo5VJBl^>@39;uM)se(k(u?TjY?k--W!7!_e&:n8oE)6]LjTG
%;BHPl*#0_,7F'[bJ5)o&H#o/t3]T@*2<]F%>hMf.=@LH6hHiOqOS5)k$s?Sq>MZsZj0fK4HC<>bWcJ"_OlGZt&".0td]t(h-EYuJ
%[3;Mj[WU<2%S='3rK&7*`"K705dsWjYq05@k7Fjk^qjWXH("lI1lEY;n+\5jMId/lgT'<,(4>G)]o%p%:!4Wfn+0J'n18]7_FFB'
%+W:g+'MQhE&Ym(`n3NOe@`4'YFMUt!P[9gplS<5FbR/7^91`AKY%-9uM%`gJV&7M?2,.*Ng?P#t0MHHY_*4kt\C=;V'Qh^5C%(*U
%/`J1?"u1I>Q3*!&MH&rRZ1tY?4Vg8PIL!OgmYsfb["JR3R)4jBl=:c_AWA"M.<6'n9uL94c7^X]W@>%2)t&m-Pc3d-G`*sr3)W<*
%lF"0`]6F%l@S]Ef<PLfQesd=Z"n<c0>`9+;A._g?mspf8$NI!aAB%Pk_]"aG!6W7m!4ArA:js`p"p.)BAJ^4WiUC6ShNE_R8e+%;
%\H_P%csG0PcdIj_'_ipl!"k"G49kpi!.n@:XD<=(\lc`Vm2*6t"V3^1;'<.##(eY/aXK@"4;J\k*W=sr,$"^tZJ\XMEX^#MFT;R%
%:l_.g+@&aG(#@`&d;:b9KLFe"dfbB7-rUG4;]R@2ONYY<?&5_?,.o*4*Z"n&+li[5WpegHX#U^D@4Zll&^JjZJ.q_rY=KYBN!`^@
%bCp(G*<M;6ET&)8n,DQ!=`YETZhN8.Zrs"G&g]"n<X$l%e\!u>n4,_b;Gm'#T`P$_$W>jhYU4^JgoN]9AOtl\M'1'=%HuoaO5&7(
%g9HA4Z2BZ*o?u8jrJ%(&M\*F[i5S6[ZdF_J:*PurHq2%lbjCq6f?'Eoh^UT)Jmc+]$KUs=7:rGqa%*HJUWGA&B/YZ]C`X"(]X%4f
%81$9ob6T@bVl?/k'oD#%0>To<7&\`KIBY"g,LQ[oc^C8HIGFP3o0`oDJ!9l>YJ16Z84'%.kLI:qF_7@dn>eD^#^K0:X"Enso)>\X
%>iko;_(Eh/C0L3cjAni)=LYa=isrkW&F`KP7h091p+,=5OqJQ@#:!Yo#9.fGll_CkaX9M^+5)2-dYtnGUDN%!1^=J>kldDp12Mkf
%[q/2$VkEjiF&4Dec.J<F?KB7d4l77-6-n;GHY_0Khd,MMR"0&%KDCD,s&gsP+8O'ii?,0,k\8@sC'q!?@Z/ehCC?au>C/j=a>u?7
%@SsfAiUKT\19e1MX7e189#HpkG/s8_e$SAXA>*]I#R0sVd;HL19RZku&H<FqhHX9_[)cf46RWJ-\lI9i4uKf[%8oj#VW5Xn;o(10
%I<M6>`8p&\+1E7E4GFb2g.@6,Bcbsd,l0;ZYeKJ+RRNOs92_T]<Ct[)4^R-uZ1Cm+,l05U;_Y!;&BWD\+c%<S\'miLjYfSgB(^$a
%CS0+:lfd9T+2Re-ccT^"R=p<FGk\U=80l8h,itmJ[MY!K[C%(h5Ma!>j0fJA^g01":HCl:rCoi*mOT$[@7C@(d;E?RmfK^uq26JJ
%Z7Bli@YZRZaAA$5OmXLFZ8HZ?N&[>KU.LMh)HM\u9X>k(13,XCM`H?l?R*'2q%2WtZDkR/bH6?9#)kOR0"f`fd/oHApRaE#`q#jW
%C/t$//b[>*ZE+"I*0%N]Qro5C%rup:RZ(`lX;j9h2.T%D-tRZ[0CUeoY!@KnG0sO[GIPc"=L!em=Nsh@g#nDh5k+$2JP&"dg*6Ao
%'Z)Zri&$qGN=M:.fr2`T=rgb]J39orHlt^Um#uNi1>tB#Nttk'*32YsC8rlql)Va3/R9sF0Wu*-!T?,JI:X2W4C:H$8pL4+Z*Oc=
%lP:B>Pr\nX)N"48ebka.5U@7==HXaFUU!Qc.TML^a[a"$!X-Ucd`S?oq6]-m"SrK^6luG?G(:73*T[R\:e)q\^N=q<;(1O0<AH]V
%StMSTe5.9@-aX<7>m7:+@Ug*i@pBRQQ[T:)N/a8TU/h9kS<bJYK+_i5<I&8tgjp[mdcDm]Hn*=t>al!Z3YeJWg^m=jSSgfK89^PT
%>,/?!`Y"N2(NEVR'MS`>U60P!TP]jZ9&G>+l&1ddA!=b[/<-icno6`jGBco)nN\1AKmdfAHc)$t<i@Pbg34P8,8ahPL^r.@7(oSO
%DcuIKUE0F=ib>d=f#Ok@RKfF<81Qi';9]OIJlW=$=)&(&Na^HcW<9E*)mIj*%teWPQpc6t+9_W7$)Q]`Ma+QuDYZ\[^VVo_iiWWg
%mFTs8^9`87,+@2rMY!CB[`5mE:tU(Z"J3S(*-_scAr0`mb`6bK:-jIV8b_lm)5R)FZE'*YR9sjTn<U/H3WX8PNC`gk01@Do6n3,D
%ppb29f8cS_19DhP-5LYtl1>.^\Hilsm0.\*"KE%K+O`[)r26m-QJ\+/.>?\8G-@=N"%L"jP&U&D=YsC7E!]YWgULGZY#!)Cr@K?b
%nf?enWoK\N>GX4;l0kJpM)i\jLV1:L>O-M,<@rA&E_M$Lp5p?aT0D)s?;)rtM2i:e!Nn&tC^b1VCm,GVr[lVGC_VkoE+rb)8nMI0
%oN.B_U!#`f83pKD.Ol'Q;[(9cI0k@+<h\%.mV^(D_?EKJp>NF9>!8YWEC;PO;C*hY$t=+lj[fN`<F[\L[t2P$*;B,h`.Va]e-V*Y
%DO)Q@JJD:1"#(Xh8o4s9k9eiP/'p+5L`"]S4tSrOGC=9*atP\C?B?'7EVCd-kt.$TlL89!49h!A'K&.>[HOP"Q5<%@5`hk[!Xi86
%MR>C#^pu=X!-[10;V5rpe5?a$$F4;66_Im'b,;=%E_:$+8l]gD:%.A];CWA59`Xof_/kC5nJEd!3XTof'@??._-dk"L#FQ?Y7?1h
%SDd&C!61f,R:'5tdX_iP:SJnAMMSlt\@@.5%t@],4W&<HD+a$QjNoC<H/)!])SALiXE7mlH7LDeo]6#"P9a)"MY)Xt3_`ZC?m)kQ
%MR.3kK+u!(KprLY9AX*5;i#\&C<NbD3oIcHfNJNg(e7H^4-6E#Xo`.5=f.rt?JBpHi&"I\UJ6[\Dk3%X/lW;p5=bjAr'jq]!B:ej
%Yg/^t?ZMJmeDOAb>?K!Y`kM/#eK@Uq4UE#eU.kDe-&uLri85j/.)[$&S)\-rdlPd(h2cI].':]L[X0!=Q?.c4_1`6%<5l)r_Kjr_
%kR5g>M0"hdQ#^*!*ej8oVp"+<%_Zr@DqsC!N`%;ILsIiN)'&Pg']IgWZ:jLI1<p:3BsYhq+lZX2E[a(LLomT^D8[AE9NBZ;bcd0I
%ZNsCMJ_0CIH;WsrV4aOB"!e-^8(s42^P?$1Feadu7gcmAZ7i_Ph7=J!b6c9qdSkrChn8pB,JtRar8M"2NM7p7<5PAXG+qbP"h]QI
%(P*g\&.hs2ckV1)+\1BTk8!*2F^YWt5/7\l!<XC?0Toh)\Cj;5e\ia?qSMJr83+nV;aVi5VZo<dN?%)1_<imb[jfVi.8<a.TA_N=
%^=;b6&Lf&O?27.LR+49ZomMOBEWKI3XY]k`3!S).AI7Yp#_*R!YPO\Jc/XB,HbM:B).pXrH3*b>TrNj!:CBlGOS_*+2e"#kqSm$q
%hrBr^4b*$-_(2-Va@YAPEF`sO3/b+iihKmXH<[<^Pb%YiCr.;"OY7MC\X`L$HZ>lBpSu[G^d%XpP@b8!CQsnF*$jcR:>6P4U)lVT
%MF*pe)>H"mGVtj[;hu;cKJ(c?P"bPEE/Lk"NB!?EU8MIS+^SJ3!P3A'XuW/k%O"WpLMA+NOBPC!ZKCSOg!]9J>(nCcpLlq\cNqH\
%K6C+l&3Nto6G>eoEAR8/7pB/5I5[f5EYi]oS?:oBYTQc`/ghQZ?/%^6%VprJ'01!JNc;Or5P5S;DT\*TriflgiRiaY(?$(o-bEA:
%LGCl5/FLl93T+j#:S=!*2D/(.EBM$Xi-^JFgD%J)k6Z1:KeTNR?rh<+jt[]/.KY?)6<[W:)r'L!RPj"TY/3J1%B.0Fp@f)\,5K\+
%/%hU3%qdSMD"qK+]_Ea^^$4*J=#<LtX]fN'(f4ZWS(:\jM>QOTjEc4<iiRlP@DO=6Z+QShUaYF-E?XpglQGkmW&ju_9T'pqA?9GP
%a)_W1)Wsga*dPdX.+XeuRS-%$*1^Z4$&JXgD8h.Ugm2U^B9_G?+i_^Z_;T08f(bs<K[V\o\%*P`KapIA5S[.E-LMUGA1&9eBDQL'
%Fb&7o="['Lcb[;a<U-^ZeiT7C9Z@.H\]s9n/KqJVN6ehmlBMRsf(4:f^%HK">GFt,I?,)=>9EX!%s+[e".54,X2"X"c,ZNnFd:7(
%W]+Vk6K%p^J%%Vf<lTs.g?88ApX\pVm]F+U;"E]&8Wd,,<9#*,=,XOFqOV<ns8KGcBZa)W>oUO_cOGJo,*)]4f#ruchY4.[2h#XU
%Ll7dlEEFmm_GHNGf=gk*>HddLCSg<Zn9_Lma3fj`H@Fd-D]smZDa!"Sk.Yc9.fLum7!iXfDS8//)AO@kkceA7pj1i,<gnSeRc%,2
%B'e*l"%efh!q4]dH/S":hcb@_&3-U(Va!'!YauqmK]L_,o$2Qqp!%pB>%n2(/ua88`brIPOCah)jW!OIJZnfrCS_nfG,QDOdZ!".
%H!n`(eA&7p*r('=\(5M:=`I3[d>@c![.p2Jg/$9KE(JRamG<0#_nG`To3Y=NR]gS4l$5,mI5YGNqT^"GhjCR-#)YE$`-cm\Y[/7K
%W3E.[pO-O7mVm*X2M9G[A:E[i",HR'N(maR%sP`H*nT:RYDo4OBaR&oj)Mt_D+'l;-ZQim)s_L!Hg@LG1C<GJ54$A&om*r?VD3F(
%mr32.mVm*X2?S>,nEZYe33:_D!*'IXp!XrLXf"89>Hc<08/PeQV[!^t[2I%1Vs2++HXf4piSJn=CWQ9C?Ula,E(6e,Q0:-al.Sh?
%0^#C>!,nZtRW^2:s&[s[^8&2%(T6t-@\1a*$:!*6XF?)tR_=->'V*o?*0W<^F<?r=2!Z9<\m!^Jp&g[/<6)CXLbW_kVB)BjT^7r"
%?6G^@(G,oYd[TUH(>_`\[g-'A+CarqarRAlLIqh&gWB9<V/L1Z/pWV$3)^*n8[rjT=D:WsIti6uqRaB8Gql@6M\A4NS%LI_DK9[p
%=r2T!m=<>)33-8S@G[g,WkJo-o3t_fX-a=TFGi*?o0$un5>C9OQJdtV"NaOA=jbDXjetWZj7?eTV^fg;%GmJU\%";FVjj$(oschH
%OcoFdPhiFHM,rZ9qb>q75J5=5=cFSriGe(m0pJXe13pRZ@8=.DECUtg:#;7%][<;G45G@H&R?;B<1<1+LW8]C7/4,Kg3C3N)tShD
%\hgBA<8L6:pt?SU0g8?;m^&C^:)Yu5Vjk=RIs@_MZPl3N9GM*i`fM)18ag\l_^tK,fO@T7H"4S&d@FF"B`Z/a2Fbhn[=7K$PF:V]
%EN83p-?%,[2nCepVqVm>:gWnE(^*@0f#(-j%WcMLE;Y*I2s0EFh3le1p)XNM?Q14)`Un/oSBOE:Y=l6B^W@Gdoo8C`\%<<PUf<#:
%"A&":1OspOK^QkCaXGl)a;jT6h\sh-h\s7M0?Q]O"7<5]4;TDBLTbt#DLJ+X7$uRK"l4*9CV3o%DuJ[';<]-i<)#"t&*(2X&5Y:d
%9(._j=+%RA4!Qk2a]++`"q9Pf=dt;Aei1UlD-uc-c:A%Ld\_&)c7KmabL>*0<)\9Z]KY`UY&CF!!XO.@5BarK?CjXj1ASXgj7RDq
%GC=8'&L9;@20WrVY[3pAH'/N%>N>BrYBPD1V%JTN:[LLoL@t+"5qg<]g_m;VHbJ`L.ug3n=jcq9,DPm^4;-JnH>C,Vm.HrgXksRj
%]t/TYRDX?=Kl#W\akRf<ZgdXjDloq!ctUmq6H\o2^^]W$C>GgS=[+HADlgu"m]GB;QcZ]4k^79eDL?meG)*\8=4qf;?17.*G]&&i
%W@`$1(Ack`r+I+trTbKlXlBocen[('*[EslD8redS&)p_11KTtLO8?,LO8?p)&211aE)4<Y[3eB/I[j'T'pW:4mm9-]f%**K'h9N
%@D+QdoeP!O!Valcgu7+9D$JBi>`<GSL@s7/PZP=)PMqMk\Gk?2D$475#Rm7F2ltV#=>9B"fC@.4gu7,dY6BY'Ec96Kc=k%j4LY.r
%"AA72ZCoj3ZK/@gpK6gA64Y)%Cq-KW(VA\uY1X(c^fR">DhU2LVI$6&;$m\[9)[O]1r?]Q<08aIc2g5Z27^k^MUhp(?/$%*768t(
%>$TbGDa;.m7UfZb5WHg'nc9G^b`OHJ>`=6&YH$Ud/^Dj35tns]!hR8"=E>oE<!eO<%a@R]l2Ii[4`Q=PKmon1%KNdV/(,oD0G'$Y
%Uu/BXjt4j_'4U^q[<AQAKE[jAhGhDZdY_!j!N6L<!A7HZrX4EG_M,"_!5^?B)ei3sh1Em?m/Ak(p`i6B$42AE<&&no`JOp:e..&7
%%1NHhe,*K^@R8d%pE(.agM?:PdgYdpkf@=MWu4ADh,T.Wh=6FrC]2ZdC)g;!d:M!1j\2M>_`L,E2CHD@VCJI-KM^";i"L&fOK0[)
%V5Mq4qLV+PFTGi&f4pbmjVdp@S(Y"aL!`l3D9>nZFYH8ea+M'3]NeWO`HCr0'=h)hKHaH:YW1Oj@^#saPV<)h!#2H;D/!LUPVpFa
%O=!+X8n<5P85P5h^m!ob7Thr8[P:*I;h/P>idXG'bJPZX749g_TXYi%%I[\>@pT;!:0EVQ,Nu+8*d-19?D:mc9rS/dK/S3b>lKqh
%>g<b#'GWTiW&^6eAi()1kS!>GaN'6-=d[?Q22>PR5r"MDVN7Tl?@_)@))\hfdEP>acFbei9.aJO7oMlGN>"\nb7A*$1L%oEEqXln
%m7Uqr)1V1#^\[U65Q9j'5CWP/pODu#LO]-l+0b\V<#P`6fr&3U[i^+pr?$L_l'K0\c*&4MJ,9)tmsk7ihu;<,J'TeF\,Q$#hgYII
%o@#@BrE&C8?[_pomsk-&dr2u#Va(+X+$]_s\)7-$^OohPr=Ar%qgTU[>Q6WHqp"k"rqQHTECWR$hu<8W^]3+SN+`/\rq#`R[84R8
%ZVUV]^]44EJ,PjSq"8"U^\c2=r;BuPo.T##nE5;X%DV\Ahu)os^]!,\h`nmSiTEH&h&jE-kANS5o7oR"]&3Kss/Sr1qr-9orqQF&
%hgYF^5CEJqZ#J*>_(U9-Q[eU6If?\R"W[j!GQ~>
%AI9_PrivateDataEnd
