%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: z9-01.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: Myst
%%CreationDate: 7/19/2018
%%BoundingBox: 0 0 600 450
%%HiResBoundingBox: 0 0 600 450
%%CropBox: 0 0 600 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">z9</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2018-07-19T11:52:52+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2018-07-19T11:52:52+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2018-07-19T11:52:52+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>192</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FWndERndgqKCzMxoABuSScVYXqf5weSbKZoYp5tQdDR2somlQH/j&#xA;IeKN/sScy4aLJIcqaZZ4hEaJ+afk3V7hLVLprO6kNI4LxDCWJ6cWNUJPhyrkcmkyR3pMc0Sy3MZt&#xA;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&#xA;/wD/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:947df45d-6dee-3443-b603-b0737c0b4fc7</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:947df45d-6dee-3443-b603-b0737c0b4fc7</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:4e8bcf99-3814-7647-a4e0-d746218d0b24</stRef:instanceID>
            <stRef:documentID>xmp.did:4e8bcf99-3814-7647-a4e0-d746218d0b24</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:701ed034-e181-ee45-b90e-15b8bae0cc15</stEvt:instanceID>
                  <stEvt:when>2018-07-17T14:56:29+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f39df844-7c5d-0a4a-9a03-20b8904b751e</stEvt:instanceID>
                  <stEvt:when>2018-07-19T11:50:15+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4e8bcf99-3814-7647-a4e0-d746218d0b24</stEvt:instanceID>
                  <stEvt:when>2018-07-19T11:52:38+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:947df45d-6dee-3443-b603-b0737c0b4fc7</stEvt:instanceID>
                  <stEvt:when>2018-07-19T11:52:52+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>600.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
600 450 li
600 0 li
cp
clp
600 0 mo
600 449.934 li
0 449.934 li
0 0 li
600 0 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
465.525 330.527 mo
466.739 326.94 460.46 315.87 463.531 317.254 cv
466.29 318.498 473.668 331.987 475.783 339.257 cv
477.066 343.667 476.362 352.856 476.362 352.856 cv
464.192 337.769 li
464.192 337.769 464.936 332.271 465.525 330.527 cv
cp
.968627 .713726 .564706 rgb
f
194.504 140.914 mo
49.0275 140.914 li
44.3573 140.914 40.5714 137.128 40.5714 132.458 cv
40.5714 69.8672 li
40.5714 65.1971 44.3573 61.4111 49.0275 61.4111 cv
194.504 61.4111 li
199.174 61.4111 202.96 65.1971 202.96 69.8672 cv
202.96 132.458 li
202.96 137.128 199.174 140.914 194.504 140.914 cv
cp
.843137 .945098 .976471 rgb
f
76.3328 135.341 mo
66.7708 155.756 li
65.9588 157.49 67.9116 159.212 69.5305 158.189 cv
112.621 136.418 li
76.3328 135.341 li
cp
f
477.237 130.656 mo
343.893 130.656 li
339.612 130.656 336.142 127.186 336.142 122.905 cv
336.142 65.534 li
336.142 61.2533 339.612 57.7832 343.893 57.7832 cv
477.237 57.7832 li
481.518 57.7832 484.988 61.2533 484.988 65.534 cv
484.988 122.905 li
484.988 127.186 481.518 130.656 477.237 130.656 cv
cp
f
426.674 125.548 mo
435.438 144.26 li
436.183 145.85 434.393 147.428 432.909 146.49 cv
393.412 126.535 li
426.674 125.548 li
cp
f
183.49 252.23 mo
308.38 252.23 li
312.39 252.23 315.64 248.98 315.64 244.971 cv
315.64 191.237 li
315.64 187.227 312.39 183.977 308.38 183.977 cv
183.49 183.977 li
179.481 183.977 176.231 187.227 176.231 191.237 cv
176.231 244.971 li
176.231 248.98 179.481 252.23 183.49 252.23 cv
cp
f
265.432 240.799 mo
276.061 263.855 li
277.253 266.4 273.659 267.981 271.283 266.48 cv
236.058 246.548 li
265.432 240.799 li
cp
f
208.04 340.613 mo
207.785 341.695 201.64 342.41 194.733 340.781 cv
187.826 339.151 182.434 336.953 182.689 335.871 cv
182.945 334.789 188.751 335.233 195.658 336.863 cv
202.565 338.492 208.295 339.531 208.04 340.613 cv
cp
.0823529 .121569 .219608 rgb
f
244.306 326.612 mo
238.448 332.926 217.591 340.237 208.305 339.303 cv
202.654 338.721 199.953 351.993 199.953 351.993 cv
183.479 340.113 li
183.479 340.113 189.691 328.876 192.558 325.844 cv
197.959 320.132 206.435 319.073 210.34 318.699 cv
213.623 318.388 223.802 318.907 219.689 321.254 cv
216.053 323.352 207.017 322.708 209.032 324.1 cv
211.421 325.74 226.087 318.554 235.56 317.308 cv
236.724 317.163 236.225 318.118 236.557 318.554 cv
236.661 318.679 236.807 318.762 237.077 318.782 cv
237.471 318.803 238.282 318.637 239.133 318.45 cv
239.175 318.45 li
240.172 318.263 241.211 318.056 241.585 318.18 cv
241.979 318.284 241.917 318.845 241.792 319.406 cv
241.668 319.925 241.481 320.444 241.543 320.507 cv
241.772 320.631 li
242.457 320.859 243.995 320.402 244.348 320.984 cv
244.659 321.503 244.555 322.23 244.306 322.812 cv
244.14 323.207 243.911 323.559 243.724 323.726 cv
243.226 324.162 242.83 324.75 243.122 324.785 cv
244.306 324.925 244.909 325.989 244.306 326.612 cv
cp
.968627 .713726 .564706 rgb
f
244.306 322.812 mo
244.14 323.207 243.911 323.559 243.724 323.726 cv
243.226 324.162 243.08 324.494 243.122 324.785 cv
236.89 328.503 227.915 333.03 221.081 333.03 cv
220.395 333.03 li
220.104 333.009 219.896 332.76 219.896 332.47 cv
219.917 332.199 220.146 331.95 220.437 331.992 cv
227.417 332.324 237.388 327.049 243.745 323.165 cv
243.932 323.04 244.119 322.936 244.306 322.812 cv
cp
.768627 .513726 .384314 rgb
f
241.543 320.507 mo
241.772 320.631 li
234.459 324.577 224.093 329.396 217.113 329.396 cv
216.864 329.437 216.573 329.167 216.573 328.876 cv
216.573 328.606 216.801 328.357 217.092 328.357 cv
217.113 328.357 li
223.968 328.357 234.522 323.352 241.792 319.406 cv
241.668 319.925 241.481 320.444 241.543 320.507 cv
cp
f
239.133 318.45 mo
232.61 321.773 224.051 325.408 217.923 325.408 cv
217.674 325.429 217.383 325.18 217.383 324.889 cv
217.383 324.598 217.632 324.37 217.902 324.37 cv
217.923 324.37 li
223.179 324.37 230.47 321.482 236.557 318.554 cv
236.661 318.679 236.807 318.762 237.077 318.782 cv
237.471 318.803 238.282 318.637 239.133 318.45 cv
cp
f
211.671 334.006 mo
211.516 334.006 211.363 333.935 211.264 333.8 cv
208.491 330.042 200.189 332.77 200.105 332.797 cv
199.843 332.891 199.552 332.743 199.464 332.478 cv
199.375 332.213 199.518 331.925 199.783 331.837 cv
200.153 331.711 208.874 328.854 212.079 333.199 cv
212.245 333.424 212.197 333.741 211.972 333.907 cv
211.881 333.974 211.776 334.006 211.671 334.006 cv
cp
f
185.722 336.181 mo
185.722 336.181 188.137 338.359 193.734 339.631 cv
200.588 341.189 205.192 340.472 205.192 340.472 cv
204.941 345.777 li
183.479 338.51 li
185.722 336.181 li
cp
f
64.1639 254.232 mo
64.1639 254.232 63.3695 253.621 62.4701 252.154 cv
60.3737 256.385 54.5189 257.238 52.7426 261.615 cv
58.4352 272.213 73.6228 280.397 81.0405 279.442 cv
83.1201 279.175 73.2791 268.513 71.9885 266.861 cv
64.1639 254.232 li
cp
.168627 .235294 .427451 rgb
f
111.8 247.471 mo
110.346 253.624 106.26 257.925 102.675 257.077 cv
99.0896 256.23 97.3623 250.556 98.8169 244.403 cv
100.272 238.25 104.357 233.949 107.942 234.796 cv
111.528 235.643 113.255 241.318 111.8 247.471 cv
cp
.768627 .513726 .384314 rgb
f
76.7137 268.099 mo
76.7137 268.099 81.6945 290.663 75.5588 300.302 cv
91.0859 304.684 li
107.194 298.925 li
107.194 298.925 102.106 289.694 102.939 282.613 cv
103.027 281.862 103.182 281.136 103.416 280.447 cv
103.416 280.447 88.387 255.55 76.7137 268.099 cv
cp
.968627 .713726 .564706 rgb
f
81.7127 276.141 mo
81.7127 276.141 101.279 279.921 103.576 279.583 cv
103.576 279.583 102.543 285.561 103.164 287.659 cv
103.164 287.659 86.3793 284.022 81.7127 276.141 cv
cp
.768627 .513726 .384314 rgb
f
106.771 232.322 mo
106.771 248.914 93.9233 261.301 77.3269 261.301 cv
73.405 261.301 69.6485 260.549 66.215 259.182 cv
55.1256 254.758 47.2895 243.927 47.2895 231.263 cv
47.2895 214.678 62.4258 203.906 79.0148 203.906 cv
94.1987 203.906 104.562 213.378 106.493 228.145 cv
106.545 228.498 106.583 228.851 106.613 229.204 cv
106.62 229.242 li
106.643 229.422 106.658 229.61 106.673 229.79 cv
106.741 230.632 106.771 231.473 106.771 232.322 cv
cp
.968627 .713726 .564706 rgb
f
112.045 276.211 mo
110.332 280.973 94.026 287.122 84.5745 280.272 cv
77.6625 275.254 67.7251 267.843 66.215 259.182 cv
66.1323 258.739 66.0798 258.303 66.0422 257.86 cv
64.9378 243.769 102.526 216.383 105.238 223.308 cv
105.238 223.308 105.689 225.133 106.372 228.123 cv
106.448 228.468 106.53 228.829 106.613 229.204 cv
106.62 229.242 li
106.666 229.422 106.711 229.603 106.748 229.79 cv
109.513 242.117 114.855 268.399 112.045 276.211 cv
cp
f
102.575 205.972 mo
99.0225 202.852 89.2754 199.788 79.0148 200.62 cv
58.1534 202.311 50.1311 213.264 46.7899 222.966 cv
40.7481 240.51 47.8855 262.311 61.1771 271.334 cv
62.9972 266.849 59.8581 255.701 62.0289 251.375 cv
60.5129 248.474 60.6089 242.828 64.2891 234.463 cv
71.4536 218.179 92.9583 224.508 104.601 220.733 cv
108.14 219.586 109.524 212.075 102.575 205.972 cv
cp
.168627 .235294 .427451 rgb
f
72.0955 254.414 mo
77.1404 258.227 82.2881 267.444 80.0667 270.382 cv
77.8452 273.32 69.0959 268.867 64.0511 265.055 cv
59.0062 261.243 56.7173 255.77 58.9387 252.832 cv
61.1602 249.894 67.0506 250.602 72.0955 254.414 cv
cp
.968627 .713726 .564706 rgb
f
66.415 245.344 mo
66.415 245.344 75.371 232.387 80.0039 234.452 cv
83.3529 235.946 81.328 238.646 77.8127 238.459 cv
75.3692 238.328 65.5698 248.451 66.415 245.344 cv
cp
.168627 .235294 .427451 rgb
f
106.748 229.79 mo
106.673 229.79 li
103.067 230.038 97.169 229.993 96.072 231.06 cv
93.5477 233.524 90.2494 232.825 91.7821 229.497 cv
93.3298 226.14 101.857 227.267 106.372 228.123 cv
106.493 228.145 li
106.545 228.498 106.583 228.851 106.613 229.204 cv
106.62 229.242 li
106.666 229.422 106.711 229.603 106.748 229.79 cv
cp
f
96.362 259.318 mo
96.259 259.318 96.1566 259.276 96.0821 259.193 cv
95.9438 259.039 95.957 258.802 96.1115 258.663 cv
100.857 254.412 li
95.9519 253.836 91.9356 245.897 91.8945 245.811 cv
91.805 245.623 91.8843 245.399 92.0714 245.31 cv
92.2581 245.219 92.483 245.3 92.5725 245.486 cv
93.4492 247.32 97.6057 254.087 101.788 253.677 cv
101.958 253.664 102.104 253.752 102.169 253.9 cv
102.234 254.048 102.196 254.222 102.075 254.33 cv
96.6126 259.223 li
96.362 259.318 li
cp
.768627 .513726 .384314 rgb
f
74.5636 250.877 mo
74.5327 250.646 81.9035 245.347 81.9035 245.347 cv
83.6907 247.25 li
75.2729 252.172 li
74.5636 250.877 li
cp
.0823529 .121569 .219608 rgb
f
82.2057 250.041 mo
82.6275 251.779 82.3185 253.346 81.5156 253.54 cv
80.7127 253.735 79.7198 252.484 79.298 250.746 cv
78.8763 249.008 79.1852 247.441 79.9882 247.246 cv
80.7911 247.051 81.7839 248.302 82.2057 250.041 cv
cp
f
106.122 236.985 mo
105.974 236.805 97.0671 238.562 97.0671 238.562 cv
97.2353 241.167 li
106.582 238.388 li
106.122 236.985 li
cp
f
100.769 241.523 mo
101.191 243.262 102.184 244.513 102.987 244.318 cv
103.79 244.123 104.099 242.556 103.677 240.818 cv
103.255 239.08 102.262 237.829 101.459 238.024 cv
100.656 238.218 100.347 239.785 100.769 241.523 cv
cp
f
94.6952 268.022 mo
96.6979 267.844 103.251 267.721 106.05 263.178 cv
106.226 262.893 106.662 262.968 106.745 263.292 cv
107.246 265.235 106.988 269.941 102.787 271.146 cv
97.545 272.65 95.1242 269.889 94.3914 268.599 cv
94.2517 268.353 94.4133 268.047 94.6952 268.022 cv
cp
1 1 1 rgb
f
149.438 322.518 mo
148.356 445.201 li
148.311 449.903 li
38.9349 449.903 li
39.4159 410.619 li
40.0093 362.223 li
40.4976 322.518 li
149.438 322.518 li
.623529 .886275 .886275 rgb
f
75.7388 300.01 mo
75.7388 300.01 46.3203 321.517 40.4976 322.521 cv
121.451 327.28 li
149.438 322.521 li
149.438 322.521 110.068 305.677 107.194 298.925 cv
91.3765 306.311 li
75.7388 300.01 li
cp
f
208.04 340.613 mo
208.04 340.613 206.988 346.735 205.388 356.094 cv
205.298 356.605 205.207 357.116 205.125 357.641 cv
201.556 378.538 198.719 428.105 187.128 440.139 cv
183.097 444.324 176.36 447.284 171.977 447.274 cv
168.807 447.267 156.325 445.146 151.316 436.508 cv
143.698 423.37 141.399 423.621 141.121 408.058 cv
139.708 327.558 li
139.708 322.428 146.613 321.391 149.438 322.518 cv
156.703 325.41 166.41 341.387 168.596 348.312 cv
170.572 354.569 171.939 361.517 172.841 368.758 cv
178.348 350.4 li
178.806 348.853 li
182.743 335.731 li
182.743 335.731 190.441 340.401 193.979 341.114 cv
199.704 342.271 208.04 340.613 208.04 340.613 cv
cp
f
127.274 311.612 mo
106.049 328.783 li
92.3381 312.445 li
79.7536 329.909 li
59.2353 311.612 li
63.7357 308.494 li
64.3893 308.044 li
75.5613 300.3 li
75.5613 300.3 87.3569 300.968 91.3764 300.803 cv
95.471 300.63 107.191 298.925 107.191 298.925 cv
122.143 308.367 li
122.834 308.81 li
127.274 311.612 li
cp
.85098 .972549 1 rgb
f
107.116 449.903 mo
81.3162 449.903 li
82.1126 430.254 li
82.2104 427.805 li
83.0068 408.275 li
83.1046 405.759 li
84.0059 383.653 li
84.0962 381.377 li
84.9452 360.526 li
85.0353 358.25 li
85.997 334.559 li
101.399 334.559 li
101.707 340.703 li
101.805 342.776 li
102.744 361.735 li
102.849 363.808 li
103.668 380.303 li
103.781 382.556 li
104.697 401.17 li
104.81 403.37 li
105.892 425.138 li
105.892 425.146 li
105.997 427.347 li
107.116 449.903 li
.0941176 .537255 .552941 rgb
f
101.805 342.776 mo
84.9451 360.526 li
85.0353 358.25 li
101.707 340.703 li
101.805 342.776 li
cp
.0470588 .266667 .266667 rgb
f
102.849 363.808 mo
84.006 383.653 li
84.0962 381.377 li
102.744 361.735 li
102.849 363.808 li
cp
f
103.781 382.556 mo
83.0068 408.275 li
83.1045 405.759 li
103.668 380.303 li
103.781 382.556 li
cp
f
104.81 403.37 mo
82.1127 430.254 li
82.2104 427.805 li
104.697 401.17 li
104.81 403.37 li
cp
f
105.997 427.347 mo
86.9511 449.903 li
84.9827 449.903 li
105.892 425.146 li
105.997 427.347 li
f
83.5115 325.05 mo
85.9248 336.383 li
101.285 335.523 li
102.591 324.662 li
92.3381 312.445 li
83.5115 325.05 li
cp
f
61.9104 259.318 mo
61.7926 259.318 61.6767 259.263 61.6033 259.16 cv
60.5813 257.717 60.2342 256.399 60.5724 255.244 cv
61.0314 253.676 62.5813 253.032 62.647 253.005 cv
62.8381 252.927 63.0568 253.019 63.1353 253.211 cv
63.2138 253.403 63.1217 253.622 62.9306 253.701 cv
62.9177 253.706 61.6444 254.243 61.2918 255.461 cv
61.0244 256.384 61.3359 257.482 62.2167 258.726 cv
62.3366 258.895 62.2963 259.129 62.1272 259.249 cv
61.9104 259.318 li
cp
.768627 .513726 .384314 rgb
f
71.9885 267.237 mo
71.8766 267.22 li
67.1956 265.758 65.7883 264.129 65.7307 264.06 cv
65.5972 263.901 65.6177 263.664 65.777 263.531 cv
65.9347 263.398 66.1713 263.418 66.3049 263.576 cv
66.3313 263.606 67.6912 265.126 72.1004 266.503 cv
72.2985 266.564 72.4089 266.775 72.3469 266.973 cv
72.297 267.134 72.1484 267.237 71.9885 267.237 cv
cp
f
165.697 403.089 mo
165.543 403.073 li
165.137 402.988 164.876 402.591 164.961 402.184 cv
171.795 369.376 li
171.879 368.971 172.276 368.708 172.684 368.795 cv
173.09 368.879 173.35 369.277 173.266 369.683 cv
166.432 402.491 li
166.358 402.845 166.045 403.089 165.697 403.089 cv
cp
.231373 .427451 .415686 rgb
f
89.0661 222.107 mo
70.4074 226.087 63.2907 231.164 62.0531 250.978 cv
62.0434 251.135 61.8567 251.213 61.7425 251.106 cv
52.0177 241.964 li
58.0899 217.552 li
58.0899 217.552 93.432 221.176 89.0661 222.107 cv
cp
.168627 .235294 .427451 rgb
f
149.438 433.334 mo
149.123 433.334 148.83 433.136 148.725 432.822 cv
142.994 415.675 142.206 361.36 142.175 359.056 cv
142.17 358.641 142.502 358.301 142.917 358.295 cv
142.927 358.295 li
143.337 358.295 143.672 358.624 143.678 359.036 cv
143.685 359.598 144.493 415.421 150.15 432.345 cv
150.282 432.739 150.069 433.164 149.676 433.295 cv
149.438 433.334 li
cp
.231373 .427451 .415686 rgb
f
122.834 308.81 mo
106.733 319.799 li
106.523 319.867 li
106.425 319.867 106.335 319.829 106.267 319.762 cv
91.9398 306.677 li
79.4005 319.664 li
79.2652 319.799 79.0549 319.822 78.9046 319.709 cv
63.7357 308.494 li
64.3893 308.044 li
79.0849 318.905 li
91.6544 305.888 li
91.7971 305.745 92.0225 305.738 92.1728 305.873 cv
106.553 319.01 li
122.143 308.367 li
122.834 308.81 li
cp
f
205.388 356.094 mo
205.298 356.605 205.207 357.116 205.125 357.641 cv
203.464 357.844 201.872 357.934 200.346 357.934 cv
189.775 357.934 182.33 353.548 178.348 350.4 cv
178.806 348.853 li
182.999 352.301 192.037 357.859 205.388 356.094 cv
cp
f
202.784 347.246 mo
202.784 348.058 202.126 348.716 201.314 348.716 cv
200.503 348.716 199.845 348.058 199.845 347.246 cv
199.845 346.435 200.503 345.777 201.314 345.777 cv
202.126 345.777 202.784 346.435 202.784 347.246 cv
cp
f
201.751 353.068 mo
201.751 353.879 201.093 354.537 200.281 354.537 cv
199.47 354.537 198.812 353.879 198.812 353.068 cv
198.812 352.256 199.47 351.598 200.281 351.598 cv
201.093 351.598 201.751 352.256 201.751 353.068 cv
cp
f
74.3265 379.977 mo
65.6234 385.148 li
63.9192 386.16 61.7977 386.16 60.0936 385.148 cv
51.3905 379.977 li
49.7493 379.002 48.7435 377.234 48.7435 375.325 cv
48.7435 355.138 li
76.9735 355.138 li
76.9735 375.325 li
76.9735 377.234 75.9676 379.002 74.3265 379.977 cv
cp
.0941176 .537255 .552941 rgb
f
51.8601 360.788 mo
51.6525 360.788 51.4845 360.62 51.4845 360.413 cv
51.4845 358.535 li
51.4845 358.327 51.6525 358.159 51.8601 358.159 cv
53.7384 358.159 li
53.946 358.159 54.114 358.327 54.114 358.535 cv
54.114 358.742 53.946 358.91 53.7384 358.91 cv
52.2358 358.91 li
52.2358 360.413 li
52.2358 360.62 52.0677 360.788 51.8601 360.788 cv
cp
.0470588 .266667 .266667 rgb
f
61.0343 358.91 mo
57.3863 358.91 li
57.1787 358.91 57.0107 358.742 57.0107 358.535 cv
57.0107 358.327 57.1787 358.159 57.3863 358.159 cv
61.0343 358.159 li
61.242 358.159 61.41 358.327 61.41 358.535 cv
61.41 358.742 61.242 358.91 61.0343 358.91 cv
cp
68.3306 358.91 mo
64.6826 358.91 li
64.475 358.91 64.307 358.742 64.307 358.535 cv
64.307 358.327 64.475 358.159 64.6826 358.159 cv
68.3306 358.159 li
68.5382 358.159 68.7063 358.327 68.7063 358.535 cv
68.7063 358.742 68.5382 358.91 68.3306 358.91 cv
cp
f
73.8568 360.788 mo
73.6492 360.788 73.4812 360.62 73.4812 360.413 cv
73.4812 358.91 li
71.9786 358.91 li
71.7709 358.91 71.6029 358.742 71.6029 358.535 cv
71.6029 358.327 71.7709 358.159 71.9786 358.159 cv
73.8568 358.159 li
74.0645 358.159 74.2325 358.327 74.2325 358.535 cv
74.2325 360.413 li
74.2325 360.62 74.0645 360.788 73.8568 360.788 cv
cp
f
73.8568 368.35 mo
73.6492 368.35 73.4812 368.182 73.4812 367.975 cv
73.4812 364.194 li
73.4812 363.986 73.6492 363.818 73.8568 363.818 cv
74.0645 363.818 74.2325 363.986 74.2325 364.194 cv
74.2325 367.975 li
74.2325 368.182 74.0645 368.35 73.8568 368.35 cv
cp
51.8601 368.36 mo
51.6525 368.36 51.4845 368.192 51.4845 367.985 cv
51.4845 364.203 li
51.4845 363.996 51.6525 363.828 51.8601 363.828 cv
52.0677 363.828 52.2358 363.996 52.2358 364.203 cv
52.2358 367.985 li
52.2358 368.192 52.0677 368.36 51.8601 368.36 cv
cp
73.6665 375.892 mo
73.5546 375.875 li
73.3565 375.813 73.246 375.602 73.308 375.405 cv
73.4229 375.037 73.4812 374.653 73.4812 374.265 cv
73.4812 371.756 li
73.4812 371.548 73.6492 371.38 73.8568 371.38 cv
74.0645 371.38 74.2325 371.548 74.2325 371.756 cv
74.2325 374.265 li
74.2325 374.73 74.1628 375.188 74.0249 375.629 cv
73.9746 375.79 73.8264 375.892 73.6665 375.892 cv
cp
52.0534 375.902 mo
51.8935 375.902 51.7453 375.799 51.695 375.638 cv
51.5556 375.194 51.4848 374.732 51.4845 374.265 cv
51.4845 371.765 li
51.4845 371.558 51.6525 371.39 51.8601 371.39 cv
52.0677 371.39 52.2358 371.558 52.2358 371.765 cv
52.2358 374.265 li
52.2361 374.656 52.2952 375.042 52.4119 375.414 cv
52.4739 375.612 52.3638 375.823 52.1657 375.885 cv
52.0534 375.902 li
cp
67.9498 380.549 mo
67.8218 380.549 67.6967 380.483 67.6266 380.365 cv
67.5206 380.186 67.5793 379.956 67.7576 379.85 cv
71.0086 377.919 li
71.1865 377.813 71.4177 377.871 71.5233 378.05 cv
71.6293 378.229 71.5706 378.459 71.3923 378.565 cv
68.1413 380.496 li
67.9498 380.549 li
cp
57.7752 380.554 mo
57.5837 380.501 li
54.3327 378.57 li
54.1544 378.464 54.0957 378.234 54.2017 378.055 cv
54.3077 377.876 54.5381 377.819 54.7164 377.924 cv
57.9674 379.856 li
58.1457 379.961 58.2044 380.191 58.0984 380.37 cv
58.0283 380.489 57.9032 380.554 57.7752 380.554 cv
cp
62.8587 382.886 mo
62.1741 382.886 61.487 382.73 60.8722 382.435 cv
60.6851 382.344 60.6062 382.12 60.6961 381.933 cv
60.7856 381.747 61.009 381.667 61.1972 381.757 cv
62.2288 382.253 63.497 382.251 64.5271 381.753 cv
64.7149 381.663 64.9387 381.741 65.029 381.928 cv
65.1192 382.115 65.0411 382.339 64.8543 382.429 cv
64.2362 382.728 63.5461 382.886 62.8587 382.886 cv
cp
f
57.5597 364.286 mo
53.6345 364.286 li
53.1529 364.286 52.7624 363.896 52.7624 363.414 cv
52.7624 353.449 li
52.7624 351.883 54.0314 350.614 55.5967 350.614 cv
55.5974 350.614 li
57.1627 350.614 58.4317 351.883 58.4317 353.449 cv
58.4317 363.414 li
58.4317 363.896 58.0413 364.286 57.5597 364.286 cv
cp
.0823529 .121569 .219608 rgb
f
38.9358 449.829 mo
34.6012 449.797 31.8952 449.776 31.8952 449.776 cv
38.9349 368.645 li
38.9349 368.645 39.2999 370.251 39.8803 372.747 cv
39.4159 410.619 li
38.9358 449.829 li
.768627 .768627 .768627 rgb
f
81.3162 449.903 mo
49.5811 449.903 li
45.5141 449.876 41.8554 449.85 38.9358 449.829 cv
39.4159 410.619 li
39.8803 372.747 li
41.2345 378.571 43.7606 389.245 45.5539 395.686 cv
50.4926 413.421 55.9776 437.011 81.4668 446.188 cv
81.3162 449.903 li
.482353 .682353 .682353 rgb
f
99.8286 449.903 mo
86.9511 449.903 li
88.3904 448.199 li
91.7432 448.96 95.387 449.506 99.3477 449.806 cv
99.8512 449.843 100.001 449.873 99.8286 449.903 cv
84.9827 449.903 mo
81.3162 449.903 li
81.4668 446.188 li
83.1418 446.791 84.9019 447.332 86.7552 447.805 cv
84.9827 449.903 li
.0784314 .415686 .427451 rgb
f
86.9511 449.903 mo
84.9827 449.903 li
86.7552 447.805 li
87.2924 447.942 87.8377 448.073 88.3904 448.199 cv
86.9511 449.903 li
.0431373 .207843 .207843 rgb
f
13.1967 449.903 mo
13.1967 449.903 7.6904 382.039 19.7114 343.665 cv
21.7016 337.311 34.3619 324.414 44.8763 320.642 cv
45.1324 320.55 54.0068 323.325 51.2976 328.818 cv
38.9349 353.883 46.1325 449.903 46.1325 449.903 cv
13.1967 449.903 li
cp
.623529 .886275 .886275 rgb
f
47.0791 449.903 mo
45.5695 449.932 li
43.087 361.704 li
43.0755 361.29 43.4003 360.946 43.8215 360.934 cv
44.2283 360.9 44.5798 361.247 44.5911 361.669 cv
47.0791 449.903 li
cp
.231373 .427451 .415686 rgb
f
369.119 64.5186 mo
369.119 82.8803 354.355 97.7654 336.142 97.7654 cv
317.929 97.7654 303.164 82.8803 303.164 64.5186 cv
303.164 46.1569 317.929 31.2718 336.142 31.2718 cv
354.355 31.2718 369.119 46.1569 369.119 64.5186 cv
cp
.27451 .388235 .619608 rgb
f
336.142 36.5163 mo
320.827 36.5163 308.367 49.0784 308.367 64.5186 cv
308.367 79.9588 320.827 92.5207 336.142 92.5207 cv
351.457 92.5207 363.917 79.9588 363.917 64.5186 cv
363.917 49.0784 351.457 36.5163 336.142 36.5163 cv
cp
336.142 93.7272 mo
320.167 93.7272 307.17 80.6244 307.17 64.5186 cv
307.17 48.4127 320.167 35.3099 336.142 35.3099 cv
352.117 35.3099 365.114 48.4127 365.114 64.5186 cv
365.114 80.6244 352.117 93.7272 336.142 93.7272 cv
cp
.454902 .568627 .807843 rgb
f
338.736 64.6711 mo
338.736 65.9933 337.673 67.065 336.362 67.065 cv
335.05 67.065 333.987 65.9933 333.987 64.6711 cv
333.987 63.349 335.05 62.2771 336.362 62.2771 cv
337.673 62.2771 338.736 63.349 338.736 64.6711 cv
cp
f
336.993 65.5406 mo
336.654 65.5406 336.317 65.3962 336.08 65.1153 cv
335.653 64.607 335.714 63.8459 336.218 63.4146 cv
345.579 55.4014 li
346.084 54.9709 346.839 55.0327 347.266 55.5399 cv
347.693 56.0482 347.632 56.8093 347.128 57.2406 cv
337.767 65.2538 li
337.542 65.4463 337.266 65.5406 336.993 65.5406 cv
cp
f
335.848 66.2363 mo
335.608 66.2121 li
322.189 63.4594 li
321.541 63.3263 321.123 62.6894 321.255 62.0368 cv
321.387 61.3835 322.021 60.9641 322.666 61.0949 cv
336.085 63.8476 li
336.733 63.9808 337.151 64.6176 337.019 65.2703 cv
336.904 65.8422 336.405 66.2363 335.848 66.2363 cv
cp
f
346.197 187.169 mo
340.275 187.169 li
340.275 157.53 li
346.197 157.53 li
346.197 187.169 li
cp
.27451 .388235 .619608 rgb
f
363.523 187.169 mo
357.601 187.169 li
357.601 164.432 li
363.523 164.432 li
363.523 187.169 li
cp
f
380.849 187.169 mo
374.927 187.169 li
374.927 157.53 li
380.849 157.53 li
380.849 187.169 li
cp
f
398.175 187.169 mo
392.253 187.169 li
392.253 146.771 li
398.175 146.771 li
398.175 187.169 li
cp
f
487.796 346.75 mo
488.079 348.974 485.913 347.581 479.519 348.86 cv
473.125 350.139 467.764 350.294 467.547 349.205 cv
467.329 348.117 471.301 346.445 477.762 345.563 cv
485.75 344.472 487.656 345.649 487.796 346.75 cv
cp
.0627451 .34902 .34902 rgb
f
588.062 449.932 mo
567.514 449.932 li
522.047 449.924 li
485.78 449.924 li
485.78 449.924 484.249 433.03 484.105 410.499 cv
484.105 410.491 li
483.961 386.46 485.378 356.02 491.902 332.822 cv
491.91 332.799 li
492.774 329.731 493.744 326.791 494.835 324.011 cv
494.956 323.708 495.078 323.405 495.191 323.102 cv
496.374 320.155 497.973 317.064 499.776 314.063 cv
500.034 313.639 500.291 313.207 500.556 312.783 cv
500.738 312.495 500.928 312.2 501.117 311.912 cv
503.641 307.95 506.437 304.268 508.991 301.419 cv
509.172 301.207 509.362 301.002 509.544 300.805 cv
510.741 299.51 511.878 298.419 512.885 297.586 cv
513.09 297.411 li
516.674 297.124 li
523.616 296.57 li
548.948 294.548 li
549.85 294.472 li
552.896 294.229 li
552.896 294.229 563.861 294.873 575.986 330.738 cv
583.526 353.027 583.515 404.329 588.062 449.932 cv
.168627 .235294 .427451 rgb
f
522.047 449.924 mo
522.047 449.924 li
485.78 449.924 li
485.78 449.924 484.249 433.03 484.105 410.499 cv
484.105 410.491 li
484.158 409.923 484.226 409.43 484.295 409.021 cv
485.469 402.203 524.176 349.171 524.176 349.171 cv
524.176 349.171 539.771 363.315 531.406 425.499 cv
530.337 433.446 526.912 442.454 522.047 449.924 cv
.133333 .184314 .333333 rgb
f
531.375 353.156 mo
531.315 356.103 531.262 359.004 531.209 361.868 cv
530.549 398.127 530.019 426.764 515.811 439.962 cv
510.279 445.106 502.936 447.621 493.441 447.621 cv
492.804 447.621 492.153 447.606 491.493 447.583 cv
489.887 447.121 li
482.923 445.121 li
470.018 435.75 470.427 410.446 472.587 396.9 cv
478.641 401.551 li
478.641 401.551 483.408 334.185 499.662 314.192 cv
499.776 314.063 li
506.187 306.419 519.971 311.616 524.017 320.132 cv
525.389 323.011 527.435 328.647 529.701 335.966 cv
530.11 337.284 530.527 338.663 530.943 340.095 cv
531.307 344.042 531.474 348.383 531.375 353.156 cv
cp
.168627 .235294 .427451 rgb
f
523.392 279.973 mo
517.526 284.124 li
524.613 284.496 li
523.392 279.973 li
cp
.0823529 .34902 .34902 rgb
f
548.652 281.622 mo
541.27 277.631 li
538.675 285.365 li
548.652 281.622 li
cp
f
541.456 252.014 mo
541.456 252.014 543.264 293.72 553.736 295.476 cv
514.597 298.316 li
514.597 298.316 524.187 283.508 518.158 269.915 cv
518.158 269.915 534.815 242.333 541.456 252.014 cv
cp
.968627 .713726 .564706 rgb
f
556.591 296.012 mo
510.789 299.525 li
512.841 294.833 li
513.211 294 li
517.526 284.12 li
517.526 284.12 529.049 284.592 532.844 284.719 cv
539.217 284.933 548.65 281.621 548.65 281.621 cv
553.327 290.251 li
553.642 290.84 li
553.736 291.013 li
556.591 296.012 li
cp
.0941176 .537255 .552941 rgb
f
532.228 259.523 mo
532.885 255.961 519.27 272.754 519.27 272.754 cv
520.028 277.793 li
520.028 277.793 530.712 267.729 532.228 259.523 cv
cp
.768627 .513726 .384314 rgb
f
552.147 233.174 mo
550.199 247.722 536.825 257.937 522.274 255.99 cv
507.723 254.044 497.505 240.672 499.452 226.125 cv
501.399 211.577 514.774 201.362 529.325 203.308 cv
543.876 205.255 554.094 218.626 552.147 233.174 cv
cp
.968627 .713726 .564706 rgb
f
500.383 237.44 mo
500.383 237.44 499.343 254.786 499.336 260.576 cv
499.328 267.586 500.514 271.489 504.266 274.135 cv
506.741 275.88 515.585 275.926 519.842 272.916 cv
525.742 268.745 542.95 249.954 542.95 249.954 cv
542.95 249.954 507.228 228.281 500.383 237.44 cv
cp
f
499.732 234.885 mo
499.336 247.747 492.105 252.094 492.665 252.368 cv
501.696 254.849 li
503.333 239.104 li
503.333 239.104 499.773 233.573 499.732 234.885 cv
cp
f
504.395 230.035 mo
504.395 230.035 li
503.996 231.009 504.55 232.657 505.665 232.871 cv
509.388 233.584 509.809 233.307 515.244 234.473 cv
519.974 235.487 522.149 237.713 523.389 237.877 cv
526.677 238.313 520.341 233.336 518.113 232.624 cv
514.962 231.617 510.015 229.644 506.428 228.986 cv
505.559 228.827 504.706 229.276 504.395 230.035 cv
cp
.168627 .235294 .427451 rgb
f
501.277 261.649 mo
501.277 261.649 507.125 262.64 510.392 260.18 cv
510.79 259.88 511.339 260.317 511.217 260.8 cv
510.951 261.85 510.422 263.3 509.374 264.66 cv
506.703 268.125 501.125 266.022 501.277 261.65 cv
501.277 261.649 li
cp
1 1 1 rgb
f
506.247 237.288 mo
515.31 240.568 li
514.193 241.8 li
505.842 239.225 li
506.247 237.288 li
cp
.0823529 .121569 .219608 rgb
f
507.914 239.252 mo
506.725 240.118 506.302 244.231 508.13 244.373 cv
510.674 244.571 510.92 237.062 507.914 239.252 cv
cp
f
556.102 206.644 mo
554.033 203.894 548.016 198.893 542.143 196.18 cv
529.034 190.119 502.83 192.43 496.51 205.628 cv
490.622 217.933 499.427 221.736 504.027 221.305 cv
513.78 220.395 527.17 213.811 533.027 219.532 cv
532.944 219.6 li
538.559 224.919 540.885 231.389 541.704 237.11 cv
541.704 237.117 li
541.742 237.397 541.78 237.67 541.81 237.95 cv
542.704 245.474 541.06 251.49 541.06 251.49 cv
542.105 260.862 li
542.204 261.764 li
542.795 267.06 li
546.97 265.742 550.107 262.552 554.033 256.816 cv
554.487 256.15 554.95 255.453 555.427 254.718 cv
556.056 253.763 556.7 252.74 557.375 251.664 cv
560.186 247.156 568.279 222.829 556.102 206.644 cv
cp
.168627 .235294 .427451 rgb
f
519.547 218.02 mo
539.55 215.806 549.695 251.493 549.695 251.493 cv
559.5 236.108 li
564.09 228.906 563.036 219.478 556.969 213.467 cv
542.92 199.548 li
542.92 199.548 514.793 218.546 519.547 218.02 cv
cp
f
537.945 243.08 mo
539.468 240.299 523.343 229.73 520.963 218.683 cv
520.903 218.425 520.857 218.168 520.819 217.91 cv
520.471 215.705 520.698 213.493 521.751 211.326 cv
522.411 209.962 525.419 210.47 528.897 211.622 cv
529.064 211.682 529.231 211.743 529.405 211.803 cv
534.952 213.713 541.423 217.092 541.423 217.092 cv
547.016 236.473 li
537.945 243.08 li
cp
f
553.736 291.013 mo
512.841 294.833 li
513.211 294 li
553.327 290.251 li
553.642 290.84 li
553.736 291.013 li
cp
1 1 1 rgb
f
456.84 309.352 mo
458.003 314.953 459.542 327.171 460.906 331.009 cv
464.137 340.099 477.801 338.414 477.801 338.414 cv
477.801 338.414 464.967 319.131 459.236 302.253 cv
458.816 301.017 457.305 299.04 456.471 299.345 cv
456.291 299.411 454.723 299.153 456.84 309.352 cv
cp
.968627 .713726 .564706 rgb
f
461.778 332.828 mo
474.419 354.832 li
485.72 351.531 li
485.72 351.531 475.027 323.879 473.997 329.751 cv
473.15 334.579 461.778 332.828 461.778 332.828 cv
cp
f
495.823 427.456 mo
488.119 369.31 li
468.645 351.604 li
468.645 351.604 463.812 397.316 463.491 409.779 cv
462.594 444.629 490.266 447.154 490.266 447.154 cv
499.075 433.77 li
495.823 427.456 li
cp
.168627 .235294 .427451 rgb
f
491.781 409.4 mo
491.587 409.4 491.422 409.253 491.404 409.057 cv
487.556 368.399 li
487.537 368.191 487.689 368.006 487.898 367.986 cv
488.092 367.975 488.291 368.119 488.311 368.328 cv
492.159 408.986 li
492.178 409.194 492.026 409.379 491.817 409.399 cv
491.781 409.4 li
cp
.0784314 .0784314 .0784314 rgb
f
467.54 349.171 mo
467.1 366.712 li
467.1 366.712 488.429 367.149 488.424 365.149 cv
488.422 364.396 486.713 346.889 486.713 346.889 cv
486.713 346.889 480.942 348.674 476.643 348.995 cv
472.951 349.27 467.54 349.171 467.54 349.171 cv
cp
.0941176 .537255 .552941 rgb
f
465.639 331.049 mo
465.544 331.142 465.401 331.182 465.264 331.14 cv
465.064 331.079 464.952 330.867 465.013 330.667 cv
465.168 330.159 465.124 329.706 464.874 329.282 cv
464.103 327.967 461.712 327.441 461.688 327.435 cv
461.484 327.391 461.354 327.19 461.397 326.985 cv
461.441 326.782 461.642 326.651 461.848 326.694 cv
461.959 326.718 464.589 327.3 465.528 328.898 cv
465.885 329.507 465.956 330.177 465.738 330.889 cv
465.639 331.049 li
cp
.768627 .513726 .384314 rgb
f
531.375 353.156 mo
531.315 356.103 531.262 359.004 531.209 361.868 cv
530.549 398.127 530.019 426.764 515.811 439.962 cv
510.279 445.106 502.936 447.621 493.441 447.621 cv
492.804 447.621 492.153 447.606 491.493 447.583 cv
491.084 447.576 490.667 447.553 490.243 447.53 cv
490.038 447.523 489.879 447.341 489.887 447.136 cv
489.887 447.121 li
489.91 446.917 490.092 446.757 490.289 446.773 cv
501.14 447.371 509.316 444.962 515.295 439.409 cv
529.269 426.431 529.792 397.93 530.451 361.853 cv
530.504 358.989 530.557 356.088 530.617 353.141 cv
530.754 346.633 530.398 340.936 529.701 335.966 cv
527.791 322.306 523.305 314.079 519.327 309.291 cv
515.31 304.449 511.196 302.298 508.991 301.419 cv
509.172 301.207 509.362 301.002 509.544 300.805 cv
511.885 301.775 515.886 303.98 519.865 308.753 cv
524.328 314.109 529.413 323.655 530.943 340.095 cv
531.307 344.042 531.474 348.383 531.375 353.156 cv
cp
.0784314 .0784314 .0784314 rgb
f
529.39 212.16 mo
529.261 212.364 526.806 216.327 520.963 218.683 cv
520.903 218.425 520.857 218.168 520.819 217.91 cv
526.351 215.615 528.716 211.811 528.746 211.766 cv
528.897 211.622 li
529.003 211.569 529.14 211.569 529.261 211.644 cv
529.405 211.803 li
529.458 211.917 529.458 212.046 529.39 212.16 cv
cp
.0823529 .121569 .219608 rgb
f
542.204 261.764 mo
542.105 260.862 li
547.251 256.612 549.88 251.088 549.024 246.08 cv
548.372 242.284 545.773 239.36 541.81 237.95 cv
541.514 237.844 541.204 237.746 540.893 237.655 cv
535.68 236.17 531.875 227.707 531.875 223.858 cv
531.875 223.653 532.042 223.479 532.254 223.479 cv
532.459 223.479 532.633 223.653 532.633 223.858 cv
532.633 227.411 536.293 235.556 541.105 236.92 cv
541.31 236.981 541.507 237.041 541.704 237.11 cv
541.704 237.117 li
546.129 238.557 549.054 241.754 549.774 245.959 cv
550.691 251.354 547.811 257.294 542.204 261.764 cv
cp
f
546.231 250.759 mo
542.371 255.24 537.124 257.05 534.513 254.801 cv
531.902 252.553 532.915 247.097 536.776 242.616 cv
540.636 238.135 545.883 236.325 548.494 238.574 cv
551.105 240.822 550.092 246.278 546.231 250.759 cv
cp
.968627 .713726 .564706 rgb
f
547.588 244.426 mo
547.536 244.423 li
547.329 244.395 547.183 244.204 547.212 243.997 cv
547.363 242.873 547.175 242.083 546.651 241.648 cv
545.612 240.787 543.542 241.458 543.52 241.465 cv
543.327 241.53 543.108 241.424 543.041 241.225 cv
542.975 241.026 543.082 240.812 543.281 240.746 cv
543.382 240.712 545.769 239.935 547.133 241.064 cv
547.872 241.676 548.151 242.697 547.962 244.098 cv
547.937 244.288 547.774 244.426 547.588 244.426 cv
cp
.768627 .513726 .384314 rgb
f
539.629 252.747 mo
539.422 252.747 539.253 252.58 539.251 252.372 cv
539.249 252.163 539.417 251.991 539.626 251.989 cv
542.165 251.967 544.306 248.516 544.327 248.481 cv
544.437 248.302 544.671 248.247 544.848 248.355 cv
545.026 248.465 545.083 248.698 544.974 248.876 cv
544.878 249.033 542.588 252.721 539.633 252.747 cv
539.629 252.747 li
cp
f
555.427 254.718 mo
554.95 255.453 554.487 256.15 554.033 256.816 cv
557.466 246.164 556.23 234.874 556.215 234.73 cv
556.193 234.518 556.336 234.329 556.549 234.306 cv
556.753 234.276 556.943 234.435 556.966 234.639 cv
556.981 234.783 558.064 244.641 555.427 254.718 cv
cp
.0823529 .121569 .219608 rgb
f
547.251 137.225 mo
547.294 148.939 539.013 158.466 528.753 158.504 cv
518.494 158.542 510.142 149.077 510.098 137.363 cv
510.055 125.65 518.336 116.123 528.596 116.085 cv
538.855 116.047 547.207 125.512 547.251 137.225 cv
cp
.843137 .945098 .976471 rgb
f
514.545 150.264 mo
523.472 163.178 518.858 169.421 518.858 169.421 cv
539.694 169.344 li
539.694 169.344 535.733 160.651 542.637 150.252 cv
546.242 144.823 510.839 144.904 514.545 150.264 cv
cp
f
539.74 181.796 mo
518.923 181.873 li
518.897 175.027 li
539.715 174.95 li
539.74 181.796 li
cp
.168627 .235294 .427451 rgb
f
539.72 176.19 mo
518.902 176.268 li
518.877 169.421 li
539.694 169.344 li
539.72 176.19 li
cp
.372549 .447059 .639216 rgb
f
513.626 135.32 mo
513.873 132.934 514.447 129.396 515.767 126.81 cv
516.157 126.046 517.006 125.379 517.645 125.516 cv
519.318 125.837 519.387 128.151 518.768 129.809 cv
518.16 131.438 517.575 133.583 517.406 136.075 cv
517.3 137.651 516.324 138.76 515.279 138.461 cv
515.075 138.403 li
514.112 138.127 513.477 136.764 513.626 135.32 cv
cp
1 1 1 rgb
f
546.773 117.124 mo
546.459 117.124 546.141 117.032 545.863 116.841 cv
545.131 116.337 544.947 115.336 545.45 114.605 cv
551.038 106.489 li
551.54 105.756 552.543 105.572 553.274 106.076 cv
554.006 106.579 554.191 107.581 553.688 108.312 cv
548.099 116.428 li
547.788 116.881 547.284 117.124 546.773 117.124 cv
cp
.992157 .823529 .278431 rgb
f
555.312 129.065 mo
554.544 129.065 553.865 128.514 553.729 127.732 cv
553.578 126.857 554.163 126.025 555.039 125.873 cv
564.749 124.187 li
565.62 124.037 566.456 124.622 566.608 125.497 cv
566.759 126.371 566.174 127.204 565.298 127.356 cv
555.589 129.042 li
555.496 129.057 555.403 129.065 555.312 129.065 cv
cp
f
501.868 129.263 mo
501.604 129.241 li
491.882 127.627 li
491.005 127.482 490.412 126.655 490.558 125.779 cv
490.704 124.903 491.534 124.307 492.407 124.456 cv
502.13 126.069 li
503.006 126.214 503.599 127.043 503.453 127.918 cv
503.322 128.705 502.641 129.263 501.868 129.263 cv
cp
f
528.178 111.369 mo
527.31 111.369 526.595 110.678 526.571 109.805 cv
526.304 99.9554 li
526.28 99.0681 526.98 98.3286 527.868 98.3051 cv
528.726 98.2721 529.495 98.9817 529.519 99.869 cv
529.786 109.719 li
529.81 110.606 529.109 111.345 528.222 111.369 cv
528.178 111.369 li
cp
f
510.792 117.718 mo
510.338 117.718 509.887 117.527 509.569 117.156 cv
503.161 109.671 li
502.584 108.996 502.663 107.981 503.337 107.403 cv
504.012 106.826 505.028 106.905 505.605 107.579 cv
512.013 115.064 li
512.59 115.738 512.511 116.754 511.837 117.331 cv
511.534 117.59 511.162 117.718 510.792 117.718 cv
cp
f
357.191 202.193 mo
357.191 202.193 341.75 211.529 343.64 224.42 cv
344.472 230.093 360.614 231.882 360.614 231.882 cv
357.191 202.193 li
cp
1 .854902 .443137 rgb
f
380.424 274.319 mo
375.006 274.781 366.94 274.269 360.814 273.721 cv
356.2 273.29 352.66 272.856 352.193 272.784 cv
352.136 272.782 li
352.136 272.782 343.59 245.546 342.734 235.445 cv
340.904 213.966 358.22 203.905 376.645 201.306 cv
383.965 200.274 402.255 205.194 404.085 226.673 cv
405.902 248.148 398.977 272.738 380.424 274.319 cv
1 .741176 .611765 rgb
f
343.074 238.071 mo
343.074 238.071 344.08 246.793 341.282 250.274 cv
340.747 250.939 341.406 251.941 342.256 252.018 cv
347.623 253.884 li
343.074 238.071 li
cp
f
351.228 233.357 mo
351.228 233.357 li
350.74 232.38 349.648 231.772 348.268 231.711 cv
342.61 231.662 li
342.562 234.318 li
351.228 233.357 li
cp
.686275 .537255 .172549 rgb
f
397.823 309.371 mo
341.075 305.9 li
341.075 305.9 368.119 295.738 355.515 257.247 cv
353.512 251.132 388.214 252.078 386.866 258.387 cv
380.342 288.91 397.823 309.371 397.823 309.371 cv
1 .741176 .611765 rgb
f
407.728 224.697 mo
410.387 244.026 408.72 256.167 391.438 259.198 cv
371.277 262.734 352.493 247.715 350.768 227.322 cv
349.021 206.673 353.015 201.06 367.872 199.007 cv
383.11 196.901 404.822 203.568 407.728 224.697 cv
1 .854902 .443137 rgb
f
350.724 241.797 mo
350.359 240.853 li
344.816 239.471 li
345.112 241.727 li
350.724 241.797 li
cp
.137255 .137255 .137255 rgb
f
345.129 242.584 mo
345.275 243.886 345.921 244.882 346.573 244.809 cv
347.224 244.736 347.633 243.621 347.487 242.319 cv
347.341 241.018 346.694 240.022 346.043 240.095 cv
345.392 240.168 344.982 241.283 345.129 242.584 cv
cp
f
307.565 350.941 mo
307.565 353.227 299.374 354.904 292.007 354.904 cv
284.641 354.904 277.137 354.536 277.137 352.25 cv
277.137 349.964 285.711 349.26 293.078 349.26 cv
300.444 349.26 307.565 348.656 307.565 350.941 cv
cp
.0823529 .121569 .219608 rgb
f
290.361 325.606 mo
284.361 363.996 li
290.525 365.149 li
302.46 356.011 li
307.565 343.466 li
290.361 325.606 li
cp
.968627 .713726 .564706 rgb
f
327.406 369.289 mo
271.044 330.01 li
299.878 288.348 li
358.719 330.36 li
327.406 369.289 li
.168627 .235294 .427451 rgb
f
320.022 363.053 mo
271.771 310.63 li
310.668 278.073 li
359.019 331.824 li
320.022 363.053 li
.623529 .886275 .886275 rgb
f
284.874 315.322 mo
284.723 315.322 284.574 315.257 284.471 315.133 cv
284.288 314.91 284.32 314.582 284.542 314.399 cv
284.802 314.184 310.612 292.91 312.275 291.356 cv
312.486 291.16 312.816 291.172 313.012 291.381 cv
313.209 291.591 313.197 291.921 312.988 292.118 cv
311.301 293.694 286.27 314.326 285.205 315.203 cv
285.108 315.283 284.991 315.322 284.874 315.322 cv
cp
.0470588 .266667 .266667 rgb
f
290.091 321.425 mo
289.94 321.425 289.791 321.36 289.688 321.235 cv
289.505 321.012 289.536 320.685 289.759 320.501 cv
290.019 320.287 315.829 299.012 317.492 297.458 cv
317.702 297.261 318.032 297.272 318.229 297.482 cv
318.425 297.693 318.414 298.023 318.204 298.219 cv
316.517 299.796 291.487 320.428 290.422 321.306 cv
290.325 321.386 290.207 321.425 290.091 321.425 cv
cp
f
295.308 327.527 mo
295.157 327.527 295.008 327.462 294.905 327.338 cv
294.722 327.115 294.753 326.787 294.976 326.604 cv
295.236 326.389 321.046 305.115 322.708 303.561 cv
322.92 303.364 323.248 303.374 323.446 303.585 cv
323.642 303.796 323.631 304.126 323.421 304.322 cv
321.734 305.899 296.703 326.531 295.639 327.408 cv
295.542 327.489 295.424 327.527 295.308 327.527 cv
cp
f
300.524 332.957 mo
300.374 332.957 300.225 332.892 300.122 332.768 cv
299.939 332.545 299.97 332.217 300.192 332.034 cv
300.453 331.819 326.263 310.545 327.925 308.99 cv
328.136 308.794 328.466 308.804 328.662 309.015 cv
328.859 309.226 328.848 309.555 328.638 309.752 cv
326.951 311.329 301.92 331.961 300.856 332.838 cv
300.758 332.918 300.641 332.957 300.524 332.957 cv
cp
f
305.741 338.237 mo
305.591 338.237 305.441 338.172 305.339 338.048 cv
305.155 337.825 305.187 337.497 305.409 337.314 cv
305.669 337.099 331.479 315.825 333.142 314.271 cv
333.353 314.074 333.683 314.085 333.879 314.295 cv
334.076 314.506 334.064 314.836 333.855 315.032 cv
332.168 316.609 307.137 337.241 306.073 338.118 cv
305.975 338.199 305.858 338.237 305.741 338.237 cv
cp
f
310.957 344.149 mo
310.808 344.149 310.658 344.083 310.555 343.959 cv
310.372 343.736 310.404 343.409 310.626 343.225 cv
310.886 343.01 336.696 321.736 338.359 320.183 cv
338.571 319.986 338.898 319.999 339.096 320.207 cv
339.292 320.418 339.281 320.748 339.072 320.944 cv
337.385 322.52 312.353 343.152 311.289 344.03 cv
311.192 344.11 311.075 344.149 310.957 344.149 cv
cp
f
316.174 349.192 mo
316.025 349.192 315.875 349.126 315.772 349.002 cv
315.589 348.779 315.62 348.451 315.842 348.268 cv
316.103 348.054 341.913 326.779 343.576 325.226 cv
343.786 325.029 344.116 325.043 344.313 325.25 cv
344.509 325.461 344.498 325.791 344.288 325.987 cv
342.601 327.563 317.57 348.195 316.506 349.072 cv
316.408 349.153 316.291 349.192 316.174 349.192 cv
cp
f
440.212 372.58 mo
435.583 357.107 428.236 327.689 424.551 313.087 cv
422.636 305.496 414.648 308.092 408.126 312.424 cv
395.799 320.615 li
398.127 359.836 li
392.758 364.69 li
367.655 383.13 li
367.655 383.13 402.276 414.332 428.296 418.762 cv
444.409 421.505 447.984 398.555 440.212 372.58 cv
.0745098 .376471 .368627 rgb
f
420.212 392.54 mo
420.013 392.54 419.815 392.449 419.686 392.278 cv
413.154 383.568 li
412.936 383.278 412.194 382.454 412.484 382.235 cv
412.776 382.015 413.353 381.381 413.57 381.67 cv
420.738 391.486 li
420.957 391.776 420.899 392.189 420.609 392.408 cv
420.489 392.498 420.35 392.54 420.212 392.54 cv
cp
.0470588 .266667 .266667 rgb
f
427.391 449.932 mo
322.711 449.932 li
325.616 438.306 li
326.567 434.511 li
326.587 434.42 li
332.143 412.17 li
332.153 412.089 li
332.264 411.664 li
332.204 411.219 li
332.194 411.138 li
329.147 390.213 li
329.147 390.183 li
329.077 389.708 li
317.985 313.385 li
352.939 296.103 li
390.221 296.103 li
416.168 304.592 li
422.321 306.555 425.073 312.464 426.105 319.011 cv
427.542 328.138 425.64 338.529 424.952 341.352 cv
424.952 341.352 412.474 395.617 414.427 413.82 cv
415.298 421.874 422.918 439.905 427.391 449.932 cv
.0941176 .537255 .552941 rgb
f
gsave
332.153 412.089 mo
332.224 411.806 332.234 411.513 332.204 411.219 cv
332.194 411.138 li
329.147 390.213 li
332.194 411.138 li
332.204 411.219 li
332.264 411.664 li
332.153 412.089 li
clp
329.147 390.213 mo
332.264 390.213 li
332.264 412.089 li
329.147 412.089 li
cp
.776471 .776471 .776471 rgb
f
grestore
333.762 449.932 mo
322.711 449.932 li
325.616 438.306 li
326.567 434.511 li
326.587 434.42 li
332.143 412.17 li
332.153 412.089 li
332.153 412.089 li
332.264 411.664 li
332.204 411.219 li
332.194 411.138 li
329.147 390.213 li
329.147 390.183 li
329.147 390.183 li
329.107 389.859 329.117 389.525 329.198 389.202 cv
332.942 349.184 li
332.942 349.184 341.686 389.283 341.828 394.787 cv
342.587 425.668 338.63 442.758 333.762 449.932 cv
.0862745 .423529 .435294 rgb
f
358.788 273.532 mo
354.895 273.157 352.578 272.853 352.161 272.789 cv
352.169 272.788 352.177 272.786 352.186 272.784 cv
352.193 272.784 li
352.589 272.845 355.193 273.166 358.788 273.525 cv
358.788 273.527 358.788 273.53 358.788 273.532 cv
.811765 .811765 .811765 rgb
f
358.788 273.525 mo
355.193 273.166 352.589 272.845 352.193 272.784 cv
352.186 272.784 li
352.623 272.654 355.472 270.646 358.157 267.862 cv
358.481 269.843 358.687 271.73 358.788 273.525 cv
.811765 .607843 .501961 rgb
f
359.644 273.613 mo
359.351 273.586 359.066 273.559 358.788 273.532 cv
358.788 273.53 358.788 273.527 358.788 273.525 cv
358.687 271.73 358.481 269.843 358.157 267.862 cv
359.548 266.419 360.895 264.768 361.84 263.061 cv
361.874 263 361.903 262.971 361.929 262.971 cv
362.379 262.971 361.727 271.673 359.644 273.613 cv
f
341.074 341.854 mo
341.074 341.854 318.523 471.111 283.213 424.839 cv
269.336 406.66 277.135 352.247 277.135 352.247 cv
277.135 352.247 280.596 353.008 288.874 353.706 cv
293.586 354.102 298.851 353.091 301.197 352.56 cv
301.916 352.393 302.364 352.268 302.448 352.247 cv
302.458 352.247 li
302.458 352.247 311.09 315.472 318.357 313.21 cv
353.553 302.212 341.074 341.854 341.074 341.854 cv
cp
.0941176 .537255 .552941 rgb
f
333.964 352.746 mo
333.627 352.676 333.398 352.357 333.446 352.011 cv
335.393 337.894 333.662 328.033 328.302 322.702 cv
323.424 317.851 317.181 318.679 317.117 318.69 cv
316.758 318.739 316.424 318.49 316.372 318.132 cv
316.32 317.772 316.571 317.437 316.931 317.385 cv
317.212 317.346 323.891 316.458 329.231 321.768 cv
334.9 327.406 336.757 337.641 334.751 352.191 cv
334.701 352.551 334.368 352.803 334.008 352.754 cv
333.964 352.746 li
cp
.0470588 .266667 .266667 rgb
f
324.373 404.678 mo
324.164 404.644 li
323.819 404.529 323.633 404.155 323.748 403.811 cv
323.863 403.467 335.235 369.405 335.235 362.241 cv
335.235 361.877 335.53 361.583 335.894 361.583 cv
336.258 361.583 336.553 361.877 336.553 362.241 cv
336.553 369.617 325.47 402.819 324.997 404.228 cv
324.905 404.504 324.648 404.678 324.373 404.678 cv
cp
f
302.458 352.247 mo
301.572 388.272 li
301.561 388.626 301.27 388.897 300.915 388.897 cv
300.884 388.897 li
300.519 388.887 300.237 388.574 300.258 388.209 cv
301.197 352.56 li
301.916 352.393 302.364 352.268 302.448 352.247 cv
302.458 352.247 li
cp
f
322.167 318.934 mo
321.969 318.934 321.776 318.824 321.675 318.63 cv
321.526 318.346 321.627 317.992 321.898 317.838 cv
350.841 301.431 li
351.112 301.278 351.454 301.382 351.601 301.665 cv
351.749 301.949 351.648 302.303 351.377 302.457 cv
322.435 318.864 li
322.349 318.911 322.257 318.934 322.167 318.934 cv
cp
f
290.361 417.26 mo
290.236 417.26 290.11 417.224 289.998 417.15 cv
289.694 416.95 289.611 416.541 289.812 416.237 cv
289.852 416.177 293.83 410.099 294.502 403.423 cv
294.609 402.354 294.419 402.023 294.336 401.985 cv
293.975 401.824 292.52 402.093 286.881 408.118 cv
286.098 408.955 285.991 409.065 285.825 409.148 cv
285.5 409.313 285.105 409.178 284.941 408.854 cv
284.793 408.557 284.89 408.2 285.157 408.016 cv
285.271 407.915 285.54 407.623 285.92 407.218 cv
290.06 402.795 293.162 400.007 294.881 400.786 cv
296.039 401.312 295.869 403 295.813 403.554 cv
295.107 410.563 291.082 416.707 290.911 416.965 cv
290.784 417.156 290.574 417.26 290.361 417.26 cv
cp
f
359.132 296.103 mo
359.004 296.103 li
359.332 295.445 359.645 294.802 359.927 294.193 cv
359.78 294.546 359.631 294.905 359.479 295.267 cv
359.362 295.547 359.246 295.826 359.132 296.103 cv
.776471 .580392 .482353 rgb
f
382.878 360.63 mo
380.15 360.63 377.248 360.235 374.17 359.377 cv
373.599 359.219 373.018 359.045 372.445 358.846 cv
371.351 358.503 370.245 358.102 369.106 357.623 cv
365.354 356.068 361.06 353.802 357.333 350.272 cv
356.952 349.921 356.59 349.548 356.22 349.158 cv
356.194 349.151 li
352.79 345.546 350.011 340.761 348.849 334.332 cv
348.762 333.857 348.687 333.385 348.619 332.888 cv
347.465 324.453 349.346 317.632 355.662 302.883 cv
356.471 301.002 357.831 298.455 359.004 296.103 cv
359.132 296.103 li
357.538 299.973 356.261 303.596 355.261 306.971 cv
355.258 306.983 li
352.563 316.13 351.895 323.545 352.579 329.544 cv
352.634 330.039 352.699 330.501 352.771 330.977 cv
353.757 337.36 356.287 342.068 359.44 345.604 cv
359.451 345.607 li
359.801 345.992 360.132 346.359 360.494 346.7 cv
363.933 350.158 367.939 352.345 371.443 353.829 cv
372.504 354.29 373.542 354.661 374.568 354.992 cv
375.094 355.174 375.637 355.336 376.173 355.484 cv
378.898 356.248 381.477 356.601 383.915 356.601 cv
386.292 356.601 388.534 356.266 390.642 355.651 cv
391.375 355.433 392.08 355.183 392.78 354.909 cv
400.825 351.692 406.737 344.202 410.595 335.495 cv
411.956 332.407 413.058 329.166 413.903 325.909 cv
413.961 327.404 413.885 328.944 413.708 330.491 cv
410.48 342.868 403.271 354.911 391.813 359.085 cv
391.072 359.345 390.321 359.588 389.556 359.787 cv
387.46 360.335 385.234 360.63 382.878 360.63 cv
.0862745 .423529 .435294 rgb
f
360.939 291.738 mo
360.939 291.738 360.939 291.737 360.939 291.736 cv
360.939 291.736 li
360.94 291.737 360.939 291.738 360.939 291.738 cv
.776471 .580392 .482353 rgb
f
410.595 335.495 mo
406.737 344.202 400.825 351.692 392.78 354.909 cv
392.08 355.183 391.375 355.433 390.642 355.651 cv
386.372 356.896 381.555 356.994 376.173 355.484 cv
375.637 355.336 375.094 355.174 374.568 354.992 cv
373.542 354.661 372.504 354.29 371.443 353.829 cv
367.939 352.345 363.933 350.158 360.494 346.7 cv
360.132 346.359 359.801 345.992 359.451 345.607 cv
359.44 345.604 li
356.287 342.068 353.757 337.36 352.771 330.977 cv
352.699 330.501 352.634 330.039 352.579 329.544 cv
351.895 323.545 352.563 316.13 355.258 306.983 cv
355.261 306.971 li
356.333 303.354 357.723 299.452 359.479 295.267 cv
365.977 279.703 368.518 273.719 358.201 227.796 cv
355.339 215.037 407.34 214.25 408.426 235.09 cv
409.557 256.638 410.518 270.193 414.94 300.298 cv
415.427 303.577 415.638 304.812 415.732 305.078 cv
415.65 304.071 415.608 303.615 415.614 303.509 cv
415.679 303.707 415.812 305.136 415.745 305.118 cv
415.761 305.41 415.795 305.72 415.819 306.111 cv
416.592 314.571 414.873 325.789 410.595 335.495 cv
1 .854902 .443137 rgb
f
360.492 346.704 mo
360.136 346.359 359.8 345.993 359.455 345.611 cv
379.317 340.602 379.645 290.241 379.642 289.707 cv
379.645 289.352 379.946 289.053 380.301 289.055 cv
380.668 289.061 380.958 289.346 380.965 289.717 cv
380.959 291.916 380.618 340.592 360.492 346.704 cv
cp
.8 .635294 .180392 rgb
f
376.174 355.489 mo
375.641 355.342 375.098 355.179 374.563 354.99 cv
386.895 347.355 391.171 314.018 391.215 313.661 cv
391.259 313.304 391.592 313.04 391.948 313.085 cv
392.302 313.141 392.569 313.461 392.525 313.818 cv
392.349 315.245 388.321 346.546 376.174 355.489 cv
cp
f
392.776 354.909 mo
392.085 355.183 391.372 355.437 390.645 355.646 cv
406.042 334.892 401.85 299.804 401.796 299.406 cv
401.747 299.037 402.001 298.711 402.37 298.663 cv
402.723 298.624 403.061 298.881 403.101 299.234 cv
403.142 299.628 407.203 333.559 392.776 354.909 cv
cp
f
352.77 330.974 mo
352.695 330.502 352.633 330.034 352.578 329.541 cv
361.445 323.367 365.132 296.071 365.159 295.778 cv
365.215 295.425 365.548 295.161 365.905 295.205 cv
366.258 295.262 366.522 295.594 366.478 295.951 cv
366.297 297.199 362.539 325.049 352.77 330.974 cv
cp
f
364.688 244.865 mo
364.392 249.73 362.034 253.546 359.42 253.387 cv
356.807 253.228 354.928 249.155 355.224 244.29 cv
355.52 239.424 357.878 235.609 360.492 235.768 cv
363.105 235.927 364.984 240 364.688 244.865 cv
1 .741176 .611765 rgb
f
360.333 248.809 mo
360.295 248.809 360.257 248.804 360.219 248.793 cv
360.168 248.776 li
359.946 248.684 359.841 248.431 359.933 248.209 cv
361.441 244.556 361.134 242.629 360.611 241.655 cv
360.034 240.582 359.077 240.377 359.032 240.374 cv
358.784 240.3 358.644 240.1 358.688 239.867 cv
358.727 239.659 358.908 239.514 359.112 239.514 cv
359.138 239.514 359.164 239.516 359.19 239.521 cv
359.247 239.53 360.579 239.786 361.362 241.22 cv
362.268 242.877 362.057 245.34 360.735 248.54 cv
360.665 248.707 360.503 248.809 360.333 248.809 cv
.776471 .580392 .482353 rgb
f
233.251 130.967 mo
233.251 143.79 222.855 154.184 210.031 154.184 cv
197.207 154.184 186.811 143.79 186.811 130.967 cv
186.811 118.145 197.207 107.751 210.031 107.751 cv
222.855 107.751 233.251 118.145 233.251 130.967 cv
cp
.2 .286275 .498039 rgb
f
213.526 161.307 mo
206.536 161.307 li
206.536 100.628 li
213.526 100.628 li
213.526 161.307 li
cp
f
198.263 159.15 mo
192.163 155.737 li
221.799 102.785 li
227.899 106.198 li
198.263 159.15 li
cp
f
185.997 149.816 mo
182.341 143.859 li
234.064 112.119 li
237.721 118.076 li
185.997 149.816 li
cp
f
179.852 135.681 mo
179.571 128.698 li
240.209 126.254 li
240.491 133.237 li
179.852 135.681 li
cp
f
181.393 120.346 mo
184.558 114.114 li
238.669 141.589 li
235.504 147.82 li
181.393 120.346 li
cp
f
190.227 107.716 mo
196.033 103.823 li
229.834 154.219 li
224.029 158.112 li
190.227 107.716 li
cp
f
220.407 130.967 mo
220.407 136.697 215.762 141.342 210.031 141.342 cv
204.3 141.342 199.654 136.697 199.654 130.967 cv
199.654 125.238 204.3 120.592 210.031 120.592 cv
215.762 120.592 220.407 125.238 220.407 130.967 cv
cp
1 1 1 rgb
f
187.064 91.0916 mo
187.7 99.8115 181.145 107.396 172.424 108.031 cv
163.703 108.667 156.118 102.114 155.482 93.3937 cv
154.846 84.6738 161.401 77.0896 170.122 76.4539 cv
178.843 75.8182 186.428 82.3717 187.064 91.0916 cv
cp
.992157 .823529 .278431 rgb
f
175.154 112.702 mo
170.401 113.048 li
167.392 71.7835 li
172.145 71.437 li
175.154 112.702 li
cp
f
164.668 111.992 mo
160.35 109.973 li
177.878 72.4937 li
182.196 74.5123 li
164.668 111.992 li
cp
f
155.864 106.252 mo
153.082 102.382 li
186.683 78.2336 li
189.464 82.1032 li
155.864 106.252 li
cp
f
150.984 96.9441 mo
150.446 92.209 li
191.562 87.5412 li
192.1 92.2763 li
150.984 96.9441 li
cp
f
151.271 86.4391 mo
153.115 82.0444 li
191.275 98.0461 li
189.432 102.441 li
151.271 86.4391 li
cp
f
156.653 77.4122 mo
160.408 74.4771 li
185.893 107.073 li
182.138 110.008 li
156.653 77.4122 li
cp
f
180.804 91.5479 mo
181.187 96.8107 177.231 101.388 171.968 101.772 cv
166.704 102.155 162.126 98.2001 161.743 92.9374 cv
161.359 87.6746 165.315 83.0972 170.578 82.7136 cv
175.842 82.3299 180.42 86.2852 180.804 91.5479 cv
cp
.843137 .945098 .976471 rgb
f
133.266 449.956 mo
67.5738 449.956 li
67.5738 442.579 li
133.266 442.579 li
133.266 449.956 li
cp
.317647 .403922 .576471 rgb
f
153.76 381.027 mo
116.069 450 li
223.535 450 li
257.951 383.516 li
153.76 381.027 li
cp
f
157.878 381.125 mo
120.24 450 li
227.706 450 li
262.122 383.516 li
157.878 381.125 li
cp
.0823529 .121569 .219608 rgb
f
110.672 448.158 mo
102.84 448.158 li
102.314 448.158 101.887 447.731 101.887 447.204 cv
101.887 445.759 li
101.887 445.232 102.314 444.805 102.84 444.805 cv
110.672 444.805 li
111.199 444.805 111.626 445.232 111.626 445.759 cv
111.626 447.204 li
111.626 447.731 111.199 448.158 110.672 448.158 cv
cp
f
94.0454 448.158 mo
86.3504 448.158 li
85.7858 448.158 85.3281 447.7 85.3281 447.135 cv
85.3281 445.827 li
85.3281 445.263 85.7858 444.805 86.3504 444.805 cv
94.0454 444.805 li
94.61 444.805 95.0677 445.263 95.0677 445.827 cv
95.0677 447.135 li
95.0677 447.7 94.61 448.158 94.0454 448.158 cv
cp
f
206.581 417.248 mo
190.777 417.248 li
189.557 417.248 188.567 416.259 188.567 415.038 cv
188.567 414.028 li
188.567 412.808 189.557 411.819 190.777 411.819 cv
206.581 411.819 li
207.802 411.819 208.791 412.808 208.791 414.028 cv
208.791 415.038 li
208.791 416.259 207.802 417.248 206.581 417.248 cv
cp
.317647 .403922 .576471 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (Myst) ()
%%Title: (z9-01.eps)
%%CreationDate: 7/19/2018 11:53 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj26DoCqkQ>hAc]EC!GF9[>nQ8g"76:^#Pi%*8L3ChE2Wmhc#Mrm\-_B?NUG;%mtj4D:\cFE^_df@JJ0F*$Z,DS9;ST<:-P
%?-Y"d<bBad[#F*K)=?n-k2r77pAO]@2YfhA>P%0O]iLoh\(_j]C89<cc><D,ehaqW;u3AYH0880NIN_LeRId5T#khR7tjRc0/Qk?
%@OGYu2$Oshr:$aF4[gCL1W,cYm2CNcr(`$E6%/@7qciCV+UQ;@k!+68FRdb`m#R1+e%[7.COL:E+oet>UZ(gBHfufcD9H>ur+<36
%lr4mG)JD,Ukg)A>RE>=R`GW(.kECa+dDsPG%(^\FH-lbjbtm"L$,M*Jogf!.g^k%p=VUWqC=`CkTCn/*1$(BAH[1RDb6GD@0eN6*
%<tC,$!<APN8MYEmNFo<F3c>O27XT^Lf:(6!a6/0-*@jd"F<1D"IgI%BqFQ\YL6;/qbbCq:=^05)Y*!l!N"n4035ki'nc)b;4Rn>@
%^SMbjfBO>Tr^R?6CVWG=i;IQDDnW/P3]('1@@g`%h+$)$&f%.]$e6GB7>qNM[q]nbCn:DC@cU"dMe-);\6ACXo58ECpqm?S$8on_
%VI)Q(]]P&'$;Y36N5uo\7d,l'Z%X5M,_8B<(pCC5'$oV&TO.ps[n$AnU/a4Ue<^s\>'4$cMRBosQ#agr6o\9I`Rn_WfT-jHW/2/@
%SW7%fAhN_NNSW5.dB^@h(j`MphItD(s#,=3pLt8IEN5!sokj=/In*ddRgKr9*'J5e"-ko.rqin^niQSZYM,g+[p"c/F1ZnLq"q8j
%>e+k@B3tJ3:8:6.>0ac?r^sr\bKPGmFT%tCCEF"LIV^0W/5<upWuA?F%84b9)>T!NW%UR2TS_PXJm5O?j&"XlGhHQ&H#LX^Lh85'
%,JU'fq:FQ^1s_@>+INsenBoU)3?QJgdA"0S!f33N$2W73kVN/sAk)L%=o[nk)bl8E]1k)4]kXfYCh<C".uo+C*[]l-L0B_l$9:jN
%XoNpe6bFW%'&B@G0bM1l2V"=3+#I\s.c1?VL[uV@+SJg(TlqpY^+MSf,/=9Dg\p?iG/-o/!BmbpX`iG>'(h/af)O>D2=//ih^P+%
%BjfW5jbM\CG0WX`qXnn+lMMbEq&muos&q^8/GTc-JfH5a;J[&Je]MU,fK?4!1@)&[q^cg@BN0Jt,kW!]#/"ZgLh\Ee&g/D#^/^,O
%?S!d4%>V3Hc^1Pffqr4sLuDD579qOb0>pgK+us<A(hn$=,Hr?!-n"Xo74!?HfCGN]8<0i0OY1:h*R<"K`E8PQEeWT.&1qj0RtH3J
%,Th4[a/Oa<_2m;iUKVB`+u*m[`@mFoN9lCO&_S:hFHg(Y8*8Q"bRP5BOdUUl6=_:(L3qH^$P;/o0M@$^/%.L(;Un#,dI-e/2#]dt
%l-d3C,1oRDSG7:uiWHS@Gp/Q4).92+79Nnk0Pt)>$sLgt0=AY15>CY68Yo1B8*6IKl1i[X(!5^.JXrR5-<JfX.2esq*$^tCeF>g]
%"7(aolaZ&h\2_p6(7P0li:Rk2`uTCq9B#'X1B$oiGNUus5Q!NK.D_K&[XO21C*b\9Dlm3@0,KIOXibXmj--UL5Rhe:<jB,.l)[c7
%\,8:rcne>LohP-*rp'E3bt;?g$Vd,&QWZAB:@"h"7c0-SY%mW*V;+'Md]?cVa]:5!eS\fiOZE"`Ve;P7fE;Z(Khd8KY?:.'1i=\b
%B^Bf<5VUT3>Zdk+Z=0-@Onj3K.-.gt8=OCGP*Y+Ie;hI\bUV]gW1hTa0@,[n3;a'6C",6m9gj09XlD&09I50F-0.uLM%Onp(51t4
%K2.+`ePYP;\K0[_BuET;p"9$sX')204"du?6HfD[V.EB=]fkc'Kq(=FZ[0+SU=:W@:UO[%`oFoBgM8WL/\g,DVGZ&5_j&#MfUToL
%EuqH<rPMK!,<"_C.6j+e3G<M=-%ARB;Gq25H5\A9+!6[USR;k_7apO^>maQ*VN\]/.eR3_,IoN)f_<QYUXj7gfr%KJ?%16RfGkqq
%JYg#/P$+2uFq]YTbd3daG(7N<1M<<8'R4dKXWgo_e`VoaHfj'g$f<R*7-0lKFt"]ZbdEqNFu.`fk1\'b]DoBVpYTp3OP6_2`G@c(
%;N/"(Y=I!(WF,q`%Jl2J3nI>#LJ[4E6'>3/F/-%dXC$FtF<0cDQ="ET:LV)gnlO:[8TfChddimX@[aX#@_#`0;Ip2oU8DE.i+0c`
%Y%<8TIqoqu=eX16mgAWg8)q`6e*QRsiOJA.<rXWJ(cKd;dG$+Y;Hgc>jnK7cZ@>cO%p.Zq[$lHKPOGBRZsmmmk"qpWWFPrbPmshK
%NR.-uVi_jn;Rb5r%?WJF,M%*EBXO>[8fGW?`G,_28lD;s2'!K2UJ.!KJd!A`B+.85=gJ"Y`-n)F<DFheb"=pXc\3h!/%&><AcfYo
%-VY_fSG0d"pdSMg879++\/7n/0lkh,=`FdX(rt1#>N(HjZ3a"`=*l7..t4a'm'bZ6@XWYa<g,*;;D-"cDj%(-oTb$DfSf1%?%!`;
%s.ohAdi$5s1b"M1P]f7W&1YC,BJ_WR1'J.W)B=_%ZKilE.Ml<Sc<8E\UtP%b<][/:]5&ab;d7P6&^D%?'@J"C5"6O?aQ?oU-?'OF
%UEm&'6,Y'\`asi#37i9(Dk6_Iju?.UjXb"VaKm\`fbs@a5!r(bY@r*6*4!`R%!df$)5kQe[ZYZ@cd%NjLXPPEG]mse2RIF<>YGb&
%St-fRbg)2\kJhoX0fq>.%`-cM\a_?B6tYW%='L\Vh^%=+a[nG9"i"iZ:Jt[ZnTRf.P\OoV>:8LT*g$2_`fNbM+.F:7_MXJ6\C%7=
%T2nb*G(!.[0QqJpUg:>qlZ$A+K.G`<7]hR%!RtM^KNdLeYj6][V-]TIFYJ`89mhUfZLH"NbP1<QUqZem9"eIiD6/,g1oc";V<+%F
%)QdIskW-d:F>aMtbsH'Ld+Qp&c;H+Y.>XU!ZhW3A(e__?EB7+t?_u=J<IQH73A/=W;kW/Pl*lo)^f]>GLM?;op83#]Pn%$nSJ,H+
%DF[9uCWZ9K&i.?$C.J`AVCOB.9P_"hgmUIf[ZBZH/B+nDL:ou3WW/*;k"@Sdc$u3nF^GKlk`K$+AJTOdD%8YE/2H^hU+dR:R0?o/
%JX9NtAJTNY"^YelQW`8.:\!0RS;bbq8@&<E,q!`+*1gpd6+U%ZA`<e`;cg;73[8.LnP8^9-.Ar'"bn(2_2:'/9R=O4Be(#a[1t3l
%Q-N^@1,Ln8*<gN\9\7B><09Wc9R<Ci1rVBPCP=5bQC0(*3DMq!Vt;`gVAI:d7ak>Ul&orT`%/l2'rU:qNn<g6r=\[1<l&KN_.d.j
%.]d?1_.tN2AhSB<&=eRA>)Qj)?Lb%F1b;k]aKfC5//6R=D#2R:AX+h]d5#k?08aLIWoB=#bXo??kDe`WEk:-5S)PHYf=:%`oL*Y2
%AM6MDOE$_XZa(C2Yt5i]-Z-VN<G;3iPXh4pB$3a+VEjOG:c[Vo##ol,(/u1ldMNJUoTmD`&md4DiiC0:>:7rjUF``&Q]J2ddeQL)
%Jf;mCWRCUIXCY>`2a>_rr/pBd`H!Dk8["+998Uu;YlP2>]PG'9dOrJ6C]CA,4SoYV1RCJs)BA%Lc\gi(59&&tgTGbW^m$f;Z^Q?,
%ldAJm/b<+>^["tMn"6pc=#p;]-2e[??i9JUnSk[o6L)d49?h?Ic-#EITJ\[!Q\qZj%f1f=F]'fblWnDk'(pqWMrf,Zjp(Y*-CWUU
%ZQ%uWgbtV45lPjDHa=[P'.=0aiKE!_#5R?%jJfmC2ar=DG(Y0m/=>pbIfHfKEYHViPHGm<2ooWXEO+0Zg??N/"nKdaNO'#R5=b*4
%;lr9NcBhkIO)n__GE[F&<p'-)gZu0e^NC=DOs<_*`DWU9IGUouE>%AS,P`PMISAkN%m#tNC"T+SijK*G*EK2>hD^O04YGg$>)H7\
%j'par[/=iJ^KsNRo;JSc\8[q?Qd_imB<HGo05162:W7hR`oBDNYhM5,<f'OK#`G>F"idN67cH>ZP.XhkmSXbQ\/$i)A2Nsld&.F1
%)Va0r0dH2t)IA2i2=[tjMk4fnOO\K5V$(/gftD(&9t$FVmNNb%@QaSfMgj^A6eB%A`p\h&N!5agdsS]JE>iRc/>hq5Ajn$naf_',
%9g<cgFbmRqL;B%E,5Lmf_KhGUpP7PRCmnQ\f?p,&gh*""@2DE]`J)X+5s8/J=5pWs-[r*mBoOkH0ki/n.3>Bih.mUne2&O_qi(%1
%[,K%nlS2%r6FU:T^Qr>>R[>YlA@0RfZe<ogc,S"?@etf3qH/qKfYt[li58U#hEFO&#)3HFq9)nu'5s[@Ab8?]Jc%^Do6T2`RY<s)
%`3O@)>HV/#GrS%#"(s'K^F."k2pGa1?CpfHGX2kTgI=0fSMm?kFUd2CPJZDZeHK)'N<Np^^Xk"-=%dVcE(r-<9>C7-K<p6g?a_`)
%l*Ou1OdUBthstQBmjSB'.I^cSI?0u'Nc.3fI^<3OP;-8mQReWL:qRHq^;?c-_Q$`:VtabhJ4T+?:9g()j2mVI$b)B!P=du<j[<9O
%^Y$Z+3Q[5h*M:_V:W%^Z;Rb5Z(=RO*M8nRBX'2M"`>$j&9>tX[[unZjN&;Ul;JF@Mpn@qe5A)N:Y?S=2\?N><aGt;@m8Y4j`mV.f
%$GWC!`[bas\Cl>ZC=LZ[>AfbTnG#.TOCGn$9-qN*?QeLB?dq\ZKhf4c1Nhk.ZO2H%DoYUQk`g^W3o5XO+%HMN*TNo'lggV!VM-sD
%)mY$3aHpJua4-,IgdRTR#P8O35TAm@]6#ObCsW(B4dX$CSG#+4JcrDC2qrDkpDgW)UWL2]C[rUmZGO:6XN9=LBT#ShOl(3@Jmd,O
%2=a]8Brb@=FOQc*":`C&qfWp\k#nJ53)+DJ2j8X(>k6Q(aZ#E2f0Jo'i7"+Tqp.o!@;9kY)<IJ_3RoXD<4d.THobf`r,f+_$6,!5
%SOG[N3b\q(N3SCs<3;ro/R;uM3H:=!8X8U$8(+^S^2V;k1^QL4r^O28/!qZ#.t&"j8Wtj7nl+/V"A8Dte_)PMM-Q@'kH:aIp_;g*
%:.(;G1cW^:9`=t7X8%U'QW(V:\D?tCmNp#]h.1;eM&0TFIE6ND_/WXcf0+JOomcj]er,ikV'+0=qp"1_VF'<m.F@kI(sroZd.k"4
%nF*Y;p)94L>H@e26CiAM@-TKlVpEq^ja'[p"IQla1PUN:m`dILa18OcEaBj(HjM<2p.!=6OiapgE_a=^I$offFI"5AZk]"BM=W[O
%@[7N].hd'iUm0c*DfQk`7Z(u]ZW)ph]/R&qNJZ0R;f^1Z1Tti62W!RIARc'G2QigPrL$qLSSl9>Xit\lL0gK@RJCUL_,m,/],Sah
%h;.jEpsG#:9!N%CSnTu/)"<I,L/.6t9_[Y4'UKqT&WO'mS?n$k7%2!!LrSLG1u'O9BV`IQ(=ALg9fn8H9WAr%75STgNU%5)d&&7d
%OU@LZ6t;r8)H0RS6W[8B;/J\Ac^#0^3,De7ZuV[D?-7(pQYj;Y*M$%Rdc2YGq5KLp#Wj-W>;iATeR$u%^=t/l5BlMOMM:FTI3GV+
%ra(;#M_af'Wi<Tp34j#doClkrhTXlHq0S=hn"h^#BE$c+qg5Z93F=_+01Fmg20J[l?oE*$Ae*_BiL;iT1PbG6mI5sHEqlN4h#)Z>
%iEMh@N+GZ5dta9FIn`jQ0B;f+.%[&GHVLu92dL^C;u*#UC!%bs_dnr`2FKIBjc(^=o?j@jZ'k*M:uV):66)2Hb=m0*K\(/$X%=+6
%a!i![la,!:_n2>mHC9<.4Zc-FDT?E>']_,77S>&Z-=,)ra=auGB7\*;N3[5o4b%HgK@t8,Is]'TVmnrH?(5?p/!6`4PDQc1;rH"t
%qdQl$^6*4r`JN'`=g;<-Ws=+(0;XRJofk2ar,O6HBeGHRs!)%)2YftW=Y5s;RU>OM(7WoRjj]1;?&Fj%CZ4MkRG^l<n"WF$*/uY%
%9Oj.g%4>>f:V>):,5Q;-N.r%f>Si<E")jjg]gt[f[X:a>o$?W(n1,67:&M.i&KJ;E]D`W(UUZ?K.46_)s'LYnkt.^T9pZu'*T)IW
%I(&H4@oFqF/"OiW2"jerFBho_X8`l`%'s`4qlWk6V;-=$jk.ek'^-P6Vl@V.C,[bElA^*.L+AP#[I+4_#76]S2'*Q;eOnXNVPkM+
%DL#s*Of!e1XQd6V8msZsf.7d:3?p8)fokaCKqsuCDjAf$Z]qT3L.2L\[un\FD2]!\'W14gX&2Nb=1R!d4c<d_;G/=N(4OjDVP,-u
%'_h[)C!&h8K?V9Sfb\;o=!qEtcSAA#>:.K,QgdTnfHsnSL_O:tCR9rWR\j>S1rrpgaS@^>7@B#R?^disPZ4,^noI[VXNAE8a=0gD
%=Y@iJ(M/nj1<W*(S:EAc\L=FfqnsE_e!,cR#+=dd;9s8[qJ:qDa@/\>@hZWCV^WE.%5QOHfDiulRd6>>PA2[&Z+J#dQIl#Q=fF0h
%Ah.m"lA&W:L%qdV)!;=)Wi@5o@l#Z=I@G#W3PXnI9%Qq8rPfWbNWgN>215:-f0V`:!pA$<G%N)bXsW@1]P;jAk[oEagk%-^S'D/m
%*tWO8\S\#\D:Zn(^gi`8d*_GSI?/^=:e-G%$GMNorV/=$s7O%Hhmr<i]kWo5I_f$C+fibF@m@<VlF,"o]>]*dPXOep<gi)0lH>.a
%G,&0A<_hag<_X)DNTq/Th(>0,pj212-EAI]80k,))c.J/5@?0]LA276&\=ABR`7SeUW^Q3?U&s7I[=hm%QZhSI[bMuZ[1Z(3rapd
%1&p4-,FjgTAS41f[Qu!/r'EX?fqpDrNBUS=6iT4@-fQf?a7I#+W77895O;"c]YImj0amun/HW4RIq9YLcuhZ<CR_JG?$t!^9fM9g
%.nGA^oK`c#dB1=lc#R)Qo/;AQK^/I%&,c-c5(+a05=EK7DW\ha/Q;Y<^>-auU7oae_n@8A"3_hLH4P+V;.MLtpPMtce+"`-HcJCl
%'>!F9cAq5C4B5U1Y2R_4cS99,9bla>KqtZH9Bqs69h39S"3R&J;&1"_rL[>YZk*-6f3X;_eg!#ga^0ubFt2n):U!2N7:etRafctP
%pre:3[Gs^k?2_OJV!<L@)aU0`Dj7gmT$8'5`.rD(9*#%JMI.#8NrUnW38j,])MT/c3p'4\o8?'UVMjSs0%Am%8+UrimA'-h<dSDR
%5,ZEq@\c=$B@BWTHL4:H>iCS>UQ;1K/Wo\@n"dM#`&!90?^M+0;r+CIG1B(Hg`PdAn4\G2^QL%K:5B;&[CN&SCL&A1Vb"A<1t&Jn
%fG>VrU"!q')R\HN(+'++bDEspn*.)FgIlP_De7>XFqIarF=7HaoUPb*p<CG;RjNW251?p)gF*"p^3ZE)D:5Rf9%,$)D/r:9pAJIn
%!fU'k,)YOp]d.@jR$lN=bgO0XMC0!_A(:9n>9l.L'Q,/e\E*FKJl.uu)B!VV$2g/%PXs<*2]<LkF55u@q6]1SFC)=(.;EPcAGRC:
%(^kpaUC>B<X3H*]PaiNXnEJfl<h[p@'o0o$"?B7-<WBqe8]HQFT83rL%JVu8@&MX<ofH\V+e[<@cDO"8s.O-6+<X??Jnj2S`G265
%:)8S$-\<L29>j<+;lNdrQSMYSCHW:)c/1#?Iq^f"D:=Nh\k[ro]_OtR3dNCDNSVe:R!`9cYgc-Ol.:soo(L)C?E4)-S-mZXB<DQD
%buWl3jgWtnlETkA'(%%M`t:5lEOFQDe]<&.Vf^tD-cQW8BkI:rQq:1c:W/K^k2=E''/d&gaZgFnO.+rTQA_;BahX72N-FC*ga]AR
%]Mr)jeiLA)f;lVm5&<&_a8/P[\ITcHrcRF:DcIas`Tk1plrMlWKqR;#iKM5&mLsM.B\\lBQ#%#0:nU^])JD:O%f1#XbN3Cg.@t=o
%p3A<MXLr_`p(Gqo2I]!%\"1W`4,qI5Z/+qSQ2gMKrS4gmR=KCIo6R0RhWT,<Vl`FtH#_S2]7CTNRH(<nLL1)LFAmAuEk-$?;f$T:
%)oYi<;hBVIkg[!^1<IVWXjG30g%77-!\q&fO1ml3:9.K82iB8PK;$Ceb*dE@-ekp8C\XhPJ^)9UYpk]L)dse_^R&XMRsp9-aRpo*
%Q5$dd)I[j+1&+5Crk6rJLsQ`jV;*:ImC0h,R7%#3:1gh;knK1/0ulRJoVU3uffD^MDDSUtXIjZoVg`6]d0s/hrkkmGY&nHII@n$E
%M[=iimG:/-'WSD:l@]jIViurXFc%S."Pe5"p0#JYN.#N4?k[727p^:!9k*8t%p<fFd%9-02uO@=b&.eE*+=&0rnE:jaouWbN[,O4
%Yn^;qJe0T3J!SdX^\cO^9;?&n6E8CM7'4d/]@1MbLGm,an?R?uIboIDgFdTKeUY67Bl;:<S^r<s4K/8in\?gbemlN9psgb2%ZNld
%q5s%3S%g"\m=]>#)PpmXCR\uXDfLRH((<?&bcZ!eX@J)%(tgX&MY0^j6Nf$MUP8dglUM1*+6Bo^7X;eX3%2G]CfDq0b[D`[;gWO5
%=aC+cFrX!gdCr(g:C_Sm1@)p-3Flm<S;B<gnZ=OEm<4J5=>:5fMpYgC%QZmeg'!DP#@=fdeT%`4HTJ;d#'Ct)9S9<!BW0i,N4EqI
%OIhQU^,R9QUJYeB4./$mHF`QAHSBp=L:bFQi8oqWH<%0HgP^=Cqasa-p97,`q4jR2o.jU@e$bCQ/S$??M')Y5&_m^k]'o;IJ6\Fn
%mdWlD=sdR9$cD&hd40mQ#Ld4q?E/1jpNjH`2iR`-Xu[t[a,CAdUIMV(e02+.aac_oUK!uAV&g;$k.B,AArer4lD\qRY3s_%--%e;
%XFi?*l+p<\V&lsmmP4%j*clqR/r,qN]/M>br'1RRml%53'$S;XO`g\_HAR5:^"h7u)NGVg:[t3W=bA_MfQ.?7d4R6+&DE28TK.ZI
%7m8>MG/TK-h+Kr1pT=3e1A80;2MseHP_Itt[R/N[6>X-`KRqKA3*F/La];o,N35E8=8VCar^RIiDfADK,^uD%?I8\E=Y,[E7<VXc
%(q;Vg?$`+#FQ:;Bb_=='!1UB.kJr<aXnI$\",S=X3FQ6P/\sln"QV_)SWSu)eWU2?bDgfq7!rQRoA2.\[XGeScXLekgMF5X0X2gs
%+E%3?Uskc,`"4_Cc71)%?@;KO9r%cM0U>A9ge&%:1]9rfe1%Y$0Eii0aqBcBfJQe/c:+WdjR!bo^>O^_1]tdt&^2c""PKlQ7]YmB
%#=u>JddopUq0h2.mEdZkHS[e?&ol7$hM?p0<9fESUKn1#^!XQ\T#khVk\hb!C;^Ti9'9SS7h1!<.,6&:b8Z?&q['"k[=+a]NIumC
%UCD!^(c`o4p#@sYVd"I!(N-p1i=^!7oWD+27s/nAi"FO+lVZ`+IAWg,Ccn.oa`^$"-6&d,RHh&DAtrIRrkh5nYh>KhS(F;DVR1n+
%qJ87A"qGKW4&57@-tp=oC/e%2NWr)o^HB,Q_fhrH/c-p7DRICRo_Z>%hWChD/95u$gLduc/n25[IMU3!aBiHGCt)?%cm=N4eaA$/
%d7B696mb#HCZp>ugtO`YUue$hlO@^!aE\Cn<\oN=X?a7*X8Y]CH>'4^Br;P2MCcfm$N&i6Xk5a@h94O?`U.5s9]Us8n=HEQ0B,(B
%<;r3ro>Be4!O%B>C_/RA(--90/fP"=E@l5;cXICWKOj;=B;p(iL:9dV^]g8d<%[f@h=\5B@jZ*5J^=cCI;Kr;a0dFqosgQi%r'-i
%m9&HP?.^O6N$!m_fWa!lY&nEtk(Pl+Xcr(uO)hXnX[OD+@80@R3m#2JU?WQRJYo,a5->Yo6*+C:"u^CbZXdL,V:9#G%W$DW$KJ58
%qHpILL,<CU@)+3[s1kPcMg8,V$I[FX2RF?g=q,ftg$nkE9\ZCU[IiJ\W@&XMlKntiR2U2teOToUa-)ai>&:&YLMD&G!mT3JH.K/D
%MKtn;8$b+$KaV%NRn51CgDUm8-(aR)3mf:s7bOMaD+S`_>3M)<K;X$Skj,0:V,j?OW_J[fFJXH7(tB+>H^f]9Ln,^07E"f-fP4d#
%J.W\F#ik2"7I*\gY>L;>$>Zk`6h=KdFl)PS8W)*H9N!^-cXbBd3iR>/jm!-I-Q=pI-]NRVZaX5PHQ;HFA'etu$/NO6a.Od"'j-e=
%/UBK_pJ6^<.(<_X.sORSKQ8dXTckkWqM=".U;X<k!5ZKlNZ,@PMIjQa?UQKQniLe;lSQA4*Wu<*C$#herVnd^8[gQ<E:.GkCA"0G
%nHmsCVPei:LGVs;13S%%BPjN!nf2F5;c7iVO,>`b@a`XBd^%7O>pOF"7Jih@k8*1I"m-<&BWHBs56t=IU>sU]L+\Vn-k&lMCh7''
%"#2=Vd?:C1Huj\.fV`^Z(ce^=X.;R'EO1jH]lXiFb!sMq%QSS!bd_Mp?4TsH/nd/kdj`i,L>%$%Iqq3R]t%PZcaFXRLS-ek2%uC$
%K9hN9_';WAQ3K2R,!MjWO7N_b)/IphSAe97"raksOr^pY7VS<EX-5jl,h`bC^5;9iD*Qo+n[WEZ`lCXQLd1!Q-Sr"0gJJ!'iO4&o
%rBMFFkpS1bnU\UZkJ1+M;DtYche89FY!W#udNk$iIXWHDZ3,\.-F#!0,%Tc5<%h-mnR_gqK1Z$KEP,"H;^QcF*eo0G.-S6Dq:Dh<
%q5k;pCjGgjN^V0HN1Om[$4e1.f#oNLj2//2q:#nk;7W!?MDIs&Sk>"h_bQO>9KnbOZm\P<&Z1N(iQ4h>9YTa=mm6KU^Y>l6.a=uc
%lWL*1-/<VlV\)pJ9NBbX0405qNeG;>io24^LR'dg6@KX[-p!q8*L-1QM]Gr[g1H!4]M^tt[QCj?&h0kT^$YZA"r0)V$l2X3l=$,n
%Z/2+Zd[LPa:_+T=V=dG7e(hdZp9nbuBsqS*0Jd?*IW=PgK@Mmkn#dA^/j)#Z]NAEGCMhVIQ;?g*Sec2pbhq6T'XR2]p8]R1p9!Ga
%='L`/c,\!h+7JX#[CRZ^Yc7*&F2BbPBj*Uu21N31h-O=]S@u\G]$P8s[@c\V1sF[rcAblOl=jo0oZ>:I[8k[?fVgo[<6Aj[G>J+U
%g*se3!M+UHDV9<Me]E=>Zu3Tb>fbG64)Nu8cImh?p8r3UDr,rLrj@(H%1SLcd@MBim-V7ASN*f[Ie]9lgrR2N5&.adnu&nGo>7E5
%j`\*++MTV^/^/-u:M:TB=5h?MMf/OTdi2r5\lO6kI'S4Pff4'0MZcJ_grYo$cF:43a*6F^NbHl.NR+Mp)t`C?\,:Dpqo8K,qt5.#
%@.@9':?$,qgneGlYO`8sRjIC^r5P.M['H-i1[[A-J%kF6_:lob=+q*uHiMLZVmjrP8u:N-5#iY?T'VuhTnTpSFBXsa?^<47T9e*0
%F-#cB[N9h_k&q7&HijHEelJB6))R;co(pg=Y$S\DHgkuuA]^p"HrtBYV=ob.CR)?IKC`XdG$2sPD8.F?3Hoo7NM2W(.iV,M>%Fo8
%E.2fC?`uM;22T5_S[l.fmF>EZ2A\I`-%PR@+7*3mS;kPO#HP&O+-uT[>G&F_8+el/l&gDo(7+'7rPj:h#H8cHTAQsk'na4QmqC_0
%XkinQEV3)c`e4";$tJ=UceJmeTjb=gS(f:io&*AR<IJ&!Zh[;'hcSP/,(%erl.a.mDm]h2*c3Onq8]BD<C^sKY-+#(56&j-):"WG
%Ha.Gl_bdE,Vr8=R78jch&,4Jo2]65`=O/'D\at:IZ"^t^^Qrnqq6(>"-VMe"D&/%RDm.p9Y?n@qaWE[g*M/NW\\6aoh;"]AJ-Bu=
%Vg#W6U%8**[pL2#6Rk[i9lTF]o;FUWRVb1o(@>BPIr_brAs-',`Hr+:h-,(K<s_%=0UkSl_<Z78mF/pUX*+-Y>i'o#QrhD;.P7,j
%nG^:WonN4OQ^ULqj.m2V,o7A'd4d']*d6]Sq5RQKSm'>0f9TI"*Bg]h)f$sZSX[1-Vk%]i21&@[7f$NchmRD&FpON0/R-?iP,c._
%q1\W+c$LCBpAXs6@r:mfhJ]e;1k4uQ8iRJUOcUPE>IgN,JpD6VnOimep/s;grRE>H.3M^B4nr')Q@&.IICHG#o$l4.Zf?(7UKi/d
%P'"K#Cope+LMrp4mEX"ppZkTbDa!HT":[`in6b7ccKBQnlfBULNM2mo^M3>d\$oY"4tUlbRQ$9jn%jnW]S@gagLQ^i<8&(V7H`Zc
%4oO6>m3`KP/,o+1)XZefHXO/8#7mH@Ii=8lqN5<W6/TuTgu%B:Q#!p_02M14(%^Rbm,6sm'0CEJgGiJcICNQ6Cq;:WdP/kV&+isG
%=9iW7W_j_3>*NLmcA0"n,V'tnc0\T%pGYb.hsRFd08iUs'](^<rNlCSgp;20FW)U`O_SjBG3I_,Z*Eof:aB#]rB'h=gtg9_Q*=UD
%*8S5H`e]]VY5>T6XQ,mj!u=.So7Z7_4as$Ql;hD9iNVs9#l4$#D=P*E+$=j_)uOR@?t$1O;5q2Z"1]@aEgV@Mm)`^FFjmqBh_I*f
%pZo-`iU5FTHM+8'`Hlrg2X8EuqsCDopA0$UfmE:-++LsJY($/e\9$\R%\FeXrc-o%@kI*hlM#1Gc1AFBQX)i3g8A?ZhV_c)+fu;=
%.?6V/f4Am2<H$'(KsaFc$4hWg&8\UZ+7/3<q!07!np*T=D=$?IYug7#@=A;G0;Fk83?!Y7[X/;L$?mA:P/Hbljg5M@*kdeF/Bkk2
%6be\,5kOc+HUCj>4@8i1.Q=&0d,6XsqW!)9g6NubdH2"X)uu+f4H+a]iGO2nrDnr>!HVqeL(R`[<!irB`_E+En/_8C['@?90>%Q>
%pF$k/s'-a7,NO*bBRC6%)3)H'j<qgb<b[qce'DG8:D3;GpaB<0*W^c\Z[5Q5J-C8g)i>V9HAB8#]S),]QP&N<!Q"1e96/njL;>MU
%V2u(qUL<5ibI):+q)H]`qquVu$U/qXG-DS;9#G&NHe^Fr/+L,[XU(BsS1^]]ETs63CB`?Eho)r:<^\Q5aKh/d,LH^PaK/L:O<jC,
%`]7R4M.Y*!a7r*J8J*oWKHrn"d#s]&W/qCBP@,7,qnR/.A;7Kglo\<"+K$oLX2<-T-m?^>64=+#Idi#b0IFEP1h6s:[Fn^Cn+<CL
%brfJL%23_Xa:XJX3[?Z<q1sdCQs?qnP\H<%LCp.O%LtL4oFB_Onn),J5RI\Lo-.nM*oc9kH?$\_]8D(IUqjZVNr;"c6JCP%_3PF_
%&RMW3gHR]H7OIW2ArfF)*PQu'Vd@=;f%eggEJ-2f`sep7bIQ0?;<RHJg5<=_j2'mD[nd'*]6HCmH/NqcCmSJK0&DiK(hmJ#54(Oi
%q3&T>s6A:KI@!XWHQNH;Il%R0b?9,*;ofj>\"Bt`P!nO84#Cj8WTJ"L/tA=)B90fqnR:"0r7lc"i)T3<ZX)=5Yd60Yr3f58'\9q-
%B&Ej[hhrID3PtKF_f*(%)s_jE&Qh]QL:h+8Mb.0eaO"p-9!@sA,P_%U5QA*5s3%'!En6FMgUUs8?G9K^HSp#]eUHJdP_lt]YENPf
%0cPF"fg22>/=Y"<:[@8<2og4:aa]U@H.bA`WpG-V0&?H6+ajG[^\OSDH"-q+iP240h?$03aN:s-gY@]Rrp-&KNQP=LC#u-KG=n1r
%I6f]8oEF!ufe59<_8XKW;`=A9oi$?Y5N<!r0POgdX8"un2X+J?^^ma>LN/8Cq:!<0O6$X#NCR?sSpYO%j6XUoNMXdmLWaGGLe_mr
%,>ohXVfUPlfg=c7-RcIuKU73Y2/XT$Yp1,n0kbAMdKQ@RqRrO`O!Mb9>@Htlol]>t,[H\fP'Z<jZOK7#r1NQ@k`M4hHKUg"TASDQ
%+k-'8F18X9QT+>\*9:*'UOIKV5C)pPV)E%?ntt3"ls2stH;]?C?G1F*:LJPCD_\0Zq:#:HL!=r<Ma$=S>\8Q;L"f6B>c4t#FT(=X
%)I`6?p0>Q_]'nd%0:s?!0')JdK.eF?DqraUd-'6F4`0B8EAR1QHc%0+qt"#2B-2%C5BsPXF;45rV_"rYp=]<<mK<#Ip.h@,]8Rl[
%kOiopi=5c1@-B:tTe2UH<=Ptj3GAD@GbjIW6Rt*qGOu8u%X)eIqsqS`f>V[E#`$^Zb-Q:Nal>OrOi.X]1O$''r^pttYbeP:]&?*D
%n8Q+Bqd@&Mq8MC#G*c:aHV*dnL*;7TSNCY+*]:q,g<-J.fiX2/\#MAg::bdZF,-rVn"9qe2j^RKiT$@m1O?>Db3IjAMcVJe:56l%
%&[i(VEP*e]m-/]!&S]2rgK:q+GOieOIh6I,(,c8=EbmM`aep3fp\(U;KtR(bJ+2[XVu-Eu?4`VlXAd(c@f>`5G4PLTd9/`_Vql`D
%^V%(br;>l+W3[!$Rt^]n$>pIa/iLI%.f#pM.r,/Wn"O._d[C.2$`Mc['AU_p<9!Pp6OV%D?a%.fA0l&SkN;W!Y48)s^#.[oE8Nj9
%`?->m"#noBDgc[=mTtA6Xg3!<jS3h6q/'OmesfVF1?dX:ZO1&FG\98"c=>"%[F=7s93.rYC\W?)ml+V?Y^p6?g>RG^Yb$>f\9g$#
%K(HRbF%FIBna4RGXo9c!EgT)E>\NJIF4OO__e*VdHEYAH;Sgo4\T<q:hG'o]o_`k"E+]WLdGo!!IFDPo?Y_6>h;$ldd\l3LBD7&p
%rltDOaWm)"_^/c\Sbls(I!epR=ufgP*E@U]X[^K]H36S4p:00RhdOX<3VU%/RMAV)0.7[>[!R&pgL=U*iSEhq66,H1lVRn\^;Z&'
%0<SAlg'Ot-oCM_MUZE<\elJ62kXSB*j`Z[]Z>op(-HkNAn[G):Eo4N:b\Q)4]7g^O50k83MdjBbhJtK%iEKl1q8LOWiZKO`qKRi-
%>99*eI\=rLhp(O1Y'oVE&37t:p."0&DL6620NYV'gMaPZSo;8j**SA[/QOBu&,GV@rnb6^7douOro[KE8<[^?$hI.9ms%Vl(-9T!
%%`@*5Zc$b-m$24mF!pe4>G"T%\XD7r4/m88YI>1[!QP#@HLLR_&X[rgo6BMJ1E#5:'6=]Qgcd,+h7<\aRZMpdEV&eR:5K(PrIj(n
%C`]e;T3pH'@!p$9*o=Gii0VL=@D=lR`hmuj7gb:gS(Hb_6Q"q,XhmQq':FnsgM[JqKgRALHHQ&0kIJjTSE'"/HKLRe)PO^E%;NbW
%3jjQS.)M=^[ocus%*c59#.[Tlcdu2>2;bK:le7m1IJE-kG<8UPc$)*R4aHhM]K6C#KhVVSAcF&;Ra6FfYF]Ys-f8I@&`8-4=p+Wk
%.H7aV[#L&Lj?C6NU(3KCHfI-9g:_]WS_UPqU)YEK_e7<=q/X_a8BbqBK`6o$dmtBMOkf_PB#V2pGSDB6mt9e_Y:S/8Vq(_8rQ:Y>
%o;/iuaAqOb3NCiO2]OY\I_N)Z1&pUnlB4!^oTof@KhZPB?WbV@h[GhCbrdG,_^51g+no[+SnhMW)HElaogtqDhE<(0VgSj%D#W,]
%c&J<3[(=W?HWO=u3_-RHp#EoKq[8#RgfJa;dqK%)?YD5ZFsG1bI@pE.pS7oV*'0^E"1bhM!<R>=0Y^o:H"S4kh^[^]Fq4q$9p=Y^
%)uk$)=FY6YRo5YDP+a,LMiT3+cG?WB*;r!&>@#J0)__\hgt>$<q]duO2#;FMXn/&C^]%th^4#nc!_"A0E@"ppHf7,k")[&:G=.*F
%fNHhpSK)YlI=gJHdkVp/B=Z%8Mu2jEKaaO-[67afK$BnFrpUc`"!;2a^%?^B@-]$WO1DAg0(I232qG^L;tra3Y]cL1'Qs1cYO1JY
%0@!U.bkoIfBGBml>Hl4+1?Za-=KD!)lAG%q?E7R)qrt/W;j[hl4Oslj$TA=#qYb`Q=[":Y5MPbgbKTn\o&D<L;.\e]\9T9H9&74,
%\mE#5IZ54ACJUC6.n9AiLO!C2(7g_W0D9Dkh,ep;"_+n1gU0YCPh:9k:1<D"C)=VNc?[=0JeuV2q]!0/SQg`u4>8TsYH_'\4Dm8a
%ltI:(S#GT1SN!0!MdNo2Y1F`M)5+<'KB2Ro\$XqU=B\$e=4-HR0R`.O_42Lm>!BLsN@aYfk:oR)[<;4\iD-lHYFF?jE^n+nO1F]6
%Uc.\)36c>Af=udj>K^rO?fFL+q5<iU"e>("bHnEX[9-psBsVknqaN:35eD2POE%<Pgt&S_\8NPbo);Jm&pg<P'63"/[+j!:5A[G3
%g)4G0PRa%PIm399^3nLIi%uZP'mLh`VMG.soGEVXYi@#ak-X^jUb:NLk>1M&DqU[oSVMooC3D$a9]bl_.BQ/<^9db5_#Y%U*qZUp
%ENa8AO^JrGk2!WY:V:rWa!9bb[6)Hg+Brcrpi`cfn*SBtZ_sG0jo*`U2\V,C`?_"&dNhETEQMNNIW6b&ZdOC#ifO?:j@S=/o4bJ6
%G1SrPShW\]>2V7(Og\S#4EG5PKrqKOmbu42j29ZAr2Fh:&kTB"K(YKNU$.Y;9.e=6Y6^bXDOc,WrDq#,XYlGhgYG=SP\Ah/KX[R,
%D%t=fpFAl_B@YZ,2rC6DDh8.EO=%FtTY5hOJ@[5mgr8VS"AZD$&:7sV]lst$4BX/p]/`&lI7\%lh8Oc8T%bQNH?aB,Ht@Ftfdr!Z
%37`@Io'W/t=H:g.')fPW\Sg4R/8^]>o;==jWP1O.V9#aZpF<Z0f_Ju@qKD<iiXLq$JC<b-=*HP=5-<_8a7WVXZHMkaL&A2B:YpSi
%5CVqee$aVqAF&&Ko*YrME#T60]h0/N/YdoU%nWKK(2hg-QVSZd:%XeUp9S]'EI\#MHj<oaC;8IQ0@?)6[8<5(oAj2lggA,e]lBe>
%2f:s/g988^jB+tfk'!9V@@_TMGM\tCo-]Mn%lhom0^u1is14,Mo&3V.g\dRgpAUYQ?i_7Mhq]i+Dglk:4>@=/A)ZZEiFq3CEalhg
%UVk>GT,s'fnn$kRXDetGqE3!;5+;1GY48X-KHuj"q+m9"[pnY<MLsrf`Rh^6rX!67,oO_7KtCQ1KdY5+U#/6Ze=54Gr6kn[XSC/m
%cL&m)nNn+"c!ppXh7SBj5CsWZRL#")En48T06VDl)pT%@VIf>8QPP_,O_a%U68V!]OYNJ4=^1^oC>Gk-+,]uodnb;XTXqQGoL<k2
%Y=on?Z:YBM9[q>(SZSGpP^/P-EQ:F!LM]8XSD&aVn)!B"2\t#3cKaNND=@*kMrsm><L24T7chXF]:0?!QbMRhgP^2Tq::Obqh"a"
%g.cSl?6*r-gc?gAs*GGk&LMQ6o3=R8Oc.k]+IM2MHduRgD,qnEdc2OV9">?`'AN)LVT!8:RI+asbEmu&Xc0pkq)b`(%na)p1?DiV
%E5Y24etX`eK<fuZ[_6emL@hOAm:!'JCkc[%6[CW;1.^68.%NJf6!1uX"_NOl8o5@^jVQ6oB7%uS&pLb3cXD6$L3c6pH*\mMl9pK=
%6=$6,%Zi5nKsn,9F^?SDX$S^$UV"6f.Cb^o9O5'cmPN$QG_.s&$Bfi+nLX6bN9m%SG9UX?9Qe5TT5FBXg,Mhs9h^K?3kT5Z6Ctn*
%+(qR<(bl>Ta1A0^a#?jh1Y.]"'?smCT&2k(h3(f<j;DH#3_!p?:^Du9'3ogf!\,[/QpKcbVDbj?P"]hC>75&&Z%LQln6O.^ZoYM-
%_u^/O)VbY^7uS:GQth2S3#aDZUASoN2/7a%k_t4c=!gCY1I<_NPUFKG(huoH:!,@LaU@?A^Yp@>9,2WH`F_Cf[d/3G:(ru(H.a%,
%5apt(M6]DT)X"$nRdqY0`:`YSM(5,,hL2YW)D3lC0_HJj15BIsM!RA2OjdTN<LT\#eg/2\Ie)Y":ard?T>j=Y7840/G3=j7r4:nf
%PBn.&(LF!KRdLndrU&f<m6soOb5"YSa[HWN,8ddOkT753:8(PRm,K"%MZ1(g`?4oq5BZcWZ"K?u7JG%rQ_5=?Kf#q4H;!koQ9@hd
%+',CjZ4uTNp:H<1UNG(%eGOkG%CuJ+^>A)3>F13"7K`BJ4n-$aBMi`JLB>_ko]&/qep2#DMA=p&DU#mh]L-/LK;/g>?=Y:Z6MOg7
%$:F5=Wg3)Is2A2Hd[>FTlQ+MMbWNKWKqc8Xl\"WW%TsT#XHbkbHr%XW6)i[FWRWs\G'8a-r6R\c;fQ8_Bk"/gnVi[$nkp-5A;@HX
%R`3rneB;*X@_5<l<&pq2(\',e4E64*n]".pgV<&DoC)qV_a_e8_$fn)Y5j>=-7gc#lVn<GU>.9$dM,Zp;#eUW8l132no>O!&ifaY
%4K6BBN,.L&io4u@'m"UPB'"GDMrMd5;H-"O7#VX/_MdcF:.5rK\V(6I4nX2%4f]_fF%!!h?GGrgT<)sn<gAUjK7"#1Yh8IVcapOE
%HEg?g@9bNVYM)0]iF,NqQf6M_gaS#`Wp^ai9t87k81S-^.NmkWT]A/YHDB,WL"@jSKnUR#=1N8uabK$)"RB?0:LSZubc)b]]<Ep^
%8nOZ@P6,ME%(#T`f%p"'Vg^YtiqP%3aImEpk*\H4..a+T]")SK^dm"]pIk6NQZ-M'^#m&lV=J\P/Nn!crZ-?n4mVROrt64F8#&<D
%=1>8ij5GJ>@fa)\r:aRiQ!hEG\XbcO]4cYG?:+@#4.f[$oK4=-Ct]Iao4h*=aB2#.Slk,tV2_LR6OR`(4cj=_=rdM>Q^5bPYIFQ0
%rDsdW?JmIg`)U@)(',!Sp@\`?HV0pE''u5!Z0H5h_^@$7rgUXWs8+I-GZr;?jG-1QoWk&sfU8;Fs2'+7qZ%NuaCj_SM40*`2(['!
%LKVfhVU,b\Sb6gNefFVF#fFKR=j&]Dc/on4-N/gU=YpP7,(I!)W5q#SlOm1+Z_".!):PgqVQH6h&m!S+k`]_j=j,/SJ/f2b1i>lK
%X1Or*W1,Y-a3L'LS$d)<+@B[&f6/pF"ga5)#_5$`Q9]]Gd^,BZ@h@,),6g">=`S8"!n!@;A[r[&V+D1(:ZochXCJk;VCJ8\H.d`5
%=ksZ61B>2Y!PRRo,*O86e[!'"n-TV$9J^L;p*Mu7VEn/`'kt[ZM[p:p:G/iT]rVC##TCYqV?tu@AldBcL*;Xj-9PHL)ES!5&M6N2
%=[GC;Xqc`U=jqC#:a?1l:dd753t#I4&V9'Wp25ei.1#6Y%KW4:Rqr'l:QCj>+$BZ4a!$2b7',tcU8EId6=;e+C(_F-'oii6hFFsd
%YK2fB58$4TB%^TeQ==ENR=nY>=?iqabKCia((&Uk@_'p(0/!QQTBC:9XIA-em-8k8+1:q.$Wq;O#G7c?EHV%dEkLI#Q^FHFZP1i<
%AqKm@-RaFeK&UDi-n[_Mm:XGdHBga6gM3L*r_FhH#\i3rEqng1.25H"#k%=AhQBpVe;6:^e:@q,fO?KO`fU!Ab'=A!c]UtGL9u@B
%YCNVZSYW8CXR1`Qa6%6kg8<\DlgBJ/haM,d^.3nJK<la5h^c-m[BOI<io(s4`?'>'XI#u:.q[Q1G+@(6YG?Vr>Q4LQ4#;@>oCgF:
%=BDJ"<XPqYImu4ZBc6OO#sp.XOCVq)8kRX]!48i/6V<_g(-Q<@%!5$EC8CBAP);(%5tEfkPA*A06D[d:c,O7=mQ+L?^;UXAa_iPY
%qo>hECe]idE/I&Pnu%<GmB.B<:KblpQE>chYS(3%%$V$$"k:cM6BAT5KZFL!OLZNVi]!2,66&Bmdk'&r&X7C)AXKd<&4Yf=76;h7
%JI#&K#R1QH&jT(JV"G"L7C2?^,oeiFR^?*:Q8.Se!m!B@<sk`MCWNYF+=!/.q@55%5e*ko9U`>b%Ge0#TJA/T_==JJ92':e.[)7D
%buEg*Pt>kHP>5VNhr:(l%?H1^1c,6JC+.&J25Wj;h7He(rhhTM8b=6WNs-[u9U!+X<gi$jin]%D/=9Q\r[25'KXn-N7@N:qP)l"c
%2=c<o(,8CA_YGoDnjYGOXelQXb#6]m?$JCm%LH=VP"N6&nEL/YG2@a%Yrj7#m.L$VWRS';2\J!K01j=DWd\A=Y^s'XZTcdh.+)=Q
%X?sF,+g_TT6Voc4+]S2,ob\`a:n>%KkKp+da<ZjZK>J4"Gbb`WRu&#8;W#(RR$hV!Z<la7g6C!$6;T*po+9&^YaI@S&H`@Jj0=:Q
%N"H-qPMluRBK5Ns&umVo`sBd@J;RFY`Ob/6'<R0k:N0RM3;!EpV2J8Jn4L8o9<!hPI+]1.O@^YF?5dEL,rN!eAP(CLd`Cp94QJAr
%d`B9_ZU-Gp;^;<#L%B)%[r+N*,=[Se,W@`>XHPUi4,:2MDB"DeZL2>(Bd':SgSC)lBGQ8V/Ji0?-C*s*SNq@!GN$V`.p$4D5jiMj
%ZWu]DqVEu5fjk'G'<SnNaQWuVZk91E*$QqCnr=qSE3Hf5R$JLS(RFH"fMJqH/$TR3<N!);2$d8f0VQT&+t(l.N8#U>`^A8+L9a5j
%gsjI$d4C<h3ejf/FBn*mK>M.-la@/<P605i*/?3ZK#dkq$jP@e`t1Z<AMfg*Sn[2;^bD`Lg6.%gfs-3HVAf_+a7*+M=8(`"6DS)2
%A1?8`6C/<<!%f4$nMDd!J`o9k02f.JMaSnEd+3Zl%d=JW.R.q.U*EX@ft':JZ%Xfk%"pne39o;9dquBp4?[J*RNp5C!!F]ZBTd8s
%L&+j"Zn52he'S=hgc^Q3O>`a:S+rO0TcDCAr<Y6#EGd%<PPBi-E--,C*#j8lX(+-uJo,@L3%ts*1jPCB`RX3mK@`eI:\aS&bA+t"
%"@CI,Se9A9p,ih3#a[a@b]s=K>iH"Id:aF?h[g',dWQ`[F*UkU:umf]p,f%D'CM//K8b%\'/kZ>'A!m66Z?hJoRP:9ca2`+,W9bh
%Q"W-(`!dOZRYs]H#),%b"Vq?O*"K1]NNcG]`Z^44..%Qr"-BZiC;*#26\$^OF:!9JOH8,&Wepe:CNDRXpM:.VCmq:T#R;^[\T/ho
%-%W'WF:m"+?g+Xh7qjk*5e8'qAJhE^a^QF6,q.'r,3U]l:5+jl=p.gL85PN:'dS-[VFK)eb@V=->r?+X9.(gh@3qtbkcW%p]Wa=2
%nc9j<H^rd-e1Bi/&Ce-/`B9`p)Npcf,`A(fm*-`r/g6Nm>N)@@7RCrn:<uC?RmFJj>\R;1"<^5LT!?0G=$g3H][W#[cne[GVPXG`
%gIlES!dUrBfYXDC`n1oZ=rL=sKU'Mc94qTsJq=G,U6Sh,GZH4Neq"'e.X83)A-EWdFI(nh,0?OMFMW6ojDH-oa2tn0Ma7itKV'Q5
%TisIZ'au!SKg^N18^,7%[cO[]>gLJ"O@Z2uLQ#.<;JBumNkt"A51hP>BPG<Gd"<+n\Je4eV*MEiJSMt=1&D*RU3H!ke!kN3X'$'G
%HDVNEDmfCHH14PFeC&GJ9F\7SWRmfgBW4OhUGjP)g45tDalurS%([[W68O872/%/rPHMqRj9CWX\ApSMK`:-U9l*6%'sNS*44=Os
%i@RcU9K:!(j9_/-d9nf`Y'egY/\u'i9EVrucBTYt9M:M41l3H65_N`Z$rDrF/f'*3R9Ur^YQsTZNShTpJ!(E@KN7Ds_Fc%uWH>9L
%qiFj:'WoEE<(FIAEnF,0D&rq!8B'iIL+T)G>7UkB*8Ql&@J>;:p/ajFJs-(ME^NnA6@oW(T@GZ]3/GV7Atu$C`\+>:,6e<hQ7hNk
%AfmZo2Qii(XuST:l$9Lsk($r`WIl2!\\JlE'R$jM@1[^g+ZZr"6.F'0NhI^_3I%j#+]ego!"5,)66_-_PPbso>+Qr\[+-3VZ\GTR
%oJGB[J^g@/9GCI2K5b'K#1YT"P9WLI=d?-F\L,>1)?VMg,!LT!CeLkO:XdAoWC`c%Rnpj#0[L+V)UC*C#*Cq08s$)F%idch.GYVh
%VLSbKZ7']>D$:j"F!XA`![ZqW_*X0=.sEF.a^[0\=0X;>BP8=4I5,Rpct8<u#1"3J<2=&=$/Llm$L(gTIBBBe+BiYYJm;b:q(0e1
%$D<Ep\:fU;Fp%8dA\bPn]dC:Qn>0D:d<2a*+p\K3@4_J4="?k(@g])tk:"kTZk7lhiO\;?cU$9K$R*hW01PWqgAE!mqc0_.;ZiT"
%4aHY[rito!Y?r-,E^1(l'H:0b=W30cKPY8kX/$,;OUo9/[>Eo_1itH&Tq#AOS1`mrOXNQ=+[a@o,K2'`o:Z8EZpW*u;hY6n$54Jn
%SfehllG4Oh+>6t-+)(933Y3*n#G7>H";K2l@MsQ)l4,cR'L7Jm2@udl9PP]@G@1jt7R2V(>S=N#"(A&:%EJdt]V\_?h`1n5VpJJ^
%kbNna_*K`4R#EpA)-2csF1@1)S6uX1XtsH$l42I<>[`heB`uG3G_S^>:*")jd%iRq2bfi%.M>0lSc]"-?T<:l4p+-p6gJMu9H0B)
%.MCpudd$&:ET^4n3U!R0MN!=mV""bVacuH`Fq-B3DEr@hXXe?U-mV)M*]P$j7NBmB&C#2s%$?LqaBY#]Tu5;*dZX+['-.P]S=OXj
%4:#/^CQVE615P^,G9AbWYt-?haCLUf$pb;@=2lP7B6%f%5qu0tBgC>9i-Sq4XDJS!>Qh^eMDbO8R7ohs=$':mZ0;'s[9@:QLW81B
%"*0i,/F"6>&W`gD0JWhk$fYslK*0.=2oj:.a_'KFaj<+3!7.qT[S-i(?0HV*+5@5b%3kG$["PC&77deoX1aD*=YIhC);=MO;f$U9
%/^p3uW"+9q\H%CJFeSc2YicarSX*Zf'KI);S<2W'9$`.EbpUAaY48[TA91I4>Z3mnfPm&-&(_@1Ug?S%\aX,Ae'd2Qk^7PLS"+:(
%lrDY)cN;kX1D&WoWP&abK_fb'#.i'"'>>(#28!DSjo%ja@FtVm;Z_KD_iYKL#LY048U\EdmRQR>:C,$K,T;N,Ne#r_4/DjLC#76-
%P4YW9rT'^k5g47b"gO/mp72M&EM-Yd=_^8#o1S6U-3/Y?9K1Bg#06L\`*(3qch*:oo*"gpVK+\TP/SkZ'/JJZ!HE.@S8oPW!]qIW
%PSf>2%*_qR#8#tW\QPmn!uM>lgQY<mL,DQ-j$&*'rU(ip7&Cg\GfI%cQ?4[E4B`c7*a#?[#iWBML]PbrbJ7`r7/A'+'!)8-'q#9t
%O`UeMW<k?j!?^=<"#FBd`)><F6,AO8*&9DaOn[Kd+KJNc2H+)5=<+1=d.@T$5hJ][g%ZjoEWr)>&AZKSR`VE3?ojJU5U8rK+hH,)
%0QdsiB<&[>SQ6F)`fC*>mVk2>7S&?qBr7>rA'/BE&.&"O/@9qIk[jUWrc2oU<B1SP0-#4enO_ruJK4fa"u=(`fRt#4e(#K`lV_8L
%D(LGG*];=c3GW(nQ@78L-*PU]3eEG[*eMfM+38Z1S.024^rH(i[*fr?Pn:65QsV_7O$h%SEG\9R^)>t@P!-oYK93GcgBe^m1h4bT
%i,ums'1WK;,S+I.KF#Xl_%JG1,`BJMrQ]1+O0=qiCmUVoL8L?`-'&#e/8"MAMt*/Z1^1-MJ*&+[mpRu]N0o9T3#+GnUbZ25[i3?r
%"2_^#OaitCY3p:;Q!h6X,!t9LJk]TSYWAt=L)X"^aX0sBJ\R1XOQ4aj`+0.UU!.m/7u\&.n<bA4Km?N-f&K#Oc&jiQjmn"e.;R\S
%*@+-%6/aSa7^b*H2O?!t>BL,<$_A9!%4UKfLBC,TH0cETK4,B/OBLpR17sFbe]?182OZ8S+KuVYIY5<[Mo1>^k9d>B_0"8<R>DSm
%_@Y>=>kVe=6k!%P[@JUH#<kD+*psLn$?/.b0VZN6%j,hUg]ZaJ%=Y><%"f'!pdBng,6L]g=c@>SM(%&l'L0JPibB5Dq$3A/KL]Ji
%M0QJ-FJrVHM?"Zs#9G0]+!=3MnfT_VDU#UmBu>H4XqF((.D8C.no,C>S=m/B7Jjp?rB%o\Q9RYd*!UG*6\[+5WA\HZBGn&U*CDD0
%D?k2)a]043A9,`rM+qfG;`/7OdJ"3!R`.A?K(VKOWuo@i:]<68H-<Yr5\eN.\$LoqG&/D=HSp%,'AAu1cT9=iiXq_=p;"Msf\YN=
%T/S`a"XfJWB,bG"ht2FXC(pWb^2]uTL9q:\*Wi'[gX@G[mBM@^:ZXQF?@?l5Q"QfD[$\UfgqSTjrR,$kM*6%&Nq<]qp'VGY7%i;.
%mDNT\[IQH.m1**s0's5@1jJ=/L*BV=n[V(eaO'W'VDdO&,3DQScZ+(bSEVJH!is,tf4cas`lX=2E@kc&ST_,PgB2Q![#[nsd1$)t
%.:R)=in_ch`uAFdD2cO7]=`0u>ibLCqG7Z/0U?mJJU:?RL@HF+#U=l(Cg06I1_@kGEd;)cGm:<A#JA5L'EO&[aNh[$/k=&r=/1b0
%SqOK:E%>+)Kh"TT0nC4`4IMbXO0X=T)'hL^4uR%1g2aO2LoWnJ8oGUZA8RR`GNSL3^hbtr!4],TYfT%k#;uWmXRQ9V1_n=[;,o)l
%$X%,D4\]!@VgH@aa:=BG8J'@9OaX%TRk/)@G*=!+4[c@/8:38TN&fN"D@e/66C$2%othOeU5nTaZi7BmRET9!m05uJj?t"V9K<T5
%mP.(aU[j:m3o![>(g78UW,m+eN33E/8:-H_N#a+l9'WpWmU0f:41Y>^-M\O6%=%Rr)1X'H5""R-=5B$)c5]K+kYRf=PB-0N$Rhul
%o;-a%RjXb;/@<Xn\)<IS0Rt#a0:;KnEOe_q^GOs_VMsL[*&pNf$Q4eK^E#e=6[T&qLR(B6(C,]j)P*^,aYK^)&*$(C8FREbL&Wd$
%s.j:%BfSfeN=#id`VL.IkLbMG>;V<f6EOo\`UY>q=+ZP6THLg[#K(i2=YOTP?&@KrCFIAlF85SDr+!QM)s;"3A%t!2FU&.W#KM:-
%ZT&M$.:U%_:eVW"-#:OohK/[77t0,of/2fSAhe)9AksZ.WlpS?*'m_tgVE=m<h7;H7\6Z5@Na)U->UdO>t[Kmk?nL`1Pgb;%NkI;
%MoJRoY"PWgFjMN]d_a,rES]Ld8cM6-OR*+jAuD!"B<tOVHNbee,.9i[R8fV-a/F!#*2hnSM7[T=&B'[uT7c21:Vd2#":+`k/4IZ4
%ZZ&:fEM]sQhk/[n>s0U^YM^C@hn%'u&39>7;G/">iITUS&cL8U);0^YO`Y^,5W>ssBHV,"0r,&h8J?hLXsSMg&dMhL%#nUD$oM3p
%7n[n3VYrH,iM+W[NpHU'Bp_"$l`'blj!9Ma".Tt&1CDd+Stg26\B%n7I3^Je3*Ac'fJ1fJNkZa>_Jt4T\?6(a2A]PYI4SY*4PHFU
%Tor,hP="\U=,.f*b0US*'c5DeA6]C#(@Xdi^OX"'pa)fEk=NZslr1]YLRmWo)R6u8)F-9sY`WbCrW>8k&hWC-JdaDW1hL]7P$C6q
%:LT%jke<ZG,GI81`7+_]%8p?>O/Bp"^)Db@9U)m#8"67\OOPmeRc+LsKL$Z`iM]BT(.9#q@5sG_mYhHj8J<k7(JrDSk7V*i_,1HR
%=]Si>&?[*>09@%90atl@:-,;Lefge7OR$XM_s\#(eF:\AmM./NgXldlCcO5<P?k$V-PPR?a5f@F)Y<pr^HC]aR>HnOV7b431O1gZ
%o%An4_k]1I$Ymc.oGmqTP@=X)X43"j$,Ll\:[i"EQn,D^i/:c*f(pMMN2FWuFpLNU;A@Q(4HhRtE"XD[L;S%+[3Ms&Q[23t$d4^T
%;``gOJidMc)cF3AAT>F=c?p3<&e91J-nMZ;+tA7r#]>%s`6];t*_dbLX);'UT$<d?,3rIiSi/-e#UZ&[KFi*hhK'Y?EFe_p@3S,O
%0f"K(Ej5X_0HI\CkU?St=<E2r9X;_jc'=];HrUGWO.G9De;fN:3Fh.D#RM+TOGfuj4"1[&apHcVU^)%a9,>DB4%ZB2<*(!*h0qk7
%-HRj6?N4oZ>S+p+FEMATj)"kf;;?EWZo%s5!FSPg6#n';32+N.9pB5L3cuc9XL][B_&)9Nh@KZQo]&O(a<B+91tZC$A3gUIVNUu<
%FDA)s*p4qD+HjZ&4k1ZR$)r&pNQZnaC9'HX%8"@D)r/\hSW"6PmkTmNOV\?u<?SK;;;YY&'^#at_XZGZh)1"eI!7E[0reI!dZb\=
%_Z]b7(`"J]`n*o0n^BL<Qa%dkBGaD`AFMq/@=R=i4\0Pd+<bt(=@2ig@@oWOTBF:aJ/[F>-9mLuF=pJsm"C1cPSk6l5p8%+>U75N
%3pcq%P<dHkGt<3j8r0Oi,>\X@MaG;%`aq0L5s?TmLo;A3>YYdHQj.$F3t-3?cEbt3+7uAUn"\.RjP[!p+UO'29,\FG%?GoI=rImN
%CC$K8cf&k8$k3gOQ3ItBFJR?h\&N'W7SHn*/06#Bgu5Jri,(q=&lk$0"k3]NVbGg>#YXT),YHPD<F@cWae]+I`1@9knlXrV!9eE3
%m%Qd^C0QE6^cYAfj[coq!'QaLCNIHbaZ9^l1IG97Z53L(^85<^q:K894"PBa5+n\(_2VSl%dkb.P]r4AT[41h,AC4?Eha;W.2X.P
%&e#`4($`0B[Q.t<JmU;8THinA\a4I\a'g?HUJRG5G*ShQ0$>G;@p-o*W@+$rBMC\:Fj5B.Be,R+KMc%^;F+_`<Sp.BFCZ&[&te].
%N32''JoA?\=@M6gB$>Ehok2=r[W*W3IUE\qO1r$F/8k;Aqc-YDIML^flr(FupSVW=8]/-#okTnV%dCIOUuC.=O_^9pTBTq)KV@3T
%JSL]`kTMdS<$eK#VtYF1WJ0%Z62MJWCa%P>=OO"p+JrmO#>*\+5k^JE;2BlM=iLL<0C\XFHE6-6FbRu(`=_u!U?\CkY2JhToh6)4
%=!:L?U-hq50DNL^eI5]5iN*``]\/$mBH/_AWN%8JiIDn#T23B&,pP4`'dhuB+>c%12[3LD4<b9pAKCsHVAUAMOGAiCdZ&j]@/&pd
%fVU\@dPOU/9#2n`W]k\h`e2`KX-6-bQWXcf\Qc'Y>tFFB".P$[Anj^TK.dS4rb\G5+t:[]Jg4#n4pj"&"NOCY.U*N+&0d;#R7PdQ
%#R>Mi5np.oq!#(!Z]U#DL1.&c,pm*\"pBaa:7rV5hS2"b61QuS2(pPQQL<E,iH:1p;b7n,1JcH&L3c\&_m<7:$H_5;Sm9g;`?4.)
%IdE4*%ZP>N5mPc"d45A'6l:(I&UZ[[j\(78&[JJ@nch6@<4&?Q31Ye?BF\u)L@.Zi_5F@;d;2s.%Tt_?'+W^-!nHPVZKEOCEV=6)
%`!HF0+W1X;@1?-9%:$W#2og-^!&4WZ81^a%U#ehb!72!TfgsYfRG/cq]qMYh9ILQemCZ+N]Q'Kd%,?%[\.`ECZlIjEocsYHb9kD8
%"n7UM'0PGK@L5"NkhU?-8Xs%B/$K1[!&iE"$po`;J:($9]g?_-NaZs7OML26_Rq!#d5B^pB(lu2pM?ZY2;C[%.4@Lt&QJ8J8](WQ
%ZE4ss\:OiDWXoPn;E0&U>Q8ZD:p%l_323<j3>\/NSh1$^`(Pob+9I(<O=W_L^oF\:"g]=QCLD'%APtMO@O[B@UCJCcdukhLSiici
%V7bpn-r.\\0eBbkCeeED(o5pQ)^?p"Wk"e*Mbl2d4jB755pQ``CHsmq:iN-`1+X'VlCmJXf(dBj@(ZMWcC#k[C[0^[\.d,d2EJ".
%&0jPWHU4C:5T22LSAgn*(;^i)TG9;/?c#,F2R*Ap.P3)QOfQ`ic]Rt:cpUeY-0RA"dtqHRY1-K4)-<#Y[K;RA_'bPiUZ#Hu*LiSO
%YTJEHgblY5Q3foj-I&,%AU4;S=(d:#'HqDE6^8dFKI%d7Cg^amG+=Xf.Zbd3C^:r6oJ8gtK$tl*l,do2&Ki5)9>U@"eW1S_1P6pU
%"o14[=di/06c4Ah#_I]HE"Y=_%EIS+NtBGVGu[!6ZJFAM?)ULOd1D)/neDnLSS@?r,icI,"I#@k:cH2.6AS^9ecCpBR06d"#UN#q
%--<'KW)_jj<(Gdt6QO*]!?tn&<-5Q'/rW3=E[41G)Jr'KOX5utXH>-i=\P17Wq@t4<H=V4c>WZT0m1mai+3PB*99(RQuND!CRUcm
%BR-ln(#E)%F/ktRf4IC+b,J??SYB_NTh8.kA8]L^V6UGZL["r2)Tc]<bW_IN?tDaSe26j"D6&aBMUlfN(H#LZX'%a9/D^UI$j'AP
%hLVQ[\5^ffq/rPaY3!KMh;J[o(>kf5B,Ph3,g>dhLshH?>EArcbCCjIaUVtX$!I*,cT,G5W"i-('/DP<5*l#&4jY\eZ+^=,g(b*&
%TIt4u:t@/$*6EUgK5hn\LLBK/e:^a@U`<:*Ot=@;(0)?3!'c853GAp(UAo1?j+>/LO7.n`<B3tV@?!9"KZPBPdSGCo(EM_Sg2Q_-
%ie(r/.?Wk:*$L/+q&%37f@(!g3/hh[C>pA).nh`';Ipt%H+"AD1hDfTG]s`jN>n1d0\+8cmSh&N;ah&Q_^\JS:-"\KfJ(/dkcGBM
%5F2%qP"a`j`4C3MbM_0:5q+Ioo6!W\<%0K?OA"TTS/28dP`X*C9)uX$onoeg:0U`p6o;iJ8]V2\3?1(u#ar;T'2c[+9r#=*X%5P+
%hD/q3O9qDMr.8l$?,])l,X325;,nBEbd$#4"Lr&Q<!?/)j_AgE]+BOtZX,com&h=u%///^;FiR=gm*&_?0Oqlb]`*uMTc"!ZWbhq
%*Hr>7\GD9U<K2W%[a%lP?%gHCl%%cb4;[+#q+dN'?9,>:JlpYLG3hN)ZO"'UnKFq1dQ>M1h1QJ?pgA(99K&a/AW8["C`ug;2$-s/
%Ft$4s"N!buJ\gBs"AfR0GMQju/so-n7=OCQAl$;$Pn+%?'\q*cJL3$dNI`uh`X[P\.c$L"@cN&P!l>b-2Y]QA`$#-?Kf_F_"$u:P
%IiP=/5<#$#!'tPm4^9cIggQk7:PFk(W1t7!4U0h)@!Q69#F1/*h0:>YQPbZ))]UT[%Ej_3GN-C<o3S(8O<Z&LJquRs*cCMr3oBs[
%7mA?uBJ#6^NP.<@hd$jb%V>#J.gG#@cVBF>EBleG3/lH3h@6Yd@^'6k'@R:((cb<FX2f`;+%7$OmLt[i&d][V2:3.Kdn^7["FNCC
%)Ee5_Ha#sMJT*WkFlF*%+m:2.ifK6kEM+RT]IQRMpkSs9&p"GZKL6S4:*b;_>.jIjpM^<K85:tlLW$!L$BdIE?]E36]eY5WGI62%
%(d`p2^<IGqEDtL)H>Joo+FtAeJ?aggF@"OH"$2J)`An'M\*h5G-k6QO/In"-)=L2gD1'9`k<hr'4:gbsN:.R7k_:,pRL'6q@tPk&
%^mHZF!%!oIraV2Z+o%[m76&c'R-S$1hSA;^39#"H3<LCk2/)+@.3J[X*8;`p)6gI_`%bPX:n"[RK<:RKPYVEM-:oEIe^/r4>fYr&
%*G;I;2?rdEno5@>!e`,&LaJFhiJ>rSSMOnaIXM>@XI>^o!!E[#96WenS:#Z*mZe&6m%.G'WW[>DnfU\J'W.j&)kTdaHQb9oTB^-<
%8!G`__ea;V&47$6Ulsd&7R./GdVs9LZkF/A>6lM_Oda4^65Lu>i@8!oBUkS1!"!,pFB_'CLaIqsQ[K^FWT(`8b0g9G4CDCU1.!#)
%Yb2D.Z-q4uH86U(C,YVlE1nDC($]d+A#5'Y,+PF'HD+"u!!MQ*\B-<^,3<e>4]tL@mjFLNqJq^c]H[fHa>27!a`*]-=LH-^P8,5m
%5W$ee&C+mM'hj]i.Y4HiK,T.-6Vl..LQ%D/GcR_+WDk%aPimI"916^LHq\9:_%8#m6P,gSI:=P3Zs-7";HH-#hF'0C#qTI(&L5iM
%$;==KP'>\UE')5iLQ<RB0GL[,"f.q_6W?TEjHbSKS.HlG`DhW?,Refk!GQo5gs"/Fp:#l87MF@aD?P>0YP+I`$C$($OuH&S8;Vk7
%jOcb4CI2q0Lc@OSPdJu3i&(sSRsUTCPr7lRJ\fVsh$sdHj-l=t8W2(s9l*1^Xg_jN7Ks3i%S9;/_]jN^O?G&If&6V@OgK^[s4!?K
%@gO9mf-7MPEMqRagmEX05h)d(Zm3J#Trf2U'o2:7$0*n1>@=A7(a,JGq!k\ri4FV`*M"c`Ot`J\R)2h/0HENsphckKEft!Z;)842
%Hb;::*o[6QZN0foOB]]_8c^gh`l`3-et[0:e5ek9SS\PVlCh4NHY*\"io6$'K5hp?$7s@/+HG/*3-GdY"#%964^+S5)pisG>%(rV
%AltBo^,#oQ0q=WM_%\_b,U?cL(_Bldie*'jcpG9naN!2heVol-%NqUXJIj^IQ$h4a*5WpI%"oH2,_2[qffA0g-;.Z8nd(,.RDF3M
%PRO)\#6a&pS!^6opT-g0P,Xuiq*$d9d>T,2;ZUB7,oK#j$N<O,g`/3-j:4Pn.8?\-`dgP06UjnRItK'tpKTB]"\J'bYZ^&3"^OP.
%2.C$M"`m=_JcQ3Urt1\_e-HpUYfab_4[q,X@KnL.7d:9nfYIX^R(u5tK()C:+4,V7&aLGL9K17G!@5L1@C+%p%(_<=C;corWofVS
%:BM<*rW=DZFL]s4Gnhj7r7`kg_oT+8h?,"\h9Z#e9%"V$56=quTW7]+!)ZkOjs&h.,Ku\],SIKlL>4qt0"A4nLmNH*D"u)966+&!
%W(pnH6&86i!)heXOd>1KRoQ9u/$#b,c_A.[E+8dd+DMf@<<cVdiI$>O+c1`.(@39Ff)sP"a`b&t2Ca!?6f4h$!ACLd`!"-PZ:\p6
%IG"E)-fJX%4Mf]tUBd+-[Sa^o`G6qpGMCt./rZF[+C,M0@OOSh?W)`IV3iYt4Gb_j]_p=V:jjU!l^#dS#8&&nh+s:abF,RoQ@clS
%c6Ra$5Z;?DI%me)^\u"110pGhPK*$o+o_l:C[_4;a&880>o455k=2Mq;%E.Lho5#$6VH.u4sFXFWRDQ13taWIB]L=;@e97c2O-7U
%Mr1%:fGT.g"EIsG3-/WaiB7u:BT[@4)2,dJ]HQ7nqBq529pc9>%-`3lV=mrF(I)tr)&3T)1+r-U<fEVsJ;a?b4ANf3S,!U4=i><\
%.l/5+[@%Cj0-VEr*I?e<$Zc),1;O*?'KXik`-[5<R3d:kOss$nb4c@6&nkDd+$I^B62^-nh."8sjmSk:SPU,\_f`gFZHM]PPHQTt
%0Goc#cWm"8Ff4Od$BBG,LL7T.@k`'#^gK4ap]d)!1jNF60UYgld[V@r0Y9)WLguI:adGg.H`4HMVi%kh'L["pAloG!lO%\t3)orH
%hF,3W.59M96'L+B<Ba;NiT!."W8gn84$XE-9!5%$(U+FMl"kRlMF!VCNpH0iWPpSsR&2Ej,(gReEs,O^7Ok7X-`muB@s^1%7Hf[D
%r]E]*#]Q\Ci5I]"KEH&#BS$4s!7\Or45u/a<tQ\pOfd17LbKIck,9ep*I!<<U(IJ5T8Ngc$_)j6&%_&HnW2crfN-QjEQ_^V!.k!8
%9SUq$&:!@l%_bGG5\MkD`K4Ve=U)h&"-(q[Zoh-*=^$-?-']*)LSi*rdL+G"?.tL\jh1114-SIkOAtYhZZEe6OR'C\5eR"\n8!8F
%`>l@_,"R(`Kg<04LqZ>a)-e*/b=!QZ&Df[n$fqJGTG\gj+>t$X'gZ:R7_iD@;-1Tpqf.kS>\*DF!Z:hV0-_Ti.h`p;:riHb)%ZN<
%W$N-D&d/Jj*4R?3&U!2TR+mHn7mWLBW8tf@&"7K9$1J53MBHm?KYUu);-1Tpqf*U$-5r*:q5a$%8jh<1cJ#4Z;+gm@gf_E$F]D0R
%3OV=-9\FrU'``cacqrTQL`0u\]?:<`qM?>03"@$`5c"F3"iH?s)ZhD3d;TH0j+W[(RtVLdHKmrfNsTr(')L]FSV]%(VW63Gc=#Vg
%0@H7@1Qe7uV#LdANXNMP&=0?bb&pK2;a`n5FtUsTUOob6&=TZA#DJ6m42Eh[/L7uZ\QNrm+aoF)haKP,4JrQH$Sn#[bB$8Y,%4.)
%E\0C(c8i]H8C]tB=!SX`io6I8bqtronr'.9nd4.`A-An5Vhf:@pt]bhcHYirD#dh:SH9oEBQ1fFPjeUhmWD>g#q5&(]\ig``NLTI
%.R1A+4CgjL8a7R7G[XXh<S!%Vjg+&-hOPuN&!NAR1^?9P"g3Oe#eX&iBE:NblAQWm.Qo6A9Y?RWc_t\\N>_:ZLE?&'Fi0/K)NA5^
%7-E0Ff^Ln4/SP3qIf:NDNoB%7rG+I,A9]s%\D+i"+ckAkSpK&m1QnRo`0!R>K'sR3b]E<'$\;CT+ccnf"nhsb'8l"bUFH0Un:K_1
%\a]Fq0l\cm6(K850>)kp%<lH6]i,"DRI>(bCG'JceHd:2`IL$i+>L*3B]4tKcOYcM3k0da)&<l*&qJiAIkOk&Is^A0@Tek)kP'Q'
%&+MD/#dWssj`-ND5`eN_:kSUYB]V(QJ]qiU4l)k3^&2*XpPEr8:1Qb)j<_AeWb=Gt3rA'o\%0'&ZF0]!?U$XPr9/.P'$sFd\+GCK
%p@RCJk+4djmJNCHp@RCJVO]q)jnr95pa/#acQ&K/8i`Z55VD\#.H_##jmeT,8>\tJ:J3]<(mX&jqdlRnT)c]WQ3.<ZV*<?9#7>.&
%/`q`h4W,2u\&f&%\&Vjb^,jVB#Q!^NTC+sYQ#C$aJ^Q:(i_pk2TtV(E*U(rlBI.P.,Bi$2.5"0'o>6.:>0itggG<*D^:MZm(]*D`
%IrGf'.FI>irUr)QI?"^&8-],3]l9YXpUV;2SlsT7'?-ViG)#>6<u:_u6=4$^P?hiFa4e^<G+jO^C46GLG0bljM).@:Zi1EGcq!pX
%>H]J:eP2qW*A2(BUULO'LT2de'uS=Hqu9A6\TSQ_`Kb>YVJn*rm_?;8B%2QAa>6KW"<*UfQ4koj=pTEtE4,!6V8*H'5%r;;lXt;I
%m8cWbLc?7m77F^qOP=!B^*%eepA#m@?6I:/L^0E.,[Dp5;pue^"BKO)k.4dZ$:$Ng01`%Rf*8(mU(3oEchaX3i'3*lF'\C:Gb2P7
%oZno\X1X4RcB(n".5Q3r*#Ek!6:!jnrN`0dr,*%(TM?;(PFcY)])]AfVF[ba"Bl->'n>lec`JqYqr'=/Q6-UJh%#NSdr`^fNREei
%!cJ5#7Q#"O-dV1WXgq)*f$/MAcjXsd-EVL!<u2,bMbT9n7%.NfA^!Ws"f/^e(Y#3\%AE*d@[A^-M/H7C!t/%la:G-bXOU6_L$=n0
%i#NQ"7$GP0^_0N,?N7:WiZ^csKYu/'?:DOi3YX9MjQdt%&ML+#IULsJ<./i;_o=tr=q@J18<;q[,YU"NrgW0]ntZF@[&ECi.P]?3
%X3cM9omhhCKVP"BP"WtZd%JiBd;u&E\U`9!oOUOD'!9ftmZ5AK,35Im_&Z58.l[L>1a.n)-]$>]Dk-DH50Es[R$]#Zn.jN7oMAGX
%G`:q^4V033IN-iDl0=@6d^2T!@kpbM!`-4a\\iB\E\'snb%o+t^bo7rLa\P1W?+?hCp2GOXi!5Yl,I7flq6&t'1_"6`<uRRGiu=Y
%]I;?i9R,@D!P5PQ_(jH#Q6jBmd`P2VFHW\U98?fb9[mq:XP&>06alXT\,7NdKO4sS>XP9*f??-Z5kdmQ]De%kf8Wu_0N-HZRJ$jJ
%>\FGXib.+s:Hq49mgt=-f1An*9^3J4<60p;,VBR#+iVnS;'`p^c"g4pgOtKlGSu\2gi"?BiU`)A&LkbhDQ\rM@q;F&3:1WX#()2=
%k&/f!^R=e)F[*O?Z#"Hn87+>'Be#RnP:gF7gr8%-Rf91>AS+n_i(TI2p%gCs3(-O!=PjukA/*#_.jeYV1%>qa)-`"FdD]I+&C*b?
%GDdRYkq'k2bBklE6bUr]^[&6lD2kCsSTll`Z.`/IhD;IA$b%i;Dt?R9'C*;sA6[H6BThB(=K16+9e^'lm\*2?;p2/cB!#Yt!qEf8
%k#!Y-2=>/h.TloL;UR.#0j7MVEhnmNC&Vcd$!R20U1>fR2UgeD&S0^%Cudu/IFXg`ZV[W.;[=A`\Cn_[Zu&T0/c3PX8,AhM0"&+D
%&9IAse0+U?@>oJ![^$+nRhk=t'"'c\Gn;PEQ)0nFBi*VPSgF1qA==\U"q;EHBdGV7JfoaN?0aKJ<Cms+>#SqWa?*>p9.5cp??-83
%(@q%*_QDFt65p`h)l%`1R<Kr8??:Osj"*OV=%[(p&gC0#K<1]T\dqmj!`RiW!:bHHHA2rk5fd#_*Fen(6EOU-=BJ^1eO)Vb!Ui8@
%,rUi/%)D_NgPT0.@RXdhU]cu&a>=9S\9`lO5:ep,SOMq7b7h"=("5;#DEmpjlhWes],>kU;X5+N%`IEH$(/cP[h$7h0'4W5.$7f]
%8g@*_pHRfVSBj;`d!O*7B\CNC[FMYo>9>WX!l:P:/TKd'*G]L2@(`:KRq_l3E^P?Ti</t)k-peQ0m"\\B#=EfKqO$".0bLmpmpHg
%iP9Oe!)U#CLj2@eIO11kqVD*'g%<%(^7_,&CZXkf0*-s[C/\b$o2is=CD4#bT6[P#Rb2)3nAJZ4Rt)]>DhjB]dO8VVq'oGrd0nOM
%ZEJ^8;^-/,"EF/@i8'HXSR=F?p*PT'e7?=m6#sJB=YZZ&Ua5n+e5eZij3J-\h,GbH$@#!'G\--<%;rl3'nKW#b`A:<nNmrao6l<R
%1o.ZJ@iWE'$lXNWF%V^da'RNI9$`fj]9A&7]0^C,k%S5^r`3,)#u;I?;%[:r>Lb2_*eMs;=V)uKX+iK_1u(c'P(]$Rot"8U#*Brl
%mE3;#?<:uK#RV3=94:>BoN)WbUem%LXQ%oq]7U/+3oDO7qV?,CKFMmV49ia$%4GK%CL9M?e(317Hj[ik,+#3`>t=`=b6%md^IC'R
%[pP5goaR+L&c,OCnCECDl>!_u"u(GcBJ="5=9H6SVeA;m6R04#hh#Z@/FnJaVZQe*FMso\K!4')M;u;0rE^c7,<d#_[AnJ(OqL3@
%p.9*\ek??:PU"oN-#GC&^38\__2s5a8PEc+I^V1,8a2_P!$u3#mlp*!O!MI'Q*I%2o4Kt724e-Ch[j[,4"iLXdOJ)WUb$ZSDXiu@
%n%CF#Z\_bB(I!`.0Cj'4!oT$*`'p9+Z?_Xtc3P9'luW2]If-uF56Ja7bu:ZDQ?K*[q6"^ue6;Bs-##]uPJ0(.#B17Q-JHMA>t1uA
%F/16HBoR=kEtfoJ@=P^sD2+NDNE#OIA^pjpjCrtB<GLo6$^KiuTa)ZtoGZe$`8Q)u1(=@7oaR%,<;]4jSg"FpbhCn(I9gAk'Vn76
%CM;8B!7&GBe]GbYY&-0-7jK'6'_ju94(IT4#SPg!'pp2.\$<]iZ+Peq8j%nj2Bdm!IuHTpdpP3?&ieeB44V)Cs*Ajm3L#sDrRJm8
%'KDWhg[VSt6DE7X4Z:LnalPOq;1_^uC`PFhh`qNdm[rUnSUaJ_dToQ,X\C_;[FJZKc78](-)I_FQC[U7A]pUO](tMY[)B!BAq[Wc
%q02*$+:]0Cea>S%4ZpZRVu;b4gZ,\(LSBU`:ntZeN'mfI<!^XBP"$s:WmO#%.3GHg7)K+jX_`#eZ\(rn_N%^Cqq+`=][a`m2gjIA
%Z1Mf.a]$c#V]&EgarVpRDckR0B=8QelX?_]'<O'G6p7TjT"qI$%<>T?J>bK!4CS?ASgtV*bQiNb6%!obs3k=uJ+(umDqGXll!Yl[
%MTS]-LqsFM/G:WIr'=>GP7;Z)a?_-X5Z'l>OnPgfG,/(ci.7VmU.A:QH6fr&EJar8;hX^NHN2HWBcTk,Df)D`l!Upfnt%G\D+-#q
%eom1c@`g&N^d6pI:7d,D/]u(:r@:<N5`gu%6DdEg9GJu.^%ICiC>UdIAa`'EG5SLek:WW&<FmBIn^_url?-X>MtAVT-V6-m]MN21
%.V+a/%ih0U1!JoM0<>q.Qa(e'lMs8AMcrp-Chg>N@i?CO<'dQdF^@QKR_Ik=W@IJV+Drk%aMh9rhHKD`!U@Mg"'(e)H9@!M=uhOi
%DDfG<$\-Of>7n1;<jhZ3ni\R-Vs\C#d*-aQd*'!EL2(L7&](8PWte:lb,e_Z2!p8&D0550:IA,G#Plg`oODmlT;]&^oiHjC]0"Am
%I`)Rc28bp9*2?!K;+mdNJgjP_?Rt*#n)4.Sb]XLX^T[E\():-0c3a\"7R&qF-CUE8XjiM*+07nTQIDlmED7a$oA#'V3JaoB0(0R1
%dRd#V?u(oK?7TbYB(lWaUIJd2$*$4^d]A>!9i'ckO^qnj6DLp.9\jnqBq`4\j1g9B]LM[5SJr3MB--N:1b"h.TK-Hf#EP<sLtQct
%"M;">[NUdJc//f1Wkr%4GZ`9HNN+ru_VCm028#ma'W"I4UG=.3_t5eL@3=7$b4WD)'so5_;k9`,BoB_5%M4ki,-js'7js+^bu07^
%1(rGNm[%D8Q=Q58DfR[:7rk"jX0541W!%h,?/<76d/L\%Z<`^'gg2AP=0=]3<1ojX:A'cnpZ=ra/\@d)A,dk.gP<]4.nSc^T9T_4
%IYR\LWfhkR/jC$)9,'*GrT!&GEtGFN=NGTWe\K4r"=!-^)Q)^[Xmt?:W+S&YG[kDd_ZW-2]_)Osg;)#E_r]5DiG<@h*_(u:]*D17
%K(-5W,Jq]a\,eR?Wdt:,KAeQ.Y;*UN7M51kdujOLnW7]q7_6Wu5"t?<W"lT4g`M&:ODTD?qGpp+Z3H_g:5[7$0oKt$-rGh*,$G)*
%cOUt7P-"*bBnaqI;6"Rffu7e7$j0%*.nST"14kP$DO@.X7jug;%\<CnX8i+=+>+b%^ZckiNPnM@8m=97%M;E!!1knP"FqnA1hNc'
%BdZEiR'o_@>eiX.M/5Ls7k?0EJf"s$l&;4rGXkM4n;9PO$u2u/cJ1sO\>$Ii3\.);MiXSWB_LlZI6OFEeOM7G[^@hZ<fJUV8>M(^
%-^_[lG+K\Wr*`jsRLCG5N@G:$Do#Tl$(e4bT1EZ1;hB!cVQ^(mTiql;.)r?X=trfs(s"18D,WO&%l=s<Ao\C"8=7E`-W]HBJWAq"
%R-BsA+.PoTM(foCdHk9E@1!6<1m@d<JMj\>P9ViSH9toW55&3?.Qp?n[;I6iL.-cn)bRKYKI5l/O3B:_93/?E;IpU=i;$d:):do#
%i1@&!#*RPH[g2ouUTMqJ*,_+\5BsPnWTT`2hs67rP.Q:BV/.]PXF;`)3g]NOLqDCik-7)c((P))jZlUWMdQ8C2K/km<W#i3[RtOl
%e-*%dEo3M]<,D?]@/'.b?.F#>b(ZR$Q=L%I1!-e`[T8<<Ygnk^:(cUNra?eB5R:_V1"WTe`BA#2aVk/QBtZE<4W?Jd@m`rEe68?^
%Z*B-A1<\;7GJ]kr+X(IUCdW_P9PG:K;udL$rUOJtQXFNa8)-tWlXFVOA]r$!II@oT$t"X8[).[.(=L)7`K?5'%,@iPq52WG7?B)4
%Gm!>Z0&fGLiqhSCLP<+2:f5ATm&]eD=%<d#*MRuD:'-SC]F*,$P)u7sq,&88Xa>J%QgdPj.]F9)%UhClh4cBXqq,3WCHMfH`RfRL
%c#U(Ha/GolT,;Krgqrt((R\?tk$C'bE7D+n?0`LVe,B%bE-U@J<EWnTqtk8=m`4k0,^C9#g2l.C/m;)tOeA2-kRK^soUA?&(*CCQ
%Q1Lk5AZDE@D+H5];m1T<bs]D&"Rp=G#3'W<SO'"D+CQE;V?u`ujf9ik3/VogN+;1BRdL>?_&Np2S8s4FQPB@p9+@BBG*k-\1IC=e
%l&kL)b>bl^Tf3(iCeQEa?4R(-d#MVJR@^*kc5YQ,*K'?KUZ;=b<0V813>D0ID.aW9=]l%2)<".]>j,%:Vs2C)X:W(5=aP-3Efoar
%QkOhH3NfbH]R<7BK8sf(,?mBsd#pR,X651Z\ZTJaRM;bq_IM6a;-lYJF54WUPspLDFqNB3oP:thpYQDrql(XBk7g%3&fOC,MFD@E
%q(uAeZus>R8Y$"%V9@M9l.>JuDkE.nHL!n7(7@.-V$8i@9MgdmB9Cb'`g0M`PRm\8H4:aAhR@WE&sYh9J'HZ@[Fr-W<dMC,8g3Xr
%M!>mW<.K.#3ei;AYE\)"/=ii"PZ7)4.4H^M?"7)-3dP[957nso>^8UGc^_0o,OT.(5<bIILL<rsF!T<UOgZ0ML9oo:f.H0G.3tGq
%M6SX>6sV05]FXXM@KEHbPs=^ufNP`'K,"W9=3FJ'k?SA-*:b^iFH%7hC:tPN(Ngf+YYOeM]QDb\.5e%_cujN+T6!qCim-RG^U:M=
%?*+E&m*M'LV]h*6hE*:W?07:+fu;:+_'\@.\i&;Mo[^$#W[rC'd]O!$6mYIcfqWP>KRkCKp)mpTrFI"Cl%`:*oVt%iSaP`",,k'q
%/!l'+/[qoblfTi*9GL_,Y'3dTpL>J3_pNNlYqRtHIEX1_+?#P_c2Dq^8YX;0"R:s*]B;'p`ujo?lrd5/'Sd<b$_W+nW\SJ7:t%=h
%>q?m;k$sEBX%]@`b1`T\?'I8rA=<87UK4;XRGW1*)i*UXll+ZHX1j<3I9bW9##WN%ZN@A9h`uCjW$]3,f)XC)+fd@6oV)[`L<aFW
%mm4]-U6Cm6Jq_5VSSL.XF<+#"*RT^o&AIcCU@F*pT#-nUPAOid?6PlKONnnK1mbs?V"=E'p4V;$i6CnVVnI=`p%Ni9A^[I2-@,fY
%;L.phm8ZbAmJD*qPRaR(>U@`-Dua&HUT3L2W4't"YmuiAnml1XZ!G>sAI9[J_e`XG$Xq$2#,3iX:WP_"?@r<W&LW\uIFo7s5'CdZ
%`e!W&9TE+W/PImXmAAL1q:JN\5$cmXE`H7hh9[6i^%K""G(jptP#QqT#fk2T(/L8;=q$Z1^hpBK2l#nVRGEL3R1ij+T_BM,d1:$Y
%9qEuKGUV+kXs;c^9:.l_l1I`8H1W^/D5?!6Ieg9&B>l[4QHu.tZ#$g?is0lm<H=9>`,/M(8km?@dM37#$4!<5+)=C"D7WhZdq`Ij
%deAndVcJ,H>BcciJs+o-4>qD36s%7VK2L:LE2a4kRuDd#@,QLqo]n!0QV=9F+"$pHaX1U7Q;PXc1tPok#p.m5;hh3Q9O@0YW6XhS
%cL/bND%#U<lu#gYUHc(c7e..<Uj<@hW>.G4ZglfqeYGi^1!2**_Dr+TjW"'/q=:"J2WX%VjS,>s)_?+J_f?d^EX*4EJ@F+Tdeo+E
%%2VaKMj2*[C^*`cPIf[,WNUG3@cGnhRO+K^+(kDqXEJjk>AB;``'jUgXcMj,mkZ;R7DaBc@5n7H+9Q!W8DU1Bl>U*3@BAo%(L/C$
%[f]n`*ec+SouWPEQ+$NaA>pn`QrnT1bGDDgN^*?:Z^US\-.#tJXK]+Qdo,7&2+f"(SsCRc0A])h"F5=%"_ASrIE/-j[$dcI/Q3,H
%^B(!4&CIkM[=FL6eT7JG.ZBCq3&R%.pR7/m?k=c49PR]bgtAk^Z@,9cW/IZ$%Akh>on<:br`oM=YD5rsK<s)Fm@E].m<=IAZP&PT
%,IS!E#'Tgo_pAWLL@Ad9;k`,@^EF1r?B7MCZj[*fI-%bIkS.D#[D]6i?9V6fGi%&SemFkcf!hU#Pl^DOVr2kFjnUN'>]&X!0&#q!
%s79QOAkBGn@a.km'-5n`AOS$lH<k;i@<IuQh>qKUp/d<\?B4mKLB."7VF@KQh;TZHP4/,d55B*a3o@,kSO;1dPq<'uSegPOe]^`m
%*DI(9cIO_H*<75o1!dI[L+$QjIceasH.mJGS:b0jDm,[`hh?.@h?*HsM$GJ>[tiIB0,@7p@B^t>JU"C!_P^N47/C\B8[5s"ikZ_E
%0ZrRe3JWfp3Lb=+h=;_\=0$nh23Q=",h]2h2AQ%eWLS>g.C\Co.K+s@o!s;s!EN'e*Bk:$_6HOs_nFo0,i;ljn#OocFh4bOpBNe9
%jW'kj'+SHZ$H^&/Vu,Nqb5HeE+f5bC"UKLQm9Krg18PFfeBK+ieg@&GW&:<K98j3)U>&!uBQn(7#X_It27Sbqr?P>JS,<[?#>6;?
%hY[;sh0RuT_>Q`?,g&+!_T3qHZ^?K2]/]d"nk"$a_DpX;edb5"%%&`\n"hKe*S!-@L.in<#hC$FIC3u?c+3EW%:[LPo*I91-=1W,
%W/q.#ND-0c%+G\T29WKRs&1R%V*nJ:@QrH)8_=&?+G=W6hStK,C#*(Ii>uG9("p,G=%ul+\l?7Amj_>N6[:hc@GU."o].3-S9?rO
%;M;KLgSc=$,kA0m%/U[?V"mRZ:Zt:Q30FrAPpjQ7hP(l#@Bp$*PXq*4M26*Nk1@)FGQu5NhaF+q@(b@L>)Rh[g_5tCe,]nVRqc$%
%C5AS?a+dptd3?(IHa/i!-'f9Pn=G:-P'q"B*?bW3"?(X\#$(0@HB>Q%C^2ekqmS\p&)T@%MnutEe'H;qJ&<(o$)Q,M3(#Ln#/a>3
%3O^ap6]&`L\KF\sV$SR^!EJ2de"UBT&]+!:?8uGr$CSPeWc0.J!%];6Z-M@9nQ];cTjsd,gjN>`9%?7[2.Q[nWf?7+d[(56!2]r.
%S'G,rigfKFF'gu7\]5CQ0u7-CPS.cb/"93Mq#=QZ9HChd3e*m]3/M:Q;p/@V+/XjIi-)?mO6R+!k5ZKW5h"LoJdq:GXaTE&5--).
%8]M@XZcNpP*gK-1na5`p(eU>EOJUbb.:>W!=M\0k9nBf*p9]E4(W/eqRBtdUmoF,Ag@o`I$)uJ+Oir4>3A`ZY'H!<N&uQdpe+q5;
%&^H%3POd"X-@;SAK*(o/AZ9_Zhd7dXi^&R#gGGZ+3hhU2ZN-3(#B>H@.M:^dB\aQW(\H-IqaZ.'P&3*p+8i%$_f)Zmo;YuBUL7&c
%TJ:R`%G2)A<D/&+$TNtL>/,AJ#G>!0_mIV'2'I#"_=n>Ce<Fsp:hX!`1%hQ$W)blth.adf`0iB3`,;le)St%.P=*'oZ$CcIk'QE6
%e:Sf=+1,!Slc/dPHh)e)d08^*&j+eFm%YZsOZ]IX7jRP$fVRhQ1geVA2A;!Ha7S#:(u@rF3KJDs'f"&(_ZJ)[.fe(9S(eWm23i"`
%d]!a>:bQh#4s*'2qBBWM;V]B<dF)>tf3:m,-='O!#t?Q6@MM9=;>1@Y/ce*VC(&go[HZQW6_Wr0\^,AZPIhQ_#U5X1!+R$j)o^8Y
%PMg)Tc5e$`d)0=R!<&0Ajn-?nj?6b5CkIhn+p9qGX*]Kqr)`le-`H@&9o+m-?<B"XFI:\_NC_4;gaI5m#U^E)2(St=00KJZpaTsO
%Q^f\G&N65gJtgRg%/%I[(;m*Maq(CC*F^UplQ>V@Me6X[+P.7&Nr)n'N#uY+[2Qf+n&H*U.T0G=>9E>Q&3"n(q?glSW='n_`Ar\f
%S8^<ZH%VNQ_4u;+^^3QKekYrdYF&d2e`aWT1c7tE9Q8Z]L%gN=@!C#[GBEo*)nL2r4h*EU?^pnI%/oN**uL:K(Ceq]dQ*bWN@r8p
%Pgm.`Md5.*2`.iBTgfZgB/@jVi9cO^jHHKl!&4Q^=XVEQ`#Gtekj)/sWE\BDlb+$4LI)YD2W/c0LQd)BEnCr+7,!n]hm`A$=Qm@C
%'_;*j2ft5.?;Rq@3mHM?+eHdOmgo:C2d1\eZO)_Yp*AQW"7,2AIpsT@&4U/T38R`3psff59]0a]qc`mSC$V4*76`>3'9Z$u0j_7+
%6-Ursr04#7;r6jfA%3(qj`Xts7nZq.BNC!d/3Zb&S;W;WXfGd,ia=of,)slR>?>&jn-9+;EVmeW<^qg'[)bCfnn!5C8=-]hg$h$&
%<Z4GjJf'oaX9mp*GV9I[mX`Ee[](3dPDL_Q4EThCLHi*u/nodddD$(%Ie$IYR>FIArQ)5`X%qkj>ep#K=j03nqqS"%I<gtp\d[m2
%29u'9o[gN-D$X@!?NB&?A7A;Gqhfl@gh!DZ%oCYu0`4L#]B0s;Trb_Imfn:==DP)=q'!kM03Im9406OMiZ=j*1BF.=#BV7s/^)sJ
%B\C'>Z#te_f!Wcc*&e!V$Y$8+O_8,X;+'\D)tVop%FBmZ7%VOj3[K+pY,/N[BI11I<<cBre*BH./djbA9Hs@gE4i]cKaaUS>764Q
%Q#S?Q[B7]qQ"PLr0/lpVpO,9%]3l<uJb@GlbVe5G5%1Fa2(%:j8Xg`,m*6\rB,,HL@4Z7[?8+BEpRhNHAKUfp/'Nh7l(V7ag\[2%
%dmdRiT[E)Ce^H_APh$Hg_Y;;p`ihIcJ2%3WV-T_3h+(\5!1&<BF,_3+C#gm[*$ETgYq,MQ+F_dLX^1O;"-\)_U!RE6IC=mU%ApNp
%fkjSH)PsJUb]:M)EN38QmDX8#7prZ\.>S`m\NeL-NbIZ8Vmq'AGjDBt)Ysp(p<'^j2u"H[BYMd#I9pL-0_&C<fNgr7M8q5Rk7PH2
%hHLB<",,]YH:%`_TM'.h#I&R6f7Db)@o]J2h]),sYjSj&eSG/b,O@nbL9ii`3Oc<e=f\0<*9(e57GB&L'8E)s/aJm7Bls(;oJ82s
%=gDu0/^i[%DA$hFqTtE@AoAUdBsq:*pGO>g*RNJW/\K!>Z!H+nI/_%<7fZ>GPi@s@I;JrU6\:e?p%6'2R@@nI.`;M]gUrm.gfprt
%*HCrHgF?[ablAtr+0lYN\Ku#5HN/%MT(!A]!;FXd*nr4DJ0DT8)4qA8Ujp-M#7osr"ORh!94tGQ<(I6[YJAe4q?XIW+-7-'m7gVh
%l(>,PF3nq,XIk+;r$,d@Fo!2cj"*Ll^S$]=))Z6)N$I(<Nm6_c6ZZ.g.>K0SW;/8`I7o"iT(4Fb3^\jd<$af+C<YlROIdu52+VOI
%>WqBtK>t(nla$j[0PC^7dnE29;<sF?]gP9;=n,QnMB?l6%3S;\rR5]bd+D?<oS<^5lFQ)WY]d91SubhX&J6uL3h<LBNt4n-k'Fh3
%`n7S6P?ijS6_'YG!I[;*XJGfi4AFk0HO2&?\Fl<_^7oe41RV>jNP7bJTEe][(1S3t\HHZ`7H&HL9$(IENh=WCLh925%TgfXROJGV
%Keij11m,U0:&%mOgN8Y6\rd8?8&s$\*k%A76fs*jl3,5+T8[`UAL<*o9Zd8/ibqoETSt*3NQDluiPh2AGr_M`gAY8s6B!K^]LXk9
%(=akmJ"Ok_T<+EkM!cs.fFu19n(4b?BXb!LXVq88BO7VgffHL72!R8o.,^DfL:E:tT>sVSGgj&8(>YiLjX&m+fmp+sF)aMOi:8&B
%*n$?V?#PH>Amc9V,;mm.LIiG5+%nXra21bUpCA3rm4uYd"j$g/4ZYK'EY[``\W;_@[hdk/Vlp_.r3c@fIZ2.PR3sLV`.;C12H3!n
%T(J"Q-/XY1KjHD:rn\Uj/eb"tBQ'_Tb#[?G*+HbWgk[6^'VJt?HkqlWo*jicL?W,d1N@Je`E8mak8#u)FE'2KV3fGs>]=,dpJk.p
%S%L7=73V=WBkrn@k<ki&:5iq>RbCH.K6=&qBkoJg[sEC9UQc'D-_]C+:)uSs%KmBm2+&j);fk'2b$jTB7t'kHRM8h\^a/a&7fFb1
%m`&KF%U#8RC(q^T,b7%tb@B"hQ/F2)f"-^\\e-ri8s28"+8%^6kPIp[U-($!b=1k&01O,SS?/*@V9^:r7E,C-o_V/7R]Oqa#<(%@
%!!`O9':HGq9JarOqfG\=(mmX5(S;moi<ZfTj#BGLeC'?Zf'10`n^)AcWqr\R(VJ0EOpH%Dd0kc0LnGF1@-V08/T!,n&9f/qmMf_f
%7+F[S5c1:-!Lj6T>rl$17?l$*&cqa)C3p_YZed:`=k41]<HCl=#of9SPJK>p+-a%rfOHV7_..4HLg:GejU:o;dpeE5[a+48\>VcE
%['b5!338L)e=/-\88Bp@4TfAnpTtdI)8.k?C%.6?=`tPmVKn[`N,?^a&WpC[.Is,<RCil/Uul!Kak-$:UVCY,^:1$N<e[-7Q:j"6
%TUP![VP+e62K\A3-:)18A#CJhNdL9b17<2<_U_q>h4Y`.G7k>I6EWF/$_68K`mFE7Ao#MOSe&b+n2@.<\f@L0%=$SA^!(>iY5m%5
%7-;Imhg%HDB3N)TUW';KZ\!Y5Fa1_^X:"p%AM*$t77[O!;D$`Mc8t^[ibJ,BQF/AqXreG,'koJG$D>jNKcHM2h*S1.R_c'rm<?5R
%R&6`SetttskgMW,X%XRn@k'L4=ljmfP[>s;Tnje-K#LbhA@<MmOO):I9Tlc8+%XXeTqj850AWMPj$$GSF<-gC4-12*c4C_[k*l%K
%7$M0f9Tt^01jI+ohFTPDZ0tNoIY:;VhTLJbo7k!&`))\IjB*UZJKJ_<WUr!I_EZr7Z@H2sdRA>5M6`*W>i>rIKl$2b&-Q^K2O19R
%JR6j5=_6'Zn(5gO*.:uAhQNsA4&&YC,i+T9h5L=e'5Lh.V8r[4T\(0U0,+/,oUMo]hPs70RKf&E<7l+*NmP=d#ks+9+O``WP'Q=J
%XY%]0^`5M..\K(FPh!Mt?kkIjnl*=/Vo[AE!-PZHH9?%aQrM"k54uhd^N)'spKl3Z[f2m%QA9O<)5*[Z4A*g!=qUS1$VC^;#qd$V
%Iq0p$"L;LSUk0l2`(H:3O;2R.a@c<FZj!i\LpDXN[LjWo`%A!5X;PbC=1\b--$Mji<X@;Y3/Q"+o=?%=B!MPq'HKHLPhbc?*auaH
%EGT,5Y)uQEr78F%M3k[dl..mRol1pGj%t;B<U2kNJ5A^J@!BIN't064rUi-KCm`F#3#gg@NhX?(od0&B9Kog86bJWs-8FF`pW)Wa
%WC]W5f.QoT@-F6K8Fk9:MWC&l0t=MW2TIYoLGctL.Io/dKUGrrco\,R!Od=t5bnL^dVhZOP<P_P2nB;ZAPHPF0o6_E%CORbmO]qD
%U%KH9ah4CfAaNbU@O0!U>U3C]Q_EJn9i[oMQs)G,@og!D1QKcsmYH(q.^YDI1NP703VPL$W(f!(Zf8""_soY9@RmD71drqur9D7'
%h&FkQ0/!q7eX4ZKk:.4!]#)\B.FW/IP/(9P,9Q^KR0V+<k?tT?K)-tU$]/W&)*P&N5@Q3Y,;FcQ\+m,bYHj1EN1(9_0$eZ]`rp_H
%dM21jDge]($'nSC8Z0b!_\$[A:'+d+,?mg3<0G3U+Vo1?`:cRM+[47N9[?MYq`<ok3-%-_6&eb:eeL(LaJu>5A@3+]%?$I/(u/-A
%\LF,TOp4KQ[[gQ(PluNn$7dAq[K;(XCdu<6Krd3%p6AaqIuEMNYfbQ<Y([<2ioSeOi!cd(Ff-56p'-6$1!^M-H6Mb=]UZ]YBC#?<
%em2u10jRP:=IH#52-Q3o"eRq#)AGha,X<1/1g,bfPON?RSI^7onsSf<rkZ4:/rd<Sh$K_II##U1#*nhc<;:sG9`MTZGPYNV@a0]p
%B8eB=*ZHR@2C(%<em#!Sj4D#al1mm*"cE/I6![3VI*@R*TG&e(AsnfchIoie.;Q)cp(=]*Bkl*^.=oFkQ.Q&g<.h^0I?X]sk9me#
%'n+im[Ro8L:^J0hl8Y>jgp9jnq;":)aF[Zf/k<aTWD*^bDaSQ2,sIM)4KKt;Zp@ODo)\Go>=GDdLjGh?pC-&:VA7+N#t%_6Un4N=
%A6*cN",IAMP#0o['+$qMXeNBbC<$k^QEIBMW;Z]Y5IQ/m9A&E'l#U1gZWGX<mn\a-n'@\:2nomFoU80u^BQ:,^^lkfM7ot*I%7=7
%,I5Cl8/Pm,W]dBM]Cqi7N;$QA8JT5sT`l">,&[r-K(]?2%8p!aHk#;JP&$?/1m(6PT,3MTfa/rZ,,eroqUrECQ#$hV/H2*O;t&!]
%qd.A'W93LG`4ipo]+FDBZgF<mkWrCd,_O6:T?,+7BT5\oG6e2lF9[q^BJM"3cCk11X1-)24#eVFWmE#Lr3%$m:I]3iQP'^lcD[j6
%EPKl%e<ps?HON9s+($i_fibR'a#Zc<HMJ%23>60g=`Pi0^UeL^7E!mSa8t,$C4"sU;d0H3ft6%+[qQo\j^-!9orQAhQp:>-!f!_r
%kc=miTfKRAfY"89C]`VQPj^pr=smUAl'_\@10^f0>M1_jej<M2U94E'@kqUI+t4Tk3MAc`.WS_#7s,"+dh!g,;<u]T%:-BjdU>r6
%3))diCC&sfpbD#gg%$fEIIj/u2g`uRk@\F'kKM!4-K?[V+7kj#A",(u`M9RjXDi.V/T+@\>po8R=`6oLINQ$6[cL^DVBg>*R1T:X
%TUcDq16n#`M6'=)XHcOF(Sr[p<SU9&WC)45L.&o2_6/f8^)KZbi/hGfh,[pGU4/=_'<Wg^j3p)kd;n`VY[e]QK9BW9iEMM+>S3?E
%]=1"`VY!&:fraN:WjgQ9.`Vu!BosSn+gXXiJXWUsoDC'1rU$Qg\ZI_'s0.b#mu7.7(\E<g]$E"ch-#@oH:b0W&.Q%#)RZu39aO,W
%0mGuXY,XaH0i`h,XG68ho[[TR0q9'5ep"`D.-2IP<VNL-,5*ks2Nc*;76$:;:O$e,IeVBZiYT%DZ5HkNb37qToHPG`<OSFdaf7\6
%bN6nM;HKaX/3f%p53gNqZl7TjC=64=]tR2'HlE6KZId1QG>DI$d=fJMepc>bp'.fcg7$M+Jf9]h\`dOuJ&!B.\0YflgQaNllJboH
%270Rsj+g'i<j-W=Z+4e<Ro2s#/C9+r59@::PnE?9/sSRP;:#hW[!K8"WdA7P$i\XO=N[@M2<W3f0!U/]@E%<q&",8*_#BE4PUY1&
%6M6^5XABn192[+7%&3M`I&r^[AP1Y;$<c\'NF[bL_afl5<+J'FL&@kVgpB,=HpWfL'hOW6WPtfu@MQ(X$>^n?R=ViG&`/e52DtY!
%`fY?k=G_GKOW;Q*.WL8/7b?iY#3e0?&X"%X#d/Fcq$]st-@eZOfq`Xh%]EG<@1,51EmR:*eSU3)R>(Via(8>jG='5NJK(XX6%fQ.
%bVuC5Jo;rMLO^gi&o,8.]$Ild13>&+E5C&P^6PZe,YVq<Z3t#=O!V1Y\>;p($5+W4!dE)&'.J*Yi7;"ILa!NXbsO$;%Y-"'=\giI
%WbhIQLe$5tCH:?Y@W8o;l(,/2;ZR@0c'.S]ZH.]9>0B/pDAf(QB5$u,N**`[g3:8^QhJ8Qcclot0+J`41/BK5A[o+V8KF+<k'^>"
%@OE7+Q5HS6q$?"tb%[rnn9?\fXl)jFZaf=$Q2NfkW`m(]:0qi4U%$+$9#806;]1Ol<alpr/S,RN/Go?nQb4KRTCVIO6p\tpZl7!a
%@4:%^8p?o7jOhHf5G/<8MuGbqYa\\LJolqQ%J?a+Yu"/!$X.+^D]hILj)0E,3(^]F1P&W2]fguR0ICFN;h@RphRdWP<W`^VLb[W,
%JV]&OMlT9Z;`=0E:flt)8S<+9MPY,AG@Go9I<7G3i`'V?#fjGdc[(N;E#hAT')GZ'F!Si>%$`"o6*EB87\e_$L\_"m/BnXs)8f3F
%9i#Mubp$qsq@&KZWI'9Ni/t=VVjD=^oii*:C2Bh[K,KUXq]P\pK[\P>>@g]>[.(@AN65ANQ)*$49h%""'EtZL:8.WWK\/B4EJ4YS
%!ir`"e9M^`0$tHL[QjN$K^Y0lHYU"\m/-bZk0Z7N1;GNKCu)l^c#?H)YT#JNGnb:h7+]Q<%+#_e5ua:C3*\`dqr@)-KB^:W(0SHg
%AEt/:CS50f.qlpie8"@b*I>k>+EO1gH)7a>qcePE_>p_\[<'d\L'<h:Us--HIUI<\<O#`o+%F3HoK>'ejhr',iQ>pqpKcGS8%XQl
%J*anB`5d[`.$D?p#G(#N33`#q])d2D9TYTaK8r,qO6oNV&T0[Y^#7QQPem%:Wq<F7FSKl([8[JOFW4L<W_UPboXCoKG2jd$?Wr&O
%-`Iii]3[!2JPA_`-12qafA:^i,3WN(iIm*Fg_E;AMU%-L!V53FMAX;&325\HB]8f@W][u!+_fuZ,.a.6Ri=a$q[:3J[l^#GcOXgK
%oc,DXU^`4+LgLM".AC`c7"Ia3UEBb+H70DoMsZ@62f/a*V9HQq<k'hh#7NuZ_?b-sZ?8'NmsR,t]OaYO3LZ?@DcNSS(20+fBTsbW
%)k>EF]@`.5C57b>Lb;.[>o1VN/8lcJ)-!'r742g;Fs)=ob.uN4E-,MY[?u7u*jj?(n(J=;XG9?E802:Kg<'I!7JK6IR#`ceSK>h_
%U7&-OQ_d6">XK^;\nn@$.INapfI+?gKCI&KRrr4Fe8ao?#o=0*Z#-#+Rif"+/8Y>D,a)._nd'c]'qb+i(s*;bY)"Uh%3eMK'3!W%
%A+h1fKJfW$9lI%&*GnnukZ]fh&!(@&=>NGDj5CbW3OsjNh1DllndBa?KtYD`_GoAbQ'-"Y.c9<qEG0A85gVp_As8\M>pK*d0<9D]
%#J,oiG?gs?pr@JhP$G%L;.Q^&+CJ"_Be,f3VQ&@Yc;m1^<pA$RQ]:rcX<<gHJt\AtVi->AXWRT"3;ppmei0*1>2$WXYdDYq:_GX$
%MOWlTmA8'QE0`CeR[1Bl&Y$;,[pDsV-jY4,GVP4aTqFeh#VK?9&j\#$[VuT3;k;[3Kh@,qDh#J=kqSfJQ>lu<Q0QQdUD=Jrnku]"
%\`63bQr9ch`;@=^[l8-4)&6V!i)2/5D+K-Q[:j-d2bq-7#sjAYm&*1O4WtMKe`6%liU%3B#cL?2dg%VYNk/EaG+H]l]uf]@ImA7E
%+Z:mG."ZXRQi\VBSTqOOH\7"%j^pQJFH'&mFPP9Q:`Pk.ROD,V+:<@3Uu>LlgU<8+@4)pt+t%Dd9+Fl/@Ga\/<C+Y41;C$IOt^jR
%(J39t/n(WqrK6r1:'h)CDGgdA<r7+EE4$YdS1'>l4.D92Y2ggXb=;OKlm"9:XVMTBHlGKdGU>!38%00"670%"9G)P2'STfBda$eJ
%88?=`QbIqd*DOH8<444Z';eYmG1PIMS9EKqf"&[n5sUU4:`ba5f"G,i38E=J(EFnK8O#,]H!MrX>T'N-1F54F9tm!^.C4Hj#A6W_
%n\dQ26RMYJ=^r1?=]1+/X'mDF1q]2D,IDM*,FEFA$jlu=85e[=.cl25-A^Qd1@uA"p1p+pfetJm87n\+qUeJa/^1o6M[M+(0!pK-
%`n&"<`t*A'O"`-oc<mC@mQ^!7@`5HBG(Mh`HsEZ[!jDnDc*!8$5j(BbluBIt-sH9/Hn0E;E5eO@.TLXEKcAZ8p[=Md4ejhp9=\Z]
%c=;cDJmCITIt@0,V#s(HJmk5n9ZbD\f_Y-=?M=Y)&c5VsUi,4p_q'Va.kh5ec$Y=hVD.^Fa!r2S>1$BZ."rPFQ,2DrUsUUZm=nVI
%J\8_k4bru')C4=^[0_\J.<i%/!d.030KC8,8Rg=tYUNTc,a67%LW6":.7qUc<TQa*=UU87EP!'%XCI^aF"eQanE)1FYYFf/f#`*L
%m:.S^l.MT`^sp=2KkbfnGdPn:X&iq=lW`#m-j!Xg[>ZU"Vs0o?q06\_llC&2G2n#nh(V#ncF2U8qQi+^VT'!86N6+U9&!"T[npa/
%$0i_5">gG7A/:K7c=q);#qH[+PY$[P,squI;o75$M6,]RGD"dVBua_m'.<Q)kt>"G3olcdA7cU:pL.7/+Ei?,8JReFa>QV*cL'k6
%9uhB:p=9T+MOjFnklRtGlT^tHpFpURm0t,fZc>%#GNF+bgWHB%B6[\CrOR'b\uJ1Y!2%?k"Z,,$8A'QD#lR]%n\;5,D1C(J5YI8f
%5ng#sp')oaf$&%"A:8Z1"_sZaNMdFp24big.bF=sp\$)goj-Xi?Aqbu.J="#$nluH`NAWkqUU?uf/8WcYYs(1=8?<i\dl2<,6b3f
%CI)Q..At\r:"^lQ@!Nq]B.?hK!$`Tq5[dM]hGt27h-TF88RHnsX3Z+&5)YY/Id$\/+cZr8TVje&F?+eUNf+?J?-i+a*kj$FT4CjB
%1h@Y5Y#=\L5Zudi5&t=gqFRJO*Jqd*a(2:Ym1je[l]or5qRKZlpQGJ[69jZ[q70\$m,oG\7_`1m#;JtU0'^Q-Y(F0L2BJ9h@2Tc\
%AhcV]Xj,[g0;_@@Fs31QIWAWrdRPW`5jiht:]'G??N&[&olH4RVO&MFNLtR=+l.?`^UAP=DGK">TAeqd:Kcu#82KT:@lBbWZ_MR\
%UBse\+>j.t,K9%)[ZdIY0*08uc![LDEd,k+lJu9Bge2g2#nZi(EcN`pfurJaSX2uWp=f;#9e0aFi5\j&10J'cl]jk[C%8&&7XJ1'
%1F1'O?p<;h8a]/JT(L@IkUbT(ZbCar="j;g]c8/IoT6ES6)hDma)V^hnsA_)C(6q%fuo)/2Mh2G"@<77-pjhQbe^iT/tV`;<%!>e
%VP.Z*hf)Wn5>8p6^q:hYqpQ(&5pH9eFD%I,be^D=M7TA:S=M8=,@Aa"H^KIH38NNWLUW=a3o0btrGIu)LktA>I+l&b*/FcD?5E]j
%KcE4OG5#^^jtG:FO,Xo5-oIZ0hDEIo[lQXqJ*`JqE6H03H*3@9RBg-"P3$*cZc>a0B25lnW#-_LZdE7CUtG9"*Sm;8s1NsjCV$W%
%VFcF03oPUc-''!/ee1MbJUJWHXc#eY@%F?VLdG>[OWHf+KYC#+e%ndEB=?*=>2BU?mQ]`Uqrjh_qZ,.<iiAi.qteXAIX2#%SNCtq
%#<k<,6G3<Vhtco;B.KspIX9'!oNHRE:X<'lh:H9O785*e.-@XEE`>!D;"o3&Z>s\<8!'-69U*7U[3!:-p?q3;?fUq53<&$Znb8U-
%O,W**"+,;AL;*/-AVG(6ju"dNphTm''63pba80i9ps4,(@)1=?*+Lh1'M^9u0ch#@+Rin`=4N,Dl3nF'iQl0`!p8./(/FkjrKFrV
%\Q:0QEh+2?C%]HpfB))YX-<DpNbF,FC[^h90*f[#hI&h[RGd0LTd;4bm7_+.o?PSf%GJuaO>]BV/Rs@0VeR:dK<r$gcMHhg?JXC0
%G&nP0k*P/k`fo4`I8Wi6(Zsjll*W\1bt2u6[QsD$V&2XS=qtjjDr@Q(DI\6\6:-O(U[Vf<#'aD;;$lSGLN<,aq<HsG?/3VGE<VZS
%LS0Jg`5R`*F;O\uNW4$)>_FZ<kKe*e%49?,4;X!<1EM*P7,O!f//1I-n8T'c7h?U=GD'u$I4!r(AUD=AkBurBY<MA#qm[X36^te3
%'?8:Pr6'L1pJCe`9D3A3obfr'[gG\pEj;^]d_&M!71/#p#0.dG7[>e#0'7k*5qD'X,XWCll\=$\h6jT'HF[*1pN!qeoZo0?OR);U
%:@=etrc3ElJi4r<^$Yk^>:jOpe.?XF.-&W^c=M15'qGHsd\8NKHp^>[S:hi?W3E+H2#KEF?oSF$^p6>$,(X3J'.%KMDH:R%+)FU=
%<ga"ge:TddJMWr=Yc_j!C8/_dAf0SqBAD/Tcb.(_0\hK8D02h&7*'X!=?FkTlU_']e&DhrlR]V8q0*r2/j)M8iJC/p0gMbsCK8.L
%N8G*%+=6B!*AR&Sn.".S<4f@/L2UGq];bu4(F_]%<1;kL>=Z:=[_`4^?k@ag8G+1!,nrad/4)s.cb<?1Gaa:Y@-:&>$5mg4XX0'O
%(uJU9-%9^h`7a\4Xg][&NF6';Qkp[W]GO*Q\7M9H]0Lg,do.1<qF"=<4p[Ce'>:%E/Fp9:(qi$9augn^Ha[QT>G-h:*)9pU3gXI^
%aXG!`(%^4.!.R+[Wp%hPL6Pd+@IZiumQlAP\9bFk%r.j[n5Af=p'=*4+SUVJY1PA%#]p0Y;CjOkR&>5F$+I>1?<!^uq-"Sna=2-'
%i1ZuFZu6_GRF'5sSsV"`\bH!!HMH>=VTaD4du60;7K-Q7=OEb[*nT7nP]1O<+CgFpQp-J55?k\/FQd01V'Q<*=jN$A=jj:USK$1M
%9fH_JLU+Y:Z>LnZ=l*N@n2@GUNFjZt>N7st:23VGq(F;4lIO6sqgLcb1$Z$h:;7nLrieO=5_Zs15NkS>0?*t`^]45P%tFD9]-%(5
%C[loOj.AO7m_`Zi`SBB==fVeYj3PEToHcG`c>W2d,8e2f#32'*@/TpA$t"%GDmD'HmKe6gb)B0?K7!HQV&:'6#ICLU<b?S3gSZ!M
%/lq,HbfkPm/+YPuJ0o!:4"C;INV2]HctL:pj3606TpI_jY*)JpKdC==YacSnJm&c5LH@s[]:>FAHh"Gs\6T-\DYSAYOOW^og&YJ7
%/*lHd(Dbg0CX]D*hsQ7]7R,FCp>`^PNS-,Z'.\$IYYXa7\Gsmb_&q_:5N;rtN;NX6)glf.cZfE-e*+XIU>>kFQJcQGc/A<'\h!oY
%.$&k"hgOtE4l+[""qk%Jlsu)-F6,!WS'[Zb2cYbnM@KI6>1TT+Wm>p*?!F'(QhKf(i6P^K`-jH3bk1mVj5nM-#m[Abj8ADS!UDP=
%ZYQ(6p:][C\(5ub+"j\9".ifY(l%p_pq-bsTXC-!5PU0Vr%SS4DX]rAn,aA]ca^euf`H`E_0cmE?BS@)P:/l;R"uSCKHRh36KE]R
%H%)a*"^do(I8u0`r9nk0H2[H/rbMJ!J,]1lIJ:@GJ,cE*DjK?(rl=L,nGE7]Vr.I-]!K0O]0H5hGCTSic0tZ1hmpnus6oe[2h1VO
%n,N;-J,IdaDuTZarqQMtE7!j"J,"eKrpTmKn,MhU!smquqZ~>
%AI9_PrivateDataEnd
